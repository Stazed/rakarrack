# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "process.h"} {public local
}

decl {\#include "config.h"} {public local
}

decl {\#include <FL/Fl_Value_Slider.H>} {public local
}

decl {\#include <FL/Fl_Scroll.H>} {public local
}

decl {\#include <FL/Fl_Progress.H>} {public local
}

decl {\#include <FL/Fl_Tooltip.H>} {public local
}

decl {\#include <FL/x.H>} {public local
}

decl {\#include <FL/Fl_PNG_Image.H>} {public local
}

decl {\#include <FL/Fl_Tiled_Image.H>} {public local
}

decl {\#include <FL/Fl_Help_Dialog.H>} {public local
}

decl {\#include <FL/Fl_File_Chooser.H>} {public global
}

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
}

decl {\#include <X11/xpm.h>} {public global
}

decl {class RKR;  // forward declaration} {public global
}

decl {\#include "icono_rakarrack_128x128.xpm"} {private local
}

decl {Fl_Tiled_Image *back;} {private local
}

decl {Fl_Color leds_color;} {private local
}

decl {Fl_Color back_color;} {private local
}

decl {Fl_Color fore_color;} {private local
}

decl {Fl_Color label_color;} {private local
}

decl {Fl_Widget *old;} {private local
}

decl {float *spl;} {private local
}

decl {float *spr;} {private local
}

decl {int last_tecla;} {private local
}

decl {int drag;} {private local
}

decl {int sr;} {private local
}

decl {int ns;} {private local
}

decl {int at;} {private local
}

decl {int nt;} {private local
}

decl {int tta;} {private local
}

decl {int Scope_ON;} {private local
}

decl {int Analyzer_ON;} {private local
}

decl {Pixmap p, mask;} {private local
}

decl {XWMHints *hints = NULL;} {private local
}

decl {volatile int got_sigint = 0;} {private local
}

decl {volatile int got_sigusr1 = 0;} {private local
}

class Analyzer {: {public Fl_Box}
} {
  Function {Analyzer(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {} {}
  }
  Function {init(float *smpsl, float *smpsr, int PERIOD, int SAMPLERATE)} {} {
    code {spl = smpsl;
spr = smpsr;
ns = PERIOD;
sr = SAMPLERATE;} {}
  }
  Function {draw()} {open
  } {
    code {int ox=x(),oy=y(),lx=w(),ly=h();
int i,j;
int px,py;
double y=0.0;
double t=0.0;
double nsp = 1.0 / (double) ns;
double dsr = (double) sr;
double udsr = 1.0 / dsr;
double acoeff= udsr/(0.005+udsr);
double image=0.0;
double oldimage =0.0;
double factor = (double) ns / 64.0;
char buf[4];
double xscale[] = {22.0,31.0,39.0,62.0,79.0,125.0,158.0,200.0,251.0,317.0,400.0,503.0,634.0,800.0,1000.0,1200.0,1500.0,2000.0,2500.0,3200.0,4000.0,5000.0,6000.0,8000.0,10000.0,12000.0,16000.0,20000.0};

memset(buf,0, sizeof(buf));
px = (lx-22) / 29;


double scale = (double) ly ;


if (Analyzer_ON)
{


fl_draw(buf, ox, oy, lx, ly, FL_ALIGN_CLIP ,back);

    
fl_color(leds_color);

for(i=0; i<28; i++)
{
      y = 0.0;
      double coeff = xscale[i]*udsr;

      for(j=0; j<ns; j++)
      {
                   
       t = cos(D_PI * (double) j * coeff);
       image = t * spl[j];
       oldimage = acoeff*image + ( 1.0 - acoeff) * oldimage;

       y += fabs(oldimage);
      }
       
      y = sqrt((double) i * y * nsp * factor); 
  
     
      if (y<0.0) y=0.0;
      if (y>1.0) y=1.0;     
                  
      py = lrint(y*scale); 
            
      
      fl_color(leds_color);
      fl_rectf(px+ox+px*i+4,oy+ly-py,px-2,py);

} 
 
 
}

else
{
draw_box(box(),ox,oy,lx,ly,back_color);
draw_label();
}} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if ((event==FL_PUSH)||(event==FL_DRAG)||(event==FL_RELEASE)) {

switch(event)
{
case FL_RELEASE:

if(Analyzer_ON) 
{
Analyzer_ON=0; 
at=0;
tta=1;
}
return(1);
break;
}
}
return(0);} {}
  }
  decl {EQ *efx_EQ1;} {private local
  }
}

class Scope {: {public Fl_Box}
} {
  Function {Scope(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {} {}
  }
  Function {init(float *smpsl, float *smpsr, int PERIOD)} {} {
    code {spl = smpsl;
spr = smpsr;
ns = PERIOD;} {}
  }
  Function {draw()} {} {
    code {int ox=x(),oy=y(),lx=w(),ly=h();
int i;
int Xl,Xr,Yl,Yr;
int SW,SH;
int px,py,old_px,old_py,oldr_px,oldr_py;
int posx;
double pP = (double) ns; 
double value=0.0;

SW=lx/2-5;
SH=ly;

Xl=ox;
Yl=oy+ly/2;


Xr=ox+SW+5;
Yr=Yl;


double dSW = (double) SW;
double coeff = 1.0 / pP * dSW;



if (Scope_ON)
{

//Draw Curve Reponse  
 


back->draw(ox,oy);

fl_color(leds_color);


old_px = Xl;
old_py = Yl;
oldr_px = Xr;
oldr_py = Yr;

for(i=0; i<ns; i++)
{
  posx = (int) ((double) i * coeff);

  value=spr[i];
  if (value>1.0) value=1.0;
  if (value<-1.0) value=-1.0;
  

  px = Xl + posx;
  py = Yl + lrint(value * .5 * SH);
   
  // printf("%d %d %d\\n",i,px,py);
   

if (i>0) fl_line(old_px, old_py,px,py);
  
  old_px=px; old_py=py;
  
  value=spl[i];
  if (value>1.0) value=1.0;
  if (value<-1.0) value=-1.0;



  px = Xr + posx;
  py = Yr + lrint(value * .5 * SH);
 
if (i>0) fl_line(oldr_px, oldr_py,px,py);

  oldr_px=px; oldr_py=py;
 
 
 }
 
}

else
{
draw_box(box(),ox,oy,lx,ly,back_color);
draw_label();
}} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if ((event==FL_PUSH)||(event==FL_DRAG)||(event==FL_RELEASE)) {

switch(event)
{
case FL_RELEASE:

if(Scope_ON) 
{
Scope_ON=0; 
nt = 1;
}
return(1);
break;
}

}

return(0);} {}
  }
  decl {EQ *efx_EQ1;} {private local
  }
}

class NewVum {: {public Fl_Slider}
} {
  Function {NewVum(int x,int y, int w, int h, const char *label=0):Fl_Slider(x,y,w,h,label)} {} {
    code {} {}
  }
  Function {draw_bg(int X, int Y, int W, int H)} {} {
    code {fl_push_clip(X, Y, W, H);
//  draw_box(FL_THIN_DOWN_BOX,X,Y,W,H,back_color);
back->draw(X,Y);

  fl_pop_clip();

//Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;} {}
  }
  Function {draw_rest(int X, int Y, int W, int H)} {} {
    code {int x = X;
int y = Y;
int h = H;
int w = W;
int S,S1,S2,S3;
int ko;
double val;


double fred=.239f;
double fora=.35f;
double fyel=.508f;


    val = 1.0-((value() + 48.0) *.015873016);
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  
  
   S = h - lrint(val*h+.5); 
  
   S1 = h - lrint(fred*(double)h+.5f);
   S2 = h - lrint(fora*(double)h+.5f); 
   S3 = h - lrint(fyel*(double)h+.5f);
 

    draw_bg(X, Y, W, H);
 
 ko=H+Y-S;

 if (val < fred)  
  {
  
   
  
  fl_color(fl_darker(FL_RED)); 
  fl_rectf(x+1,h+y-S,3,S-S1);
  fl_color(FL_RED); 
  fl_rectf(x+4,h+y-S,w-7,S-S1); 
  fl_color(fl_darker(FL_RED)); 
  fl_rectf(x+w-3,h+y-S,2,S-S1);
 
   S=S1;
  }   
  
 if (val < fora)  
  {
   
   
 
 
 fl_color(fl_darker((Fl_Color) 93)); 
  fl_rectf(x+1,h+y-S,3,S-S2);
  fl_color((Fl_Color)93); 
  fl_rectf(x+4,h+y-S,w-7,S-S2); 
 fl_color(fl_darker((Fl_Color)93)); 
  fl_rectf(x+w-3,h+y-S,2,S-S2);
 
   S=S2;
  }       

  if (val < fyel)  
  {
  
  
  
  fl_color(fl_darker(FL_YELLOW)); 
  fl_rectf(x+1,h+y-S,3,S-S3);
  fl_color(FL_YELLOW); 
  fl_rectf(x+4,h+y-S,w-7,S-S3); 
  fl_color(fl_darker(FL_YELLOW)); 
  fl_rectf(x+w-3,h+y-S,2,S-S3);
  
  
   S=S3;
  }   
   
  
  fl_color(fl_darker(FL_GREEN)); 
  fl_rectf(x+1,h+y-S,3,S);
  fl_color(FL_GREEN); 
  fl_rectf(x+4,h+y-S,w-7,S); 
  fl_color(fl_darker(FL_GREEN)); 
  fl_rectf(x+w-3,h+y-S,2,S);
  
 
if (val < 1.0)
 {
 fl_color(FL_BLACK);
   
 for(int i=H+Y-4;i>ko;i=i-4)   
  fl_line(x, i, x+w-1,i);
  
}} {}
  }
  Function {draw()} {} {
    code {if (damage()&FL_DAMAGE_ALL) draw_box();


  draw_rest(x()+Fl::box_dx(box()),
       y()+Fl::box_dy(box()),
       w()-Fl::box_dw(box()),
       h()-Fl::box_dh(box()));} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {switch(event)
{
case FL_SHOW:
             
             
case FL_HIDE:
             

case FL_RELEASE:

{
return 0;
}


case FL_DRAG: 
{
return 0;
}

case FL_SHORTCUT:
return 0;

default:
return 0;
}

return 1;} {}
  }
}

class TunerLed {: {public Fl_Slider}
} {
  Function {TunerLed(int x,int y, int w, int h, const char *label=0):Fl_Slider(x,y,w,h,label)} {} {
    code {} {}
  }
  Function {draw_bg(int X, int Y, int W, int H)} {} {
    code {fl_push_clip(X, Y, W, H);
 // draw_box(FL_THIN_DOWN_BOX,X,Y,W,H,back_color);
 
 back->draw(X,Y);
  fl_pop_clip();

//Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;} {}
  }
  Function {draw_rest(int X, int Y, int W, int H)} {open
  } {
    code {int x = X;
int y = Y;
int h = H;
int w = W;
double val;

   val = (float)(value()-minimum())/(maximum()-minimum());
   if (val > 1.0) val = 1.0;
   else if (val < 0.0) val = 0.0;
  
  
  int S = (int)((double)w*val);  
 
  
  draw_bg(X, Y, W, H);
 
   
   
  if ((val > .1) && (val < .9))
  {
  fl_color(fl_lighter(FL_RED)); 
  fl_rectf(x+S-3,y+2,7,h-4);
  
  
  }} {}
  }
  Function {draw()} {open
  } {
    code {if (damage()&FL_DAMAGE_ALL) draw_box();


  draw_rest(x()+Fl::box_dx(box()),
       y()+Fl::box_dy(box()),
       w()-Fl::box_dw(box()),
       h()-Fl::box_dh(box()));} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {switch(event)
{
case FL_SHOW:
             
             
case FL_HIDE:
             

case FL_RELEASE:

{
return 0;
}


case FL_DRAG: 
{
return 0;
}

case FL_SHORTCUT:
return 0;

default:
return 0;
}

return 1;} {}
  }
}

class SliderW {: {public Fl_Value_Slider}
} {
  Function {SliderW(int x,int y, int w, int h, const char *label=0):Fl_Value_Slider(x,y,w,h,label)} {open
  } {
    code {} {}
  }
  Function {handle(int event)} {open return_type int
  } {
    code {if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
}  
  
  int sxx = x(), syy = y(), sww = w(), shh = h();
  
  if (horizontal()) {
    sxx += 35; sww -= 35;
  } else {
    syy += 25; shh -= 25;
 }
  
 
  
 return handle2(event,
                  sxx+Fl::box_dx(box()),
                  syy+Fl::box_dy(box()),
                  sww-Fl::box_dw(box()),
                  shh-Fl::box_dh(box()));} {}
  }
  Function {handle2(int event, int X, int Y, int W, int H)} {open return_type int
  } {
    code {int mul=1;
switch (event) {
  case FL_PUSH:
    if (!Fl::event_inside(X, Y, W, H)) return 0;
     handle_push();
  case FL_DRAG: {
    if(Fl::event_button()==3) return 1;
    double val;
    if (minimum() == maximum())
      val = 0.5;
    else {
      val = (value()-minimum())/(maximum()-minimum());
      if (val > 1.0) val = 1.0;
      else if (val < 0.0) val = 0.0;
    }

    int ww = (horizontal() ? W : H);
    int mx = (horizontal() ? Fl::event_x()-X : Fl::event_y()-Y);
    int S=0;
    static int offcenter;

   
      S = int(0*ww+.5); if (S >= ww) return 0;
      int T = (horizontal() ? H : W)/2+1;
      T += 4;
      if (S < T) S = T;
      if (event == FL_PUSH) {
       int xx = int(val*(ww-S)+.5);
      
        offcenter = mx-xx;
        if (offcenter < 0) offcenter = 0;
        else if (offcenter > S) offcenter = S;
        else return 1;
      }
    

    int xx = mx-offcenter;
    double v;
    char tryAgain = 1;
    while (tryAgain)
    {
      tryAgain = 0;
      if (xx < 0) {
        xx = 0;
        offcenter = mx; if (offcenter < 0) offcenter = 0;
      } else if (xx > (ww-S)) {
        xx = ww-S;
        offcenter = mx-xx; if (offcenter > S) offcenter = S;
      }
        v = round(xx*(maximum()-minimum())/(ww-S) + minimum());
        
        
        // make sure a click outside the sliderbar moves it:
      if (event == FL_PUSH && v == value()) {
        offcenter = S/2;
        event = FL_DRAG;
        tryAgain = 1;
      }
    }


   handle_drag(clamp(v));
    } return 1;
 
    case FL_MOUSEWHEEL :
  
      if (Fl::e_dy==0) return 0;
      handle_push();
      handle_drag(clamp(increment(value(),Fl::e_dy)));
      handle_release();
      return 1;
    
 
  case FL_RELEASE:
    
    handle_release();
    return 1;
  case FL_KEYBOARD :
       if (Fl::event_state(FL_SHIFT)) mul=10; else 
       if (Fl::event_state(FL_CTRL)) mul=100; else
       mul = 1;
        
      switch (Fl::event_key()) {
      case FL_Up:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1*mul)));
        handle_release();
        return 1;
      case FL_Down:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1*mul)));
        handle_release();
        return 1;
      case FL_Left:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1*mul)));
        handle_release();
        return 1;
      case FL_Right:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1*mul)));
        handle_release();
        return 1;
      default:
        return 0;
    }
    // break not required because of switch...
  case FL_FOCUS :
  case FL_UNFOCUS :
    if (Fl::visible_focus()) {
      redraw();
      return 1;
    } else return 0;
  case FL_ENTER :
  case FL_LEAVE :
    return 1;
  default:
    return 0;
  }} {}
  }
  Function {draw()} {open
  } {
    code {int X,Y,W,H;
int sxx = x(), syy = y(), sww = w(), shh = h();
int bxx = x(), byy = y(), bww = w(), bhh = h();
when(FL_WHEN_RELEASE_ALWAYS | FL_WHEN_CHANGED);
 
  if (horizontal()) {
    bww = 35; sxx += 35; sww -= 35;
  } else {
    syy += 25; bhh = 25; shh -= 25;
  }
 

//  if (damage()&FL_DAMAGE_ALL) draw_box(box(),sxx,syy,sww,shh,back_color);

                  X=sxx+Fl::box_dx(box());
                  Y=syy+Fl::box_dy(box());
                  W=sww-Fl::box_dw(box());
                  H=shh-Fl::box_dh(box());
 
 
 
 
  double val;
  if (minimum() == maximum())
    val = 0.5;
  else {
    val = (value()-minimum())/(maximum()-minimum());
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  }

 int ww = (horizontal() ? W : H);
  int xx, S;

    S = int(.25*ww+.5)+1;
    int T = (horizontal() ? H : W)/2+1;
    T += 12;
    
   
    xx = int(val*(ww-S)+.5);
  
  int xsl, ysl, wsl, hsl;
  if (horizontal()) {
    xsl = X+xx;
    wsl = S-4;
    ysl = Y;
    hsl = H-1;
  } else {
    ysl = Y+xx;
    hsl = S;
    xsl = X;
    wsl = W-1;
  }


  fl_push_clip(X, Y, W, H);
  back->draw(X,Y);
  fl_pop_clip();

  Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;
 
  if (type() == FL_VERT_NICE_SLIDER)
   {
    draw_box(FL_THIN_DOWN_BOX, X+W/2-2, Y, 4, H, black);
   } 
   else 
   if (type() == FL_HOR_NICE_SLIDER)
    {
     draw_box(FL_THIN_DOWN_BOX, X, Y+H/2-2, W-4, 4, black);
    }
 
 
 //Line to the knob --- I dont like 

/*
 
 if (type() == FL_VERT_NICE_SLIDER) {
   draw_box(FL_THIN_DOWN_BOX, X+W/2-2, ysl, 3,Y+H-ysl , fl_darker(leds_color));
  }
  else
  {
    draw_box(FL_THIN_DOWN_BOX, X, Y+H/2-2,xsl-X,3, fl_darker(leds_color));
  }  
  
*/  
  
  
  Fl_Color juan,pepe,luis;
  float vval=fabsf((float)val);
  
  juan = fl_color_average(fl_darker(fl_darker(leds_color)),fl_lighter(fl_lighter(leds_color)),vval);
  pepe = fl_color_average(fl_lighter(fl_lighter(leds_color)),fl_darker(fl_darker(leds_color)),vval);

 Fl_Boxtype box1 = slider();

  if (!box1) 
  {
  box1 = (Fl_Boxtype)(box()&-2);
  if (!box1) box1 = FL_UP_BOX;
  }
  
  if (type() == FL_VERT_NICE_SLIDER)
   {
     
    draw_box(box1, xsl, ysl, wsl, hsl, fore_color);
    int d = (hsl-6)/2;
   
    draw_box(FL_THIN_DOWN_BOX, xsl+2, ysl+d, wsl-4, hsl-2*d,juan);
   } 
  else 
   if (type() == FL_HOR_NICE_SLIDER)
    {
    draw_box(box1, xsl, ysl, wsl, hsl, fore_color);
    int d = (wsl-6)/2;
    draw_box(FL_THIN_DOWN_BOX, xsl+d, ysl+2, wsl-2*d, hsl-4,pepe);
    }
  
  
  labelcolor(label_color);
  draw_label(xsl, ysl, wsl, hsl);
  
  if (Fl::focus() == this) 
  {
  draw_focus(box1, xsl, ysl, wsl, hsl);
  luis = leds_color;
  }
  else luis = textcolor();
  
/*  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  {
  
  
   if (type() == FL_HOR_NICE_SLIDER)
     back->draw(bxx+2,byy);
     
   else
     back->draw(bxx,byy); 
  
   }
   else
    back->draw(bxx,byy);
*/    

  int datasize;
  
  if(labelsize()< 11) datasize = labelsize();
  else datasize = 11;

  char buf[128];
  format(buf);
  fl_font(textfont(), datasize);
  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  fl_color(active_r() ? leds_color: fl_inactive(textcolor()));
  else
  fl_color(active_r() ? luis: fl_inactive(textcolor()));
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP ,back);
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP);} {}
  }
}

class RKRGUI {open
} {
  decl {RKR *rkr;} {private local
  }
  decl {int made;} {private local
  }
  decl {Fl_Help_Dialog *visor;} {private local
  }
  decl {struct list_element *mBankNameList;} {private local
  }
  decl {struct list_element *mBankNameListTail;} {private local
  }
  Function {make_window()} {open
  } {
    Fl_Window Principal {
      callback {is_modified();
save_stat(0);

Pexitprogram=1;} open
      xywh {50 111 800 600} type Double box DOWN_BOX color 0 resizable size_range {320 240 3200 2400} visible
    } {
      Fl_Box fondo {
        xywh {1 1 800 600} align 112
      }
      Fl_Menu_Bar MenuP {open
        xywh {2 2 518 18} box NO_BOX color 178 selection_color 7 labelcolor 7 align 112 textcolor 7
      } {
        Submenu Archivo {
          label {&File}
          xywh {0 0 100 20} labelcolor 7
        } {
          MenuItem Menu_New {
            label New
            callback {S_new->do_callback();}
            xywh {0 0 45 26} shortcut 0x6e divider
          }
          MenuItem Load_Preset {
            label {Load Preset}
            callback {L_preset->do_callback();}
            xywh {0 0 45 26} shortcut 0x6c
          }
          MenuItem Save_Preset {
            label {Save Preset}
            callback {S_preset->do_callback();}
            xywh {0 0 45 26} shortcut 0x73 divider
          }
          MenuItem Load_Bank_M {
            label {Load &Bank}
            callback {Load_Bank->do_callback(o);}
            xywh {0 0 45 26}
          }
          MenuItem Save_Bank_M {
            label {Save B&ank}
            callback {Save_Bank->do_callback(o);}
            xywh {0 0 45 26} divider
          }
          MenuItem Load_Skin {
            label {Load S&kin}
            callback {char *filename;
filename=fl_file_chooser("Load Skin:","(*.rkrs)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrs");
int last = rkr->relfontsize;
rkr->loadskin(filename);
Put_Skin(last);}
            xywh {0 0 36 21}
          }
          MenuItem Save_Skin {
            label {Save Sk&in}
            callback {char *filename;
\#define EXT ".rkrs"
filename=fl_file_chooser("Save Skin:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT

rkr->slabel_color = (int) label_color;
rkr->sback_color = (int) back_color;
rkr->sfore_color = (int) fore_color;
rkr->sleds_color = (int) leds_color;
rkr->sh = (int) Principal->h();
rkr->sschema = scheme_ch->value();


rkr->saveskin(filename);}
            xywh {0 0 36 21} divider
          }
          MenuItem Load_MTable {
            label {Load MIDI Table}
            callback {char *filename;
filename=fl_file_chooser("Load MIDI Table:","(*.rmt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rmt");
rkr->loadmiditable(filename);
Put_MidiTable();}
            xywh {10 10 36 21}
          }
          MenuItem Save_MTable {
            label {Save MIDI Table}
            callback {char *filename;
\#define EXT ".rmt"
filename=fl_file_chooser("Save MIDI Table:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
rkr->savemiditable(filename);}
            xywh {10 10 36 21} divider
          }
          MenuItem ConvertReverb {
            label {&Convert Reverb IR File}
            callback {char *filename;
char name[64];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Reverb IR File:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
rkr->ConvertReverbFile(filename);
rkr->Message(1,name, "Please, now use Reverbtron to load the new '.rvb' file");}
            xywh {0 0 36 21} divider
          }
          MenuItem ImportPresets {
            label {Import Internal Presets}
            callback {char *filename;
filename=fl_file_chooser("Import Internal Presets:","(*)",NULL,0);
if (filename==NULL) return;
rkr->MergeIntPreset(filename);
Show_Next_Time();}
            xywh {0 0 36 21} divider
          }
          MenuItem salir {
            label Exit
            callback {Principal->do_callback();}
            xywh {2 2 36 21} shortcut 0x78 labelcolor 7
          }
        }
        MenuItem Bank_Menu {
          label {&Bank}
          callback {B_preset->do_callback();}
          xywh {0 0 45 26} shortcut 0x62
        }
        Submenu {} {
          label {&Settings} open
          xywh {0 0 70 21}
        } {
          MenuItem Ajustes {
            label Preferences
            callback {if(!Settings->visible())
{
MiraClientes();
MiraConfig();
Settings->show();
put_icon(Settings);
}
else
Settings->hide();}
            xywh {10 10 45 26} shortcut 0x69 labelcolor 7 divider
          }
          MenuItem ML_Menu {
            label {MIDI Learn}
            callback {if(!MIDILearn->visible())
{
rkr->comemouse=0;
PrepareML();
}
else
MIDILearn->hide();}
            xywh {0 0 36 21} shortcut 0x65 labelcolor 7 divider
          }
          MenuItem ACI_Menu {
            label ACI
            callback {if(!Trigger->visible())
{
Trigger->show();
rkr->ACI_Bypass = 1;
put_icon(Trigger);
rkr->old_a_sum = 0.0;
rkr->val_a_sum = 0.0;
}
else
{
Trigger->hide();
rkr->ACI_Bypass = 0;
}}
            xywh {0 0 36 21} shortcut 0x61 divider
          }
          MenuItem {} {
            label Fullscreen
            callback {if(Principal->fullscreen_active())
    Principal->fullscreen_off();
  else
    Principal->fullscreen();}
            xywh {0 0 36 21} shortcut 0xffc9
          }
        }
        Submenu Ayuda {
          label {&Help}
          xywh {0 0 100 20} labelcolor 7
        } {
          MenuItem Contenido {
            label {Help Contents}
            callback {show_help();}
            xywh {0 0 100 20} shortcut 0xffbe labelcolor 7 divider
          }
          MenuItem Acerca_de {
            label {About...}
            callback {int x,y;

x = Principal->x()+((Principal->w()-420)/2);
y = Principal->y()+((Principal->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);}
            xywh {0 0 100 20} labelcolor 7
          }
        }
      }
      Fl_Box MT {
        callback {highlight();
drag_effect();
check_signals(this);

if (rkr->Tuner_Bypass)
{

if(rkr->efx_Tuner->note_actual != rkr->note_old)
{
char notas[3];
sprintf(notas,"%-2s",rkr->efx_Tuner->notes[rkr->efx_Tuner->note_actual]);
WNote->copy_label(notas);
rkr->note_old=rkr->efx_Tuner->note_actual;
}

if(rkr->efx_Tuner->nfreq != rkr->nfreq_old)
{
char refreq[60];
sprintf(refreq,"%8.3f",rkr->efx_Tuner->nfreq);
WRfreq->copy_label(refreq);
rkr->nfreq_old=rkr->efx_Tuner->nfreq;
}

//if(rkr->efx_Tuner->afreq != rkr->afreq_old)
if(fabsf(rkr->efx_Tuner->afreq-rkr->afreq_old)>.2f)
{
char nofreq[60];
sprintf(nofreq,"%8.3f",rkr->efx_Tuner->afreq);
if (abs(rkr->efx_Tuner->cents)>5) WNfreq->labelcolor(FL_RED); else WNfreq->labelcolor(label_color);
WNfreq->copy_label(nofreq);
rkr->afreq_old=rkr->efx_Tuner->afreq;
}

if(rkr->efx_Tuner->afreq==0.0f)
{
 char notas[3];
 sprintf(notas,"  ");
 WNote->copy_label(notas);
} 


if(rkr->efx_Tuner->cents != rkr->cents_old)
{
tuner_bar->value(rkr->efx_Tuner->cents);
rkr->cents_old=rkr->efx_Tuner->cents;
}

}



if (Principal->w() != rkr->resolution) adjustfont();


if(stecla==1)
{
 if(rkr->Selected_Preset<60) 
 {
 Preset_Counter->value(rkr->Selected_Preset+1);
 Preset_Counter->do_callback();
 }
 stecla=0;
}


if(stecla==2)
{
 if(rkr->Selected_Preset>1) 
 {
 Preset_Counter->value(rkr->Selected_Preset-1);
 Preset_Counter->do_callback();
 }
 
 
 stecla=0;
}

if(stecla==3)
{ 
 
 if(Nivel_Salida->value()>-50) 
 {
  Nivel_Salida->value(Nivel_Salida->value()-1);
  Nivel_Salida->do_callback();
  Nivel_Salida->redraw();
 } 
  
  
  
 stecla=0;
}   


if(stecla==4)
{ 
 
 if(Nivel_Salida->value()<50) 
 {
  Nivel_Salida->value(Nivel_Salida->value()+1);
  Nivel_Salida->do_callback();
  Nivel_Salida->redraw();
 } 
 stecla=0;
}   


if(stecla==5)
{
 update_looper();
 stecla=0;
} 



if (preset!=1000)
{

if(!rkr->midi_table)
{
 Preset_Counter->value(preset);
 Preset_Counter->do_callback();
}
else
{
 if(rkr->a_bank != rkr->M_table[preset].bank)
  {
    switch(rkr->M_table[preset].bank)
    
     {
       case 0:
       L_B1->do_callback();
       break;

       case 1:
       L_B2->do_callback();
       break;
     
       case 2:
       L_B3->do_callback();
       break;

       case 3:
       L_B4->do_callback();
       break;
     
     
     }   
   }
 Preset_Counter->value(rkr->M_table[preset].preset+1);
 Preset_Counter->do_callback();

}

 preset=1000;
}




ActMIDI();
if(rkr->ACI_Bypass) ActACI();

rkr->cpufp++;
if(rkr->cpufp==40)
{
char tmp[8];
memset(tmp,0, sizeof(tmp));
sprintf(tmp,"%5.2f%%",rkr->cpuload);
CPULOAD->copy_label(tmp);
rkr->cpufp=0;
}




if(rkr->numpc)
{
  if (rkr->numpi) P_IN_ST->show(); else P_IN_ST->hide();
  if (rkr->numpo) P_OUT_ST->show(); else P_OUT_ST->hide();
  if (rkr->numpa) P_AUX_ST->show(); else P_AUX_ST->hide();
  if (rkr->numpmi) P_MIN_ST->show(); else P_MIN_ST->hide();
  if (rkr->numpmo) P_MOUT_ST->show(); else P_MOUT_ST->hide();
  rkr->numpc = 0;
}    

if(error_num>0) rkr->Error_Handle(error_num);

if(rkr->Tap_Bypass)
{
   

  if((rkr->Tap_Display==1) && (rkr->Tap_Selection > 0))
   {
     T_DIS->value(rkr->Tap_TempoSet);
     UpdateTGUI();
     rkr->Tap_Display=0;
   }  

  if(rkr->Tap_Display==2)
   {
     rkr->Tap_Display=0;
     Tap_activar->value(0);
     Tap_activar->do_callback();
   }  

 
}



if (rkr->Bypass)
{ 
  if (rkr->val_il_sum != rkr->old_il_sum)
  {
  input_vul->value(rkr->val_il_sum);
  rkr->old_il_sum=rkr->val_il_sum;
  }
  
  if (rkr->val_ir_sum != rkr->old_ir_sum)
  {
  input_vur->value(rkr->val_ir_sum);
  rkr->old_ir_sum=rkr->val_ir_sum;
  }

  if (rkr->val_vl_sum != rkr->old_vl_sum)
  {
  output_vul->value(rkr->val_vl_sum);
  rkr->old_vl_sum=rkr->val_vl_sum;
  }

  if (rkr->val_vr_sum != rkr->old_vr_sum)
  {
  output_vur->value(rkr->val_vr_sum);
  rkr->old_vr_sum=rkr->val_vr_sum;
  }


if(rkr->efx_FLimiter->clipping)
{
CLIP_LED->color(FL_RED);
CLIP_LED->redraw();
}
else
{
CLIP_LED->color(fl_darker(FL_RED));
CLIP_LED->redraw();
}

if(rkr->efx_FLimiter->limit)
{
LMT_LED->color(leds_color);
LMT_LED->redraw();
}
else
{
LMT_LED->color(fl_darker(leds_color));
LMT_LED->redraw();
}

rkr->efx_FLimiter->clipping=0;
rkr->efx_FLimiter->limit=0;


if(rkr->checkforaux())
{
 if(vu_vu->value()!=rkr->efx_Vocoder->vulevel)
 vu_vu->value(rkr->efx_Vocoder->vulevel);
}

if (Scope_ON)Sco->redraw();

if (nt)
  { 
  nt = 0;
  Sco->hide();
  Tuner->show();
  Tuner->redraw();
 }  


if (Analyzer_ON)
{ 
 at++;
 if(at==3)
   { Analy->redraw();
     at=0; 
   }
}

if(tta)
{
 tta=0;
 Analy->hide();
 Etit->show();
 Etit->redraw();
}  



if(rkr->Looper_Bypass)
{
  if((rkr->efx_Looper->Pplay) && (!rkr->efx_Looper->Pstop))
   {
     if(looper_lqua != rkr->efx_Looper->looper_qua)
         
         {
           looper_lqua = rkr->efx_Looper->looper_qua;
           char tmp[16]; 
           memset(tmp,0,sizeof(tmp));
           sprintf(tmp,"%d/%d",rkr->efx_Looper->looper_bar,rkr->efx_Looper->looper_qua);
           L_TimePos->copy_label(tmp);
         }
   
   }
   
   
   
 }


}


if ((rkr->Metro_Bypass) && (MetroSound->value()==0))
{
  if ((!rkr->M_Metronome->markctr) && ((int) Metro_Led->color() != (int) fl_lighter(FL_RED)))
  
     {
       Metro_Led->color(fl_lighter(FL_RED));
       Metro_Led->redraw();
     }  
  
  if ((rkr->M_Metronome->markctr) && ( (int) Metro_Led->color() != (int) fl_darker(FL_RED)))   
     {  
     Metro_Led->color(fl_darker(FL_RED));
     Metro_Led->redraw();
     } 
}


if (rkr->MIDIConverter_Bypass)
{
  if ((rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_lighter(FL_RED)))
  
     {
       Mled->color(fl_lighter(FL_RED));
       Mled->redraw();
     }  
  
  if ((!rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_darker(FL_RED)))   
     {  
     Mled->color(fl_darker(FL_RED));
     Mled->redraw();
     } 
}


if (rkr->Harmonizer_Bypass)
{

    if((rkr->efx_Har->PSELECT)|| (rkr->efx_Har->PMIDI))
     {

    if (rkr->RC->cc) 
    {
    har_chordname->copy_label(rkr->RC->NombreAcorde);
    if(!rkr->StereoHarm_Bypass) rkr->RC->cc=0;  
    har_chordname->redraw(); 
    rkr->RC->Vamos(0,rkr->efx_Har->Pinterval-12,rkr->RecNote->reconota);      
    }
     }

}

if (rkr->StereoHarm_Bypass)
{

    if((rkr->efx_StereoHarm->PSELECT)|| (rkr->efx_StereoHarm->PMIDI))
     {

    if (rkr->RC->cc) 
    {
    shar_chordname->copy_label(rkr->RC->NombreAcorde);
    //rkr->RC->cc=0; // this now must be done in process Alg()
    shar_chordname->redraw(); 
    rkr->RC->Vamos(1,rkr->efx_StereoHarm->Pintervall-12,rkr->RecNote->reconota);      
    rkr->RC->Vamos(2,rkr->efx_StereoHarm->Pintervalr-12,rkr->RecNote->reconota);      
    
    }
     }

}


if (rkr->RControl)
{ 
   rkr->CountWait++;
   if (rkr->CountWait==25)
      {
        GMM->color(leds_color);
        GMM->redraw();
       } 
        
   if (rkr->CountWait==50)
       {
         GMM->color(fore_color); 
         GMM->redraw();
         rkr->CountWait=0;
       } 
      

  if (rkr->ControlGet != 0)
    {
      rkr->RControl = 0;
      Disp_Control->value(rkr->ControlGet);
      Disp_Control->redraw();
      GMM->color(fore_color);
      GMM->redraw();
      if((rkr->comemouse) && (rkr->autoassign))
       {
        rkr->comemouse=0;
        Assign->do_callback();   
          
       }
      
      
    }   
}}
        xywh {579 128 20 22} labelsize 18
      }
      Fl_Button TITTLE_L {
        callback {if(rkr->Bypass)
{
Tuner->hide();
Sco->show();
Scope_ON=1;
Fl::focus(Open_Order);
}}
        xywh {521 2 276 21} type Toggle box NO_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 40 align 17
      }
      Fl_Box LMT_LED {
        label Lmt
        xywh {504 8 8 8} box DOWN_BOX color 2 labelsize 10 labelcolor 7 align 4
      }
      Fl_Box CLIP_LED {
        label Clip
        xywh {541 8 8 8} box DOWN_BOX color 1 labelsize 10 labelcolor 7 align 4
      }
      Fl_Box UPS_LED {
        label Resample
        xywh {608 8 8 8} box DOWN_BOX color 2 labelsize 10 labelcolor 7 align 4
      }
      Fl_Box P_MIN_ST {
        label {Midi In}
        user_data 5
        xywh {620 3 29 20} labelfont 1 labelsize 8 labelcolor 7 align 128 hide
      }
      Fl_Box P_MOUT_ST {
        label {Midi Out}
        user_data 5
        xywh {648 3 29 20} labelfont 1 labelsize 8 labelcolor 7 align 128 hide
      }
      Fl_Box P_AUX_ST {
        label Aux
        user_data 5
        xywh {676 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
      }
      Fl_Box P_IN_ST {
        label In
        user_data 5
        xywh {698 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
      }
      Fl_Box P_OUT_ST {
        label Out
        user_data 5
        xywh {719 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
      }
      Fl_Box CPULOAD {
        user_data 5
        xywh {750 5 45 17} labelsize 10 labelcolor 7
      }
      Fl_Box Sco {
        label Rakarrack
        xywh {545 19 226 65} labeltype EMBOSSED_LABEL labelfont 1 labelsize 40 labelcolor 7 align 80 hide
        class Scope
      }
      Fl_Box E1 {
        xywh {2 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E2 {
        xywh {162 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E3 {
        xywh {322 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E4 {
        xywh {482 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E5 {
        xywh {642 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E6 {
        xywh {2 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E7 {
        xywh {162 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E8 {
        xywh {322 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E9 {
        xywh {483 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E10 {
        xywh {642 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box L1 {
        label label
        user_data 770
        xywh {2 195 158 17} labelfont 1 labelcolor 7 align 64
      }
      Fl_Box L2 {
        label label
        user_data 771
        xywh {162 195 158 17} labelfont 1 labelcolor 7 align 64
      }
      Fl_Box L3 {
        label label
        user_data 772
        xywh {322 195 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L4 {
        label label
        user_data 773
        xywh {482 195 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L5 {
        label label
        user_data 774
        xywh {642 195 157 17} labelfont 1 labelcolor 7
      }
      Fl_Box L6 {
        label label
        user_data 775
        xywh {1 396 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L7 {
        label label
        user_data 776
        xywh {162 396 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L8 {
        label label
        user_data 777
        xywh {322 396 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L9 {
        label label
        user_data 778
        xywh {482 396 158 17} labelfont 1 labelcolor 7
      }
      Fl_Box L10 {
        label label
        user_data 779
        xywh {642 396 154 17} labelfont 1 labelcolor 7
      }
      Fl_Group EQ {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button eq_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->EQ1_Bypass);
 return;
} 
rkr->EQ1_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_EQ1->cleanup();
findpos(0,(int)o->value(),o);}
          xywh {7 214 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice eq_preset {
          label Preset
          user_data 12000
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12000))rkr->EQ1_setpreset((int)o->value());
eq_1->value(rkr->efx_EQ1->getpar(12)-64);
eq_2->value(rkr->efx_EQ1->getpar(17)-64);
eq_3->value(rkr->efx_EQ1->getpar(22)-64);
eq_4->value(rkr->efx_EQ1->getpar(27)-64);
eq_5->value(rkr->efx_EQ1->getpar(32)-64);
eq_6->value(rkr->efx_EQ1->getpar(37)-64);
eq_7->value(rkr->efx_EQ1->getpar(42)-64);
eq_8->value(rkr->efx_EQ1->getpar(47)-64);
eq_9->value(rkr->efx_EQ1->getpar(52)-64);
eq_10->value(rkr->efx_EQ1->getpar(57)-64);
eq_Gain->value(rkr->efx_EQ1->getpar(0)-64);
eq_Q->value(rkr->efx_EQ1->getpar(13)-64);}
          xywh {79 214 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Plain
            xywh {12 12 36 21} labelsize 10
          }
          MenuItem {} {
            label Pop
            xywh {12 12 36 21} labelsize 10
          }
          MenuItem {} {
            label Jazz
            xywh {12 12 36 21} labelsize 10
          }
        }
        Fl_Value_Slider eq_Gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(130);
 return;
} 
rkr->efx_EQ1->changepar(0,(int)(o->value()+64));}
          xywh {51 236 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_Q {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(131);
 return;
} 
int i;
for(i=0;i<10;i++) rkr->efx_EQ1->changepar(i*5+13,(int)(o->value()+64));}
          xywh {51 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_1 {
          label {31 Hz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(132);
 return;
} 
rkr->efx_EQ1->changepar(12,(int)(o->value()+64));}
          xywh {51 268 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_2 {
          label {63 Hz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(133);
 return;
} 
rkr->efx_EQ1->changepar(5+12,(int)(o->value()+64));}
          xywh {51 280 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_3 {
          label {125 Hz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(134);
 return;
} 
rkr->efx_EQ1->changepar(10+12,(int)(o->value()+64));}
          xywh {51 292 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_4 {
          label {250 Hz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(135);
 return;
} 
rkr->efx_EQ1->changepar(15+12,(int)(o->value()+64));}
          xywh {51 305 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_5 {
          label {500 Hz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(136);
 return;
} 
rkr->efx_EQ1->changepar(20+12,(int)(o->value()+64));}
          xywh {51 317 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_6 {
          label {1 Khz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(137);
 return;
} 
rkr->efx_EQ1->changepar(25+12,(int)(o->value()+64));}
          xywh {51 329 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_7 {
          label {2 Khz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(138);
 return;
} 
rkr->efx_EQ1->changepar(30+12,(int)(o->value()+64));}
          xywh {51 342 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_8 {
          label {4 Khz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(139);
 return;
} 
rkr->efx_EQ1->changepar(35+12,(int)(o->value()+64));}
          xywh {51 354 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_9 {
          label {8 Khz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(140);
 return;
} 
rkr->efx_EQ1->changepar(40+12,(int)(o->value()+64));}
          xywh {51 366 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eq_10 {
          label {16 Khz}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(141);
 return;
} 
rkr->efx_EQ1->changepar(45+12,(int)(o->value()+64));}
          xywh {51 379 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group COMPRESS {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button compress_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Compressor_Bypass);
 return;
}
rkr->Compressor_Bypass=(int)o->value();
rkr->efx_Compressor->cleanup();
findpos(1,(int)o->value(),o);}
          xywh {166 216 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice compress_preset {
          label Preset
          user_data 12001
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12001))rkr->efx_Compressor->setpreset(1,(int) o->value());
compress_threshold->value(rkr->efx_Compressor->getpar(1));
compress_Ratio->value(rkr->efx_Compressor->getpar(2));
compress_output->value(rkr->efx_Compressor->getpar(3));
compress_ATime->value(rkr->efx_Compressor->getpar(4));
compress_RTime->value(rkr->efx_Compressor->getpar(5));
Auto_Output->value(rkr->efx_Compressor->getpar(6));
compress_Knee->value(rkr->efx_Compressor->getpar(7));
Stereo->value(rkr->efx_Compressor->getpar(8));
Peak->value(rkr->efx_Compressor->getpar(9));}
          xywh {238 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {2:1}
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {4:1}
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {8:1}
            xywh {32 32 36 21} labelsize 10
          }
        }
        Fl_Value_Slider compress_ATime {
          label {A. Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(142);
 return;
} 
rkr->efx_Compressor->changepar(4,(int)o->value());}
          xywh {212 251 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 250 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider compress_RTime {
          label {R. Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(143);
 return;
} 
rkr->efx_Compressor->changepar(5, (int) o->value());}
          xywh {211 271 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 500 step 1 value 120 textcolor 7
          class SliderW
        }
        Fl_Value_Slider compress_Ratio {
          label Ratio
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(144);
 return;
} 
rkr->efx_Compressor->changepar(2, (int) o->value());}
          xywh {211 291 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider compress_Knee {
          label Knee
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(145);
 return;
} 
rkr->efx_Compressor->changepar(7, (int) o->value());}
          xywh {210 311 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 value 3 textcolor 7
          class SliderW
        }
        Fl_Value_Slider compress_threshold {
          label Thrhold
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(146);
 return;
} 
rkr->efx_Compressor->changepar(1, (int)o->value());}
          xywh {211 331 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -60 maximum -3 step 1 value -3 textcolor 7
          class SliderW
        }
        Fl_Value_Slider compress_output {
          label Output
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(147);
 return;
} 
rkr->efx_Compressor->changepar(3,(int)o->value());}
          xywh {211 351 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -40 maximum 0 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button Auto_Output {
          label {Auto Output}
          user_data 2
          callback {rkr->efx_Compressor->changepar(6,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();}
          xywh {180 378 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button Stereo {
          label Stereo
          user_data 2
          callback {rkr->efx_Compressor->changepar(8,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();}
          tooltip {Level detect Left and Right separately.  Unchecked compresses according to L/R average.} xywh {265 378 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button Peak {
          label Peak
          user_data 2
          callback {rkr->efx_Compressor->changepar(9,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();}
          tooltip {Peak Mode Compression} xywh {180 365 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group DIST {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button dist_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Distorsion_Bypass);
 return;
}
rkr->Distorsion_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Distorsion->cleanup();
findpos(2,(int)o->value(),o);}
          xywh {325 216 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice dist_preset {
          label Preset
          user_data 12002
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12002)) rkr->efx_Distorsion->setpreset(0,(int)(o->value()+2));
dist_WD->value(rkr->efx_Distorsion->getpar(0)-64);
dist_pan->value(rkr->efx_Distorsion->getpar(1)-64);
dist_LRc->value(rkr->efx_Distorsion->getpar(2)-64);
dist_drive->value(rkr->efx_Distorsion->getpar(3));
dist_level->value(rkr->efx_Distorsion->getpar(4));
dist_tipo->value(rkr->efx_Distorsion->getpar(5));
dist_neg->value(rkr->efx_Distorsion->getpar(6));
dist_lpf->value(rkr->efx_Distorsion->getpar(7));
dist_hpf->value(rkr->efx_Distorsion->getpar(8));
dist_st->value(rkr->efx_Distorsion->getpar(9));
dist_pf->value(rkr->efx_Distorsion->getpar(10));
dist_oct->value(rkr->efx_Distorsion->getpar(12));}
          xywh {397 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Distorsion 1}
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distorsion 2}
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distorsion 3}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Guitar Amp}
            xywh {32 32 36 21} labelsize 10
          }
        }
        Fl_Value_Slider dist_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(30);
 return;
} 
rkr->efx_Distorsion->changepar(0,(int)(o->value()+64));}
          xywh {372 247 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(95);
 return;
} 
rkr->efx_Distorsion->changepar(2,(int)(o->value()+64));}
          xywh {372 260 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_drive {
          label Drive
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(69);
 return;
} 
rkr->efx_Distorsion->changepar(3,(int)o->value());}
          xywh {372 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(71);
 return;
} 
rkr->efx_Distorsion->changepar(4,(int)o->value());}
          xywh {372 287 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice dist_tipo {
          label Type
          user_data 12
          callback {rkr->efx_Distorsion->changepar(5,(int)o->value());}
          xywh {354 303 70 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Atan
            xywh {32 32 36 21} labelsize 9
          }
          MenuItem {} {
            label Asym1
            xywh {32 32 36 21} labelsize 9
          }
          MenuItem {} {
            label Pow
            xywh {32 32 36 21} labelsize 9
          }
          MenuItem {} {
            label Sine
            xywh {42 42 36 21} labelsize 9
          }
          MenuItem {} {
            label Qnts
            xywh {52 52 36 21} labelsize 9
          }
          MenuItem {} {
            label Zigzg
            xywh {62 62 36 21} labelsize 9
          }
          MenuItem {} {
            label Lmt
            xywh {72 72 36 21} labelsize 9
          }
          MenuItem {} {
            label LmtU
            xywh {82 82 36 21} labelsize 9
          }
          MenuItem {} {
            label LmtL
            xywh {92 92 36 21} labelsize 9
          }
          MenuItem {} {
            label ILmt
            xywh {102 102 36 21} labelsize 9
          }
          MenuItem {} {
            label Clip
            xywh {112 112 36 21} labelsize 9
          }
          MenuItem {} {
            label Asym2
            xywh {122 122 36 21} labelsize 9
          }
          MenuItem {} {
            label Pow2
            xywh {132 132 36 21} labelsize 9
          }
          MenuItem {} {
            label Sgm
            xywh {142 142 36 21} labelsize 9
          }
          MenuItem {} {
            label Crunch
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Hard Crunch}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dirty Octave+}
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label {M.Square}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {M.Saw}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Compress
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label Overdrive
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Soft
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Super Soft}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Hard Compress}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Lmt-NoGain}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label FET
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label DynoFET
            xywh {30 30 36 21} labelsize 9
          }
          MenuItem {} {
            label {Valve 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Valve 2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Diode clipper}
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Check_Button dist_neg {
          label {Neg.}
          user_data 2
          callback {rkr->efx_Distorsion->changepar(6,(int)o->value());}
          xywh {430 304 41 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button dist_pf {
          label {Pre Filter}
          user_data 2
          callback {rkr->efx_Distorsion->changepar(10,(int)o->value());}
          xywh {329 320 67 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button dist_st {
          label Stereo
          user_data 2
          callback {rkr->efx_Distorsion->changepar(9,(int)o->value());}
          xywh {394 320 57 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider dist_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(48);
 return;
} 
rkr->efx_Distorsion->changepar(1,(int)(o->value()+64));}
          xywh {372 337 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_oct {
          label {Sub Octv}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(9);
 return;
} 
rkr->efx_Distorsion->changepar(12,(int)o->value());}
          xywh {372 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_lpf {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(86);
 return;
} 
rkr->efx_Distorsion->changepar(7,(int)o->value());}
          xywh {372 369 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dist_hpf {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(89);
 return;
} 
rkr->efx_Distorsion->changepar(8,(int)o->value());}
          xywh {372 381 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group OVRD {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button ovrd_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Overdrive_Bypass);
 return;
}
rkr->Overdrive_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Overdrive->cleanup();
findpos(3,(int)o->value(),o);}
          xywh {485 216 34 18} shortcut 0x34 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice ovrd_preset {
          label Preset
          user_data 12003
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12003))rkr->efx_Overdrive->setpreset(1,(int) o->value());
ovrd_WD->value(rkr->efx_Overdrive->getpar(0)-64);
ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
ovrd_LRc->value(rkr->efx_Overdrive->getpar(2)-64);
ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
ovrd_level->value(rkr->efx_Overdrive->getpar(4));
ovrd_tipo->value(rkr->efx_Overdrive->getpar(5));
ovrd_neg->value(rkr->efx_Overdrive->getpar(6));
ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
ovrd_st->value(rkr->efx_Overdrive->getpar(9));
ovrd_pf->value(rkr->efx_Overdrive->getpar(10));}
          xywh {557 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Overdrive 1}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Overdrive 2}
            xywh {42 42 36 21} labelsize 10
          }
        }
        Fl_Value_Slider ovrd_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(29);
 return;
} 
rkr->efx_Overdrive->changepar(0,(int)(o->value()+64));}
          xywh {531 247 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ovrd_LRc {
          label {L/R Cr.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(94);
 return;
} 
rkr->efx_Overdrive->changepar(2,(int)(o->value()+64));}
          xywh {531 260 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ovrd_drive {
          label Drive
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(68);
 return;
} 
rkr->efx_Overdrive->changepar(3,(int)o->value());}
          xywh {531 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ovrd_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(70);
 return;
} 
rkr->efx_Overdrive->changepar(4,(int)o->value());}
          xywh {531 287 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice ovrd_tipo {
          label Type
          callback {rkr->efx_Overdrive->changepar(5,(int)o->value());} open
          xywh {513 303 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_dist_tipo);}
        } {}
        Fl_Check_Button ovrd_neg {
          label {Neg.}
          user_data 2
          callback {rkr->efx_Overdrive->changepar(6,(int)o->value());}
          xywh {589 304 42 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button ovrd_st {
          label Stereo
          user_data 2
          callback {rkr->efx_Overdrive->changepar(9,(int)o->value());}
          xywh {521 322 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider ovrd_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(47);
 return;
} 
rkr->efx_Overdrive->changepar(1,(int)(o->value()+64));}
          xywh {531 337 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button ovrd_pf {
          label {Pre Filter}
          user_data 2
          callback {rkr->efx_Overdrive->changepar(10,(int)o->value());}
          xywh {521 350 68 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider ovrd_lpf {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(85);
 return;
} 
rkr->efx_Overdrive->changepar(7,(int)o->value());}
          xywh {531 369 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ovrd_hpf {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(88);
 return;
} 
rkr->efx_Overdrive->changepar(8,(int)o->value());}
          xywh {531 381 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group ECHO {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button echo_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Echo_Bypass);
 return;
}
rkr->Echo_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Echo->cleanup();
findpos(4,(int)o->value(),o);}
          xywh {644 216 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice echo_preset {
          label Preset
          user_data 12004
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12004))rkr->efx_Echo->setpreset((int) o->value());
echo_WD->value(rkr->efx_Echo->getpar(0)-64);
echo_pan->value(rkr->efx_Echo->getpar(1)-64);
echo_delay->value(rkr->efx_Echo->getpar(2));
echo_LRdl->value(rkr->efx_Echo->getpar(3));
echo_LRc->value(rkr->efx_Echo->getpar(4)-64);
echo_fb->value(rkr->efx_Echo->getpar(5));
echo_damp->value(rkr->efx_Echo->getpar(6));
echo_RV->value(rkr->efx_Echo->getpar(7));
echo_direct->value(rkr->efx_Echo->getpar(8));}
          xywh {716 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Echo 1}
            xywh {57 57 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echo 2}
            xywh {57 57 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echo 3}
            xywh {57 57 36 21} labelsize 10
          }
          MenuItem {} {
            label {Simple Echo}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label Canyon
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Echo 1}
            xywh {97 97 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Echo 2}
            xywh {107 107 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Echo 3}
            xywh {117 117 36 21} labelsize 10
          }
          MenuItem {} {
            label {Feedback Echo}
            xywh {127 127 36 21} labelsize 10
          }
        }
        Fl_Value_Slider echo_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(59);
 return;
} 
rkr->efx_Echo->changepar(0,(int)(o->value()+64));}
          xywh {690 247 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_RV {
          label Reverse
          callback {rkr->efx_Echo->changepar(7,(int)o->value());}
          xywh {690 270 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(46);
 return;
} 
rkr->efx_Echo->changepar(1,(int)(o->value()+64));}
          xywh {690 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_delay {
          label Delay
          callback {rkr->efx_Echo->changepar(2,(int)o->value());}
          xywh {690 300 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 2000 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_LRdl {
          label {LRdl.}
          callback {rkr->efx_Echo->changepar(3,(int)o->value());}
          xywh {690 315 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(97);
 return;
} 
rkr->efx_Echo->changepar(4,(int)(o->value()+64));}
          xywh {690 330 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echo_fb {
          label {Fb.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(78);
 return;
} 
rkr->efx_Echo->changepar(5,(int)o->value());}
          xywh {690 345 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button echo_direct {
          label Direct
          user_data 2
          callback {rkr->efx_Echo->changepar(8,(int)o->value());}
          xywh {690 360 53 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider echo_damp {
          label Damp
          callback {rkr->efx_Echo->changepar(6,(int)o->value());}
          xywh {690 379 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group CHORUS {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button chorus_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Chorus_Bypass);
 return;
}
rkr->Chorus_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Chorus->cleanup();
findpos(5,(int)o->value(),o);}
          xywh {7 417 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice chorus_preset {
          label Preset
          user_data 12005
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12005))rkr->efx_Chorus->setpreset(0,(int) o->value());
chorus_WD->value(rkr->efx_Chorus->getpar(0)-64);
chorus_pan->value(rkr->efx_Chorus->getpar(1)-64);
chorus_freq->value(rkr->efx_Chorus->getpar(2));
chorus_rnd->value(rkr->efx_Chorus->getpar(3));
chorus_lfotype->value(rkr->efx_Chorus->getpar(4));
chorus_stdf->value(rkr->efx_Chorus->getpar(5));
chorus_dpth->value(rkr->efx_Chorus->getpar(6));
chorus_delay->value(rkr->efx_Chorus->getpar(7));
chorus_fb->value(rkr->efx_Chorus->getpar(8));
chorus_LR->value(rkr->efx_Chorus->getpar(9)-64);
chorus_subs->value(rkr->efx_Chorus->getpar(11));
chorus_awesome->value(rkr->efx_Chorus->getpar(12));}
          xywh {79 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Chorus 1}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Chorus 2}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Chorus 3}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Celeste 1}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Celeste 2}
            xywh {72 72 36 21} labelsize 10
          }
        }
        Fl_Value_Slider chorus_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(52);
 return;
} 
rkr->efx_Chorus->changepar(0,(int)(o->value()+64));}
          xywh {51 442 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(50);
 return;
} 
rkr->efx_Chorus->changepar(1,(int)(o->value()+64));}
          xywh {51 454 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(72);
 return;
} 
rkr->efx_Chorus->changepar(2,(int)o->value());}
          xywh {51 466 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(105);
 return;
} 
rkr->efx_Chorus->changepar(3,(int)o->value());}
          xywh {51 478 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice chorus_lfotype {
          label {LFO Type}
          user_data 12
          callback {rkr->efx_Chorus->changepar(4,(int)o->value())} open
          xywh {63 490 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Sine
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label Tri
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Ramp Up}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Ramp Down}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label ZigZag
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {M. Sqare}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {M.Saw}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {L. Fractal}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {L. Fractal XY}
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label {S/H Random}
            xywh {30 30 36 21} labelsize 9
          }
          MenuItem {} {
            label {-Sine +Tri}
            xywh {40 40 36 21} labelsize 9
          }
          MenuItem {} {
            label {-Tri +Sine}
            xywh {50 50 36 21} labelsize 9
          }
        }
        Fl_Check_Button chorus_subs {
          label Subtract
          user_data 2
          callback {rkr->efx_Chorus->changepar(11,(int)o->value())}
          xywh {27 507 62 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button chorus_awesome {
          label Intense
          user_data 2
          callback {rkr->efx_Chorus->changepar(12,(int)o->value())}
          xywh {90 508 56 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider chorus_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(99);
 return;
} 
rkr->efx_Chorus->changepar(5,(int)o->value());}
          xywh {51 528 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(23);
 return;
} 
rkr->efx_Chorus->changepar(6,(int)o->value());}
          xywh {51 541 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_delay {
          label Delay
          callback {rkr->efx_Chorus->changepar(7,(int)o->value());}
          xywh {51 554 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(79);
 return;
} 
rkr->efx_Chorus->changepar(8,(int)o->value());}
          xywh {51 567 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider chorus_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(91);
 return;
} 
rkr->efx_Chorus->changepar(9,(int)(o->value()+64));}
          xywh {51 581 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group PHASER {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button phaser_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Phaser_Bypass);
 return;
}
rkr->Phaser_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Phaser->cleanup();
findpos(6,(int)o->value(),o);}
          xywh {166 417 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice phaser_preset {
          label Preset
          user_data 12006
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12006))rkr->efx_Phaser->setpreset((int) o->value());
phaser_WD->value(rkr->efx_Phaser->getpar(0)-64);
phaser_pan->value(rkr->efx_Phaser->getpar(1)-64);
phaser_freq->value(rkr->efx_Phaser->getpar(2));
phaser_rnd->value(rkr->efx_Phaser->getpar(3));
phaser_lfotype->value(rkr->efx_Phaser->getpar(4));
phaser_stdf->value(rkr->efx_Phaser->getpar(5));
phaser_dpth->value(rkr->efx_Phaser->getpar(6));
phaser_stages->value(rkr->efx_Phaser->getpar(8));
phaser_fb->value(rkr->efx_Phaser->getpar(7));
phaser_stages->value(rkr->efx_Phaser->getpar(8));
phaser_LR->value(rkr->efx_Phaser->getpar(9)-64);
phaser_subs->value(rkr->efx_Phaser->getpar(10));
phaser_phase->value(rkr->efx_Phaser->getpar(11));}
          xywh {238 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Phaser 1}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 2}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 3}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 4}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 5}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 6}
            xywh {92 92 36 21} labelsize 10
          }
        }
        Fl_Value_Slider phaser_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(54);
 return;
} 
rkr->efx_Phaser->changepar(0,(int)(o->value()+64));}
          xywh {210 442 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(60);
 return;
} 
rkr->efx_Phaser->changepar(1,(int)(o->value()+64));}
          xywh {210 454 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 value 64 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(74);
 return;
} 
rkr->efx_Phaser->changepar(2,(int)o->value());}
          xywh {210 466 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(107);
 return;
} 
rkr->efx_Phaser->changepar(3,(int)o->value());}
          xywh {210 478 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice phaser_lfotype {
          label {LFO Type}
          callback {rkr->efx_Phaser->changepar(4,(int)o->value());} open
          xywh {221 490 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Check_Button phaser_subs {
          label Subtract
          user_data 2
          callback {rkr->efx_Phaser->changepar(10,(int)o->value())}
          xywh {201 507 65 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider phaser_phase {
          label Phase
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(114);
 return;
} 
rkr->efx_Phaser->changepar(11,(int)o->value());}
          xywh {210 523 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(101);
 return;
} 
rkr->efx_Phaser->changepar(5,(int)o->value());}
          xywh {210 534 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(21);
 return;
} 
rkr->efx_Phaser->changepar(6,(int)o->value());}
          xywh {210 545 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider phaser_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(81);
 return;
} 
rkr->efx_Phaser->changepar(7,(int)o->value());}
          xywh {210 557 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Counter phaser_stages {
          label Stages
          callback {rkr->efx_Phaser->changepar(8,(int)o->value());}
          xywh {233 569 52 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
        }
        Fl_Value_Slider phaser_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(93);
 return;
} 
rkr->efx_Phaser->changepar(9,(int)(o->value()+64));}
          xywh {210 584 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group FLANGER {
        user_data 1
        xywh {321 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button flanger_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Flanger_Bypass);
 return;
}
rkr->Flanger_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Flanger->cleanup();
findpos(7,(int)o->value(),o);}
          xywh {326 417 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice flanger_preset {
          label Preset
          user_data 12007
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12007))rkr->efx_Flanger->setpreset(1,(int)(o->value()+5));
flanger_WD->value(rkr->efx_Flanger->getpar(0)-64);
flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
flanger_freq->value(rkr->efx_Flanger->getpar(2));
flanger_rnd->value(rkr->efx_Flanger->getpar(3));
flanger_lfotype->value(rkr->efx_Flanger->getpar(4));
flanger_stdf->value(rkr->efx_Flanger->getpar(5));
flanger_dpth->value(rkr->efx_Flanger->getpar(6));
flanger_delay->value(rkr->efx_Flanger->getpar(7));
flanger_fb->value(rkr->efx_Flanger->getpar(8));
flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
flanger_subs->value(rkr->efx_Flanger->getpar(11));
flanger_awesome->value(rkr->efx_Flanger->getpar(12));}
          xywh {398 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Flange 1}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange 2}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange 3}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange 4}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange 5}
            xywh {82 82 36 21} labelsize 10
          }
        }
        Fl_Value_Slider flanger_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(53);
 return;
} 
rkr->efx_Flanger->changepar(0,(int)(o->value()+64));}
          xywh {373 442 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(51);
 return;
} 
rkr->efx_Flanger->changepar(1,(int)(o->value()+64));}
          xywh {373 454 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(73);
 return;
} 
rkr->efx_Flanger->changepar(2,(int)o->value());}
          xywh {373 466 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(106);
 return;
} 
rkr->efx_Flanger->changepar(3,(int)o->value());}
          xywh {373 478 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice flanger_lfotype {
          label {LFO Type}
          callback {rkr->efx_Flanger->changepar(4,(int)o->value());}
          xywh {384 490 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Check_Button flanger_subs {
          label Subtract
          user_data 2
          callback {rkr->efx_Flanger->changepar(11,(int)o->value());}
          xywh {353 507 62 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button flanger_awesome {
          label Intense
          user_data 2
          callback {rkr->efx_Flanger->changepar(12,(int)o->value());}
          xywh {415 507 58 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider flanger_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(100);
 return;
} 
rkr->efx_Flanger->changepar(5,(int)o->value());}
          xywh {373 528 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(22);
 return;
} 
rkr->efx_Flanger->changepar(6,(int)o->value());}
          xywh {373 541 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_delay {
          label Delay
          callback {rkr->efx_Flanger->changepar(7,(int)o->value());}
          xywh {373 554 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(80);
 return;
} 
rkr->efx_Flanger->changepar(8,(int)o->value());}
          xywh {373 567 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider flanger_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(92);
 return;
} 
rkr->efx_Flanger->changepar(9,(int)(o->value()+64));}
          xywh {373 581 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group REVERB {
        user_data 1
        xywh {480 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button reverb_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Reverb_Bypass);
 return;
}
rkr->Reverb_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Rev->cleanup();
findpos(8,(int)o->value(),o);}
          xywh {485 417 34 18} shortcut 0x39 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice reverb_preset {
          label Preset
          user_data 12008
          callback {rkr->Reverb_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12008))rkr->efx_Rev->setpreset((int) o->value());
reverb_WD->value(rkr->efx_Rev->getpar(0)-64);
reverb_pan->value(rkr->efx_Rev->getpar(1)-64);
reverb_time->value(rkr->efx_Rev->getpar(2));
reverb_ldel->value(rkr->efx_Rev->getpar(3));
reverb_ldelft->value(rkr->efx_Rev->getpar(4));
reverb_LPF->value(rkr->efx_Rev->getpar(7));
reverb_HPF->value(rkr->efx_Rev->getpar(8));
reverb_damp->value(rkr->efx_Rev->getpar(9));
reverb_RS->value(rkr->efx_Rev->getpar(11));
reverb_type->value(rkr->efx_Rev->getpar(10));
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;}
          xywh {557 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Cathedral 1}
            xywh {44 44 36 21} labelsize 10
          }
          MenuItem {} {
            label {Cathedral 2}
            xywh {44 44 36 21} labelsize 10
          }
          MenuItem {} {
            label {Cathedral 3}
            xywh {44 44 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hall 1}
            xywh {54 54 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hall 2}
            xywh {64 64 36 21} labelsize 10
          }
          MenuItem {} {
            label {Room 1}
            xywh {74 74 36 21} labelsize 10
          }
          MenuItem {} {
            label {Room 2}
            xywh {84 84 36 21} labelsize 10
          }
          MenuItem {} {
            label Basement
            xywh {94 94 36 21} labelsize 10
          }
          MenuItem {} {
            label Tunnel
            xywh {104 104 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echoed 1}
            xywh {114 114 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echoed 2}
            xywh {124 124 36 21} labelsize 10
          }
          MenuItem {} {
            label {Very Long 1}
            xywh {134 134 36 21} labelsize 10
          }
          MenuItem {} {
            label {Very Long 2}
            xywh {144 144 36 21} labelsize 10
          }
        }
        Fl_Value_Slider reverb_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(57);
 return;
} 
rkr->efx_Rev->changepar(0,(int)(o->value()+64));}
          xywh {531 440 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(63);
 return;
} 
rkr->efx_Rev->changepar(1,(int)(o->value()+64));}
          xywh {531 452 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_time {
          label Time
          callback {rkr->efx_Rev->changepar(2,(int)o->value());}
          xywh {531 465 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_ldel {
          label {I.Del}
          callback {rkr->efx_Rev->changepar(3,(int)o->value());}
          xywh {531 477 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_ldelft {
          label {Del.E/R}
          callback {rkr->efx_Rev->changepar(4,(int)o->value());}
          xywh {531 490 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice reverb_type {
          label Type
          user_data 12
          callback {rkr->efx_Rev->changepar(10,(int)o->value());}
          xywh {542 505 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Freeverb
            xywh {34 34 36 21} labelsize 10
          }
          MenuItem {} {
            label Random
            callback {rkr->efx_Rev->changepar(10,1)}
            xywh {34 34 36 21} labelsize 10
          }
        }
        Fl_Value_Slider reverb_RS {
          label {R.Size}
          callback {rkr->Reverb_Bypass=0;
rkr->efx_Rev->changepar(11,(int)o->value());
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;}
          xywh {531 529 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_LPF {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(87);
 return;
} 
rkr->efx_Rev->changepar(7,(int)o->value());}
          xywh {531 544 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_HPF {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(90);
 return;
} 
rkr->efx_Rev->changepar(8,(int)o->value());}
          xywh {531 560 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Value_Slider reverb_damp {
          label Damp
          callback {rkr->efx_Rev->changepar(9,(int)o->value());}
          xywh {531 576 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 64 maximum 127 step 1 value 64 textcolor 7
          class SliderW
        }
      }
      Fl_Group PEQ {
        user_data 1
        xywh {639 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button eqp_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->EQ2_Bypass);
 return;
}
rkr->EQ2_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_EQ2->cleanup();
findpos(9,(int)o->value(),o);}
          xywh {644 417 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice eqp_preset {
          label Preset
          user_data 12009
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12009)) rkr->EQ2_setpreset((int)o->value());
eqp_LF->value(rkr->efx_EQ2->getpar(11));
eqp_LFg->value(rkr->efx_EQ2->getpar(12)-64);
eqp_LQ->value(rkr->efx_EQ2->getpar(13)-64);
eqp_MF->value(rkr->efx_EQ2->getpar(16));
eqp_MFg->value(rkr->efx_EQ2->getpar(17)-64);
eqp_MQ->value(rkr->efx_EQ2->getpar(18)-64);
eqp_HF->value(rkr->efx_EQ2->getpar(21));
eqp_HFg->value(rkr->efx_EQ2->getpar(22)-64);
eqp_HQ->value(rkr->efx_EQ2->getpar(23)-64);
eqp_Gain->value(rkr->efx_EQ2->getpar(0)-64);}
          xywh {716 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Plain
            xywh {22 22 36 21} labelsize 10
          }
          MenuItem {} {
            label Pop
            xywh {22 22 36 21} labelsize 10
          }
          MenuItem {} {
            label Jazz
            xywh {22 22 36 21} labelsize 10
          }
        }
        Fl_Value_Slider eqp_Gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(148);
 return;
} 
rkr->efx_EQ2->changepar(0,(int)(o->value()+64));}
          xywh {689 439 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_LF {
          label {Low F.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(149);
 return;
} 
rkr->efx_EQ2->changepar(11,(int)o->value());}
          xywh {689 463 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 value 400 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_LFg {
          label {Low G.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(150);
 return;
} 
rkr->efx_EQ2->changepar(12,(int)(o->value()+64));}
          xywh {689 476 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_LQ {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(151);
 return;
} 
rkr->efx_EQ2->changepar(13,(int)(o->value()+64));}
          xywh {689 489 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_MF {
          label {Mid F.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(152);
 return;
} 
rkr->efx_EQ2->changepar(5+11,(int)o->value());}
          xywh {689 511 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 800 maximum 8000 step 1 value 2000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_MFg {
          label {Mid G.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(153);
 return;
} 
rkr->efx_EQ2->changepar(5+12,(int)(o->value()+64));}
          xywh {689 523 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_MQ {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(154);
 return;
} 
rkr->efx_EQ2->changepar(5+13,(int)(o->value()+64));}
          xywh {689 535 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_HF {
          label {High F.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(155);
 return;
} 
rkr->efx_EQ2->changepar(10+11,(int)o->value());}
          xywh {689 557 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 6000 maximum 26000 step 1 value 8000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_HFg {
          label {High G.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(156);
 return;
} 
rkr->efx_EQ2->changepar(10+12,(int)(o->value()+64));}
          xywh {689 569 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider eqp_HQ {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(157);
 return;
} 
rkr->efx_EQ2->changepar(10+13,(int)(o->value()+64));}
          xywh {689 581 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group WHAWHA {
        user_data 1
        xywh {320 210 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button WhaWha_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->WhaWha_Bypass);
 return;
}
rkr->WhaWha_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_WhaWha->cleanup();
findpos(10,(int)o->value(),o);}
          xywh {325 214 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice WhaWha_preset {
          label Preset
          user_data 12010
          callback {rkr->WhaWha_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12010))rkr->efx_WhaWha->setpreset((int) o->value()); 
WhaWha_WD->value(rkr->efx_WhaWha->getpar(0)-64);
WhaWha_pan->value(rkr->efx_WhaWha->getpar(1)-64);
WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
WhaWha_rnd->value(rkr->efx_WhaWha->getpar(3));
WhaWha_lfotype->value(rkr->efx_WhaWha->getpar(4));
WhaWha_stdf->value(rkr->efx_WhaWha->getpar(5));
WhaWha_dpth->value(rkr->efx_WhaWha->getpar(6));
WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(7));
WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(8));
WhaWha_smooth->value(rkr->efx_WhaWha->getpar(9));
if((int)WhaWha_activar->value()) rkr->WhaWha_Bypass=1;}
          xywh {397 214 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label WahWah
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label AutoWah
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label Sweep
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label VocalMorph1
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label VocalMorph2
            xywh {82 82 36 21} labelsize 10
          }
        }
        Fl_Value_Slider WhaWha_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(28);
 return;
} 
rkr->efx_WhaWha->changepar(0,(int)(o->value()+64));}
          xywh {369 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider WhaWha_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(66);
 return;
} 
rkr->efx_WhaWha->changepar(1,(int)(o->value()+64));}
          xywh {369 251 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider WhaWha_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(75);
 return;
} 
rkr->efx_WhaWha->changepar(2,(int)o->value());}
          xywh {369 263 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider WhaWha_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(108);
 return;
} 
rkr->efx_WhaWha->changepar(3,(int)o->value());}
          xywh {369 275 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice WhaWha_lfotype {
          label {LFO Type}
          callback {rkr->efx_WhaWha->changepar(4,(int)o->value())} open
          xywh {381 289 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider WhaWha_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(102);
 return;
} 
rkr->efx_WhaWha->changepar(5,(int)o->value());}
          xywh {369 315 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider WhaWha_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(1);
 return;
} 
rkr->efx_WhaWha->changepar(6,(int)o->value());}
          xywh {369 327 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider WhaWha_ampsns {
          label {Amp.S.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(111);
 return;
} 
rkr->efx_WhaWha->changepar(7,(int)o->value());}
          xywh {369 339 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button WhaWha_ampsnsinv {
          label {Amp.S Inv}
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(112);
 return;
} 
rkr->efx_WhaWha->changepar(8,(int)o->value());}
          xywh {375 357 70 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider WhaWha_smooth {
          label Smooth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(113);
 return;
} 
rkr->efx_WhaWha->changepar(9,(int)o->value());}
          xywh {369 375 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group ALIENWAH {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button Alienwah_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Alienwah_Bypass);
 return;
}
rkr->Alienwah_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Alienwah->cleanup();
findpos(11,(int)o->value(),o);}
          xywh {324 216 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice Alienwah_preset {
          label Preset
          user_data 12011
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12011))rkr->efx_Alienwah->setpreset((int) o->value());
Alienwah_WD->value(rkr->efx_Alienwah->getpar(0)-64);
Alienwah_pan->value(rkr->efx_Alienwah->getpar(1)-64);
Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
Alienwah_rnd->value(rkr->efx_Alienwah->getpar(3));
Alienwah_lfotype->value(rkr->efx_Alienwah->getpar(4));
Alienwah_stdf->value(rkr->efx_Alienwah->getpar(5));
Alienwah_dpth->value(rkr->efx_Alienwah->getpar(6));
Alienwah_fb->value(rkr->efx_Alienwah->getpar(7));
Alienwah_delay->value(rkr->efx_Alienwah->getpar(8));
Alienwah_LR->value(rkr->efx_Alienwah->getpar(9)-64);
Alienwah_phase->value(rkr->efx_Alienwah->getpar(10));}
          xywh {396 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label AlienWah1
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label AlienWah2
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label AlienWah3
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label AlienWah4
            xywh {82 82 36 21} labelsize 10
          }
        }
        Fl_Value_Slider Alienwah_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(55);
 return;
} 
rkr->efx_Alienwah->changepar(0,(int)(o->value()+64));}
          xywh {368 241 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(61);
 return;
} 
rkr->efx_Alienwah->changepar(1,(int)(o->value()+64));}
          xywh {368 253 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(76);
 return;
} 
rkr->efx_Alienwah->changepar(2,(int)o->value());}
          xywh {368 265 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(109);
 return;
} 
rkr->efx_Alienwah->changepar(3,(int)o->value());}
          xywh {368 277 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice Alienwah_lfotype {
          label {LFO Type}
          callback {rkr->efx_Alienwah->changepar(4,(int)o->value())} open
          xywh {380 291 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider Alienwah_phase {
          label Phase
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(115);
 return;
} 
rkr->efx_Alienwah->changepar(10,(int)o->value());}
          xywh {368 317 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(103);
 return;
} 
rkr->efx_Alienwah->changepar(5,(int)o->value());}
          xywh {368 329 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(20);
 return;
} 
rkr->efx_Alienwah->changepar(6,(int)o->value());}
          xywh {368 341 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_delay {
          label Delay
          callback {rkr->Alienwah_Bypass=0;
rkr->efx_Alienwah->changepar(8,(int)o->value());
if (Alienwah_activar->value()) rkr->Alienwah_Bypass=1;}
          xywh {368 353 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(82);
 return;
} 
rkr->efx_Alienwah->changepar(7,(int)o->value());}
          xywh {368 365 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Alienwah_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(96);
 return;
} 
rkr->efx_Alienwah->changepar(9,(int)(o->value()+64));}
          xywh {368 378 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group CABINET {
        user_data 1
        xywh {161 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button Cabinet_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Cabinet_Bypass);
 return;
}
rkr->Cabinet_Bypass=(int)o->value();
findpos(12,(int)o->value(),o);}
          xywh {166 215 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice Cabinet_preset {
          label Preset
          user_data 12012
          callback {rkr->efx_Cabinet->setpreset((int) o->value());}
          xywh {206 256 106 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Marshall-4-12}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Celestion G12M}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Jensen Alnico P12N}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Jensen Alnico P15N}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Delta Demon}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Celestion-EVH12}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Eminence Copperhead}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Mesa Boogie}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Jazz-Chorus}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Vox-Bright}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Marshall-I}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider Cabinet_output {
          label Gain
          callback {rkr->efx_Cabinet->changepar(0,(int)(o->value()+64));}
          xywh {209 303 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group PAN {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button pan_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Pan_Bypass);
 return;
}
rkr->Pan_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Pan->cleanup();
findpos(13,(int)o->value(),o);}
          xywh {325 216 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice pan_preset {
          label Preset
          user_data 12013
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12013))rkr->efx_Pan->setpreset((int) o->value());
pan_WD->value(rkr->efx_Pan->getpar(0)-64);
pan_pan->value(rkr->efx_Pan->getpar(1)-64);
pan_freq->value(rkr->efx_Pan->getpar(2));
pan_rnd->value(rkr->efx_Pan->getpar(3));
pan_lfotype->value(rkr->efx_Pan->getpar(4));
pan_stdf->value(rkr->efx_Pan->getpar(5));
pan_extra->value(rkr->efx_Pan->getpar(6));
pan_autopan->value(rkr->efx_Pan->getpar(7));
pan_extraon->value(rkr->efx_Pan->getpar(8));}
          xywh {397 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label AutoPan
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Extra Stereo}
            xywh {62 62 36 21} labelsize 10
          }
        }
        Fl_Value_Slider pan_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(58);
 return;
} 
rkr->efx_Pan->changepar(0,(int)(o->value()+64));}
          xywh {369 241 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider pan_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(67);
 return;
} 
rkr->efx_Pan->changepar(1,(int)(o->value()+64));}
          xywh {369 256 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button pan_autopan {
          label AutoPan
          user_data 2
          callback {rkr->efx_Pan->changepar(7,(int)o->value())}
          xywh {355 268 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider pan_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(77);
 return;
} 
rkr->efx_Pan->changepar(2,(int)o->value());}
          xywh {369 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider pan_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(110);
 return;
} 
rkr->efx_Pan->changepar(3,(int)o->value());}
          xywh {369 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice pan_lfotype {
          label {LFO Type}
          callback {rkr->efx_Pan->changepar(4,(int)o->value());} open
          xywh {381 315 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider pan_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(104);
 return;
} 
rkr->efx_Pan->changepar(5,(int)o->value());}
          xywh {369 336 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button pan_extraon {
          label {Extra Stereo}
          user_data 2
          callback {rkr->efx_Pan->changepar(8,(int)o->value())}
          xywh {355 352 82 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider pan_extra {
          label {E.S.}
          callback {rkr->efx_Pan->changepar(6,(int)o->value());}
          xywh {369 373 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group HAR {
        user_data 1
        xywh {162 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button har_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Harmonizer_Bypass);
 return;
}
rkr->Harmonizer_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Har->cleanup();
rkr->efx_Har->changepar(3,rkr->efx_Har->getpar(3));
Chord(0);
findpos(14,(int)o->value(),o);}
          xywh {167 417 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice har_preset {
          label Preset
          user_data 12014
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12014))rkr->efx_Har->setpreset((int)o->value());
har_WD->value(rkr->efx_Har->getpar(0)-64);
har_pan->value(rkr->efx_Har->getpar(1)-64);
har_gan->value(rkr->efx_Har->getpar(2)-64);
har_int->value(rkr->efx_Har->getpar(3)-12);
har_SELECT->value(rkr->efx_Har->getpar(5));
har_note->value(rkr->efx_Har->getpar(6));
har_type->value(rkr->efx_Har->getpar(7));
har_freq1->value(rkr->efx_Har->getpar(4));
har_gan1->value(rkr->efx_Har->getpar(8)-64);
har_q1->value(rkr->efx_Har->getpar(9)-64);
har_MIDI->value(rkr->efx_Har->getpar(10));
if ((rkr->efx_Har->PMIDI) || (rkr->efx_Har->PSELECT)) Chord(0);}
          xywh {239 417 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Plain
            xywh {0 0 45 26} labelsize 10
          }
          MenuItem {} {
            label Octavator
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {3m Down}
            xywh {32 32 36 21} labelsize 10
          }
        }
        Fl_Value_Slider har_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(31);
 return;
} 
rkr->efx_Har->changepar(0,(int)(o->value()+64));}
          xywh {212 443 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_int {
          label {Int.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(27);
 return;
} 
rkr->Harmonizer_Bypass=0;
rkr->efx_Har->changepar(3,(int)(o->value()+12));
if((int)har_activar->value())rkr->Harmonizer_Bypass=1;}
          xywh {212 456 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_gan {
          label Gain
          callback {rkr->efx_Har->changepar(2,(int)(o->value()+64));}
          xywh {212 471 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(49);
 return;
} 
rkr->efx_Har->changepar(1,(int)(o->value()+64));}
          xywh {212 484 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_freq1 {
          label Freq
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(26);
 return;
} 
rkr->efx_Har->changepar(4,(int)o->value());}
          xywh {213 501 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 2000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_gan1 {
          label Gain
          callback {rkr->efx_Har->changepar(8,(int)(o->value()+64));}
          xywh {212 513 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_q1 {
          label Q
          callback {rkr->efx_Har->changepar(9,(int)(o->value()+64));}
          xywh {212 525 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button har_MIDI {
          label MIDI
          user_data 2
          callback {rkr->efx_Har->changepar(10,(int)o->value());
rkr->RC->cleanup();
if(!(int)o->value())rkr->efx_Har->changepar(3,rkr->efx_Har->getpar(3));}
          xywh {171 537 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
        }
        Fl_Check_Button har_SELECT {
          label SEL
          user_data 2
          callback {rkr->efx_Har->changepar(5,(int)o->value());
rkr->RC->cleanup();
if(!(int)o->value())rkr->efx_Har->changepar(3,rkr->efx_Har->getpar(3));
Chord(0);}
          xywh {171 555 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
        }
        Fl_Box har_chordname {
          xywh {218 539 98 27} labelsize 12 labelcolor 7
        }
        Fl_Value_Slider har_note {
          label Note
          callback {rkr->efx_Har->changepar(6,(unsigned char)o->value());
Chord(0);}
          xywh {212 571 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 23 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider har_type {
          label Chord
          callback {rkr->efx_Har->changepar(7,(unsigned char)o->value());
Chord(0);}
          xywh {212 583 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 33 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group MUSDELAY {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button musdelay_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->MusDelay_Bypass);
 return;
}
rkr->MusDelay_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_MusDelay->cleanup();
findpos(15,(int)o->value(),o);}
          xywh {485 216 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice musdelay_preset {
          label Preset
          user_data 12015
          callback {rkr->MusDelay_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12015))rkr->efx_MusDelay->setpreset(o->value());
musdelay_WD->value(rkr->efx_MusDelay->getpar(0)-64);
musdelay_tempo->value(rkr->efx_MusDelay->getpar(10));
musdelay_pan1->value(rkr->efx_MusDelay->getpar(1)-64);
musdelay_pan2->value(rkr->efx_MusDelay->getpar(7)-64);
musdelay_delay1->value(rkr->efx_MusDelay->getpar(2)-1);
musdelay_delay2->value(rkr->efx_MusDelay->getpar(8)-1);
musdelay_delay3->value(rkr->efx_MusDelay->getpar(3)-1);
musdelay_fb1->value(rkr->efx_MusDelay->getpar(5));
musdelay_fb2->value(rkr->efx_MusDelay->getpar(9));
musdelay_LRc->value(rkr->efx_MusDelay->getpar(4)-64);
musdelay_gain1->value(rkr->efx_MusDelay->getpar(11)-64);
musdelay_gain2->value(rkr->efx_MusDelay->getpar(12)-64);
musdelay_damp->value(rkr->efx_MusDelay->getpar(6));
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;}
          xywh {557 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Echo 1}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echo 2}
            xywh {62 62 36 21} labelsize 10
          }
        }
        Fl_Value_Slider musdelay_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(56);
 return;
} 
rkr->efx_MusDelay->changepar(0,(int)o->value()+64);}
          xywh {533 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(98);
 return;
} 
rkr->efx_MusDelay->changepar(4,(int)o->value()+64);}
          xywh {533 250 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_pan1 {
          label Pan1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(62);
 return;
} 
rkr->efx_MusDelay->changepar(1,(int)o->value()+64);}
          xywh {533 262 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_pan2 {
          label Pan2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(65);
 return;
} 
rkr->efx_MusDelay->changepar(7,(int)o->value()+64);}
          xywh {533 274 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice musdelay_delay1 {
          user_data 12
          callback {rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(2,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;}
          xywh {490 294 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label 1
            xywh {0 0 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/2}
            xywh {10 10 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/3}
            xywh {20 20 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/4}
            xywh {30 30 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/5}
            xywh {40 40 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/6}
            xywh {50 50 45 26} labelsize 10
          }
        }
        Fl_Choice musdelay_delay3 {
          user_data 12
          callback {rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(3,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;}
          xywh {542 294 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label 1
            xywh {10 10 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/2}
            xywh {20 20 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/3}
            xywh {30 30 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/4}
            xywh {40 40 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/5}
            xywh {50 50 45 26} labelsize 10
          }
          MenuItem {} {
            label {1/6}
            xywh {60 60 45 26} labelsize 10
          }
          MenuItem {} {
            label 0
            xywh {0 0 45 26} labelsize 10
          }
        }
        Fl_Choice musdelay_delay2 {
          callback {rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(8,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;}
          xywh {594 294 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_musdelay_delay1);}
        } {}
        Fl_Value_Slider musdelay_tempo {
          label Tempo
          callback {rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(10,(int)o->value());
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;}
          xywh {533 315 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 10 maximum 480 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_gain1 {
          label Gain1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(24);
 return;
} 
rkr->efx_MusDelay->changepar(11,(int)o->value()+64);}
          xywh {533 334 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_gain2 {
          label Gain2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(25);
 return;
} 
rkr->efx_MusDelay->changepar(12,(int)o->value()+64);}
          xywh {533 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_fb1 {
          label {Fb1.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(83);
 return;
} 
rkr->efx_MusDelay->changepar(5,(int)o->value());}
          xywh {533 358 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_fb2 {
          label {Fb2.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(84);
 return;
} 
rkr->efx_MusDelay->changepar(9,(int)o->value());}
          xywh {533 370 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider musdelay_damp {
          label Damp
          callback {rkr->efx_MusDelay->changepar(6,(int)o->value());}
          xywh {533 382 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group GATE {
        user_data 1
        xywh {162 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button gate_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Gate_Bypass);
 return;
}
rkr->Gate_Bypass=(int)o->value();
findpos(16,(int)o->value(),o);}
          xywh {167 215 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice gate_preset {
          label Preset
          user_data 12016
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12016))rkr->efx_Gate->setpreset((int) o->value());
gate_ATime->value(rkr->efx_Gate->getpar(3));
gate_RTime->value(rkr->efx_Gate->getpar(4));
gate_range->value(rkr->efx_Gate->getpar(2));
gate_threshold->value(rkr->efx_Gate->getpar(1));
gate_hold->value(rkr->efx_Gate->getpar(7));
gate_HPF->value(rkr->efx_Gate->getpar(6));
gate_LPF->value(rkr->efx_Gate->getpar(5));} open
          xywh {239 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label 0dB
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {-10dB}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {-20dB}
            xywh {42 42 36 21} labelsize 10
          }
        }
        Fl_Value_Slider gate_ATime {
          label {A. Time}
          callback {rkr->efx_Gate->changepar(3,(int)o->value());}
          xywh {213 250 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 250 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_RTime {
          label {R. Time}
          callback {rkr->efx_Gate->changepar(4, (int) o->value());}
          xywh {212 272 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 250 step 1 value 120 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_range {
          label Range
          callback {rkr->efx_Gate->changepar(2, (int) o->value());}
          xywh {212 294 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -90 maximum 0 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_threshold {
          label Thrhold
          callback {rkr->efx_Gate->changepar(1, (int)o->value());}
          xywh {212 316 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_hold {
          label Hold
          callback {rkr->efx_Gate->changepar(7,(int)o->value());}
          xywh {212 338 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 500 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_LPF {
          label LPF
          callback {rkr->efx_Gate->changepar(5, (int)o->value());}
          xywh {212 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider gate_HPF {
          label HPF
          callback {rkr->efx_Gate->changepar(6, (int)o->value());}
          xywh {212 373 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group NEWDIST {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button newdist_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->NewDist_Bypass);
 return;
}
rkr->NewDist_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_NewDist->cleanup();
findpos(17,(int)o->value(),o);}
          xywh {485 216 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice newdist_preset {
          label Preset
          user_data 12017
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12017))rkr->efx_NewDist->setpreset((int) o->value());
newdist_WD->value(rkr->efx_NewDist->getpar(0)-64);
newdist_LRc->value(rkr->efx_NewDist->getpar(2)-64);
newdist_drive->value(rkr->efx_NewDist->getpar(3));
newdist_level->value(rkr->efx_NewDist->getpar(4));
newdist_tipo->value(rkr->efx_NewDist->getpar(5));
newdist_neg->value(rkr->efx_NewDist->getpar(6));
newdist_st->value(rkr->efx_NewDist->getpar(9));
newdist_oct->value(rkr->efx_NewDist->getpar(11));
newdist_pan->value(rkr->efx_NewDist->getpar(1)-64);
newdist_pf->value(rkr->efx_NewDist->getpar(10));
newdist_lpf->value(rkr->efx_NewDist->getpar(7));
newdist_hpf->value(rkr->efx_NewDist->getpar(8));}
          xywh {557 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {New Dist 1}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {New Dist 2}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {New Dist 3}
            xywh {52 52 36 21} labelsize 10
          }
        }
        Fl_Value_Slider newdist_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(125);
 return;
} 
rkr->efx_NewDist->changepar(0,(int)(o->value()+64));}
          xywh {532 240 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(127);
 return;
} 
rkr->efx_NewDist->changepar(2,(int)(o->value()+64));}
          xywh {532 254 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_drive {
          label Drive
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(2);
 return;
} 
rkr->efx_NewDist->changepar(3,(int)o->value());}
          xywh {532 268 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(3);
 return;
} 
rkr->efx_NewDist->changepar(4,(int)o->value());}
          xywh {532 282 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice newdist_tipo {
          label Type
          callback {rkr->efx_NewDist->changepar(5,(int)o->value());}
          xywh {514 296 70 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_dist_tipo);}
        } {}
        Fl_Check_Button newdist_neg {
          label {Neg.}
          user_data 2
          callback {rkr->efx_NewDist->changepar(6,(int)o->value());}
          xywh {590 296 42 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider newdist_st {
          label Color
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(6);
 return;
} 
rkr->efx_NewDist->changepar(9,(int)o->value());}
          xywh {532 318 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_oct {
          label {Sub Octv}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(8);
 return;
} 
rkr->efx_NewDist->changepar(11,(int)o->value());}
          xywh {532 332 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(126);
 return;
} 
rkr->efx_NewDist->changepar(1,(int)(o->value()+64));}
          xywh {532 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button newdist_pf {
          label {Pre Filter}
          user_data 2
          callback {rkr->efx_NewDist->changepar(10,(int)o->value());}
          xywh {530 356 66 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider newdist_lpf {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(4);
 return;
} 
rkr->efx_NewDist->changepar(7,(int)o->value());}
          xywh {532 371 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider newdist_hpf {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(5);
 return;
} 
rkr->efx_NewDist->changepar(8,(int)o->value());}
          xywh {532 383 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group APHASER {
        user_data 1
        xywh {480 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button aphaser_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->APhaser_Bypass);
 return;
}
rkr->APhaser_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_APhaser->cleanup();
findpos(18,(int)o->value(),o);}
          xywh {485 215 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice aphaser_preset {
          label Preset
          user_data 12018
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12018))rkr->efx_APhaser->setpreset((int) o->value());
aphaser_WD->value(rkr->efx_APhaser->getpar(0)-64);
aphaser_pan->value(rkr->efx_APhaser->getpar(1));
aphaser_freq->value(rkr->efx_APhaser->getpar(2));
aphaser_lfotype->value(rkr->efx_APhaser->getpar(4));
aphaser_stdf->value(rkr->efx_APhaser->getpar(5));
aphaser_dpth->value(rkr->efx_APhaser->getpar(6));
aphaser_stages->value(rkr->efx_APhaser->getpar(8));
aphaser_fb->value(rkr->efx_APhaser->getpar(7)-64);
aphaser_LR->value(rkr->efx_APhaser->getpar(9));
aphaser_subs->value(rkr->efx_APhaser->getpar(10));
aphaser_phase->value(rkr->efx_APhaser->getpar(11));
aphaser_hyper->value(rkr->efx_APhaser->getpar(12));}
          xywh {557 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Phaser 1}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 2}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 3}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 4}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 5}
            xywh {92 92 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phaser 6}
            xywh {102 102 36 21} labelsize 10
          }
        }
        Fl_Value_Slider aphaser_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(117);
 return;
} 
rkr->efx_APhaser->changepar(0,(int)(o->value()+64));}
          xywh {529 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice aphaser_lfotype {
          label {LFO Type}
          callback {rkr->efx_APhaser->changepar(4,(int)o->value());} open
          xywh {555 252 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider aphaser_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(119);
 return;
} 
rkr->efx_APhaser->changepar(2,(int)o->value());}
          xywh {528 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_dpth {
          label Width
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(121);
 return;
} 
rkr->efx_APhaser->changepar(6,(int)o->value());}
          xywh {528 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_phase {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(120);
 return;
} 
rkr->efx_APhaser->changepar(11,(int)o->value());}
          xywh {529 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(122);
 return;
} 
rkr->efx_APhaser->changepar(7,(int)(o->value()+64));}
          xywh {528 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_LR {
          label Mismatch
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(123);
 return;
} 
rkr->efx_APhaser->changepar(9,(int)o->value());}
          xywh {528 322 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 7 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_pan {
          label Distort
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(118);
 return;
} 
rkr->efx_APhaser->changepar(1,(int)o->value());}
          xywh {528 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider aphaser_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(124);
 return;
} 
rkr->efx_APhaser->changepar(5,(int)o->value());}
          xywh {529 345 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Counter aphaser_stages {
          label Stages
          callback {rkr->efx_APhaser->changepar(8,(int)o->value());}
          xywh {560 362 52 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
        }
        Fl_Check_Button aphaser_subs {
          label Subtract
          user_data 2
          callback {rkr->efx_APhaser->changepar(10,(int)o->value())}
          xywh {490 376 64 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button aphaser_hyper {
          label Hyper
          user_data 2
          callback {rkr->efx_APhaser->changepar(12,(int)o->value())}
          xywh {555 376 53 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group VALVE {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button valve_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Valve_Bypass);
 return;
}
rkr->Valve_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Valve->cleanup();
findpos(19,(int)o->value(),o);}
          xywh {166 216 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice valve_preset {
          label Preset
          user_data 12019
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12019))rkr->efx_Valve->setpreset((int)o->value());
valve_WD->value(rkr->efx_Valve->getpar(0)-64);
valve_LRc->value(rkr->efx_Valve->getpar(2)-64);
valve_drive->value(rkr->efx_Valve->getpar(3));
valve_level->value(rkr->efx_Valve->getpar(4));
valve_neg->value(rkr->efx_Valve->getpar(5));
valve_st->value(rkr->efx_Valve->getpar(8));
valve_pan->value(rkr->efx_Valve->getpar(1)-64);
valve_pf->value(rkr->efx_Valve->getpar(9));
valve_lpf->value(rkr->efx_Valve->getpar(6));
valve_hpf->value(rkr->efx_Valve->getpar(7));
valve_Q->value(rkr->efx_Valve->getpar(10));
valve_ed->value(rkr->efx_Valve->getpar(11));
valve_Pre->value(rkr->efx_Valve->getpar(12));}
          xywh {238 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Valve 1}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Valve 2}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Valve 3}
            xywh {52 52 36 21} labelsize 10
          }
        }
        Fl_Value_Slider valve_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(169);
 return;
} 
rkr->efx_Valve->changepar(0,(int)(o->value()+64));}
          xywh {214 243 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(170);
 return;
} 
rkr->efx_Valve->changepar(2,(int)(o->value()+64));}
          xywh {214 256 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(171);
 return;
} 
rkr->efx_Valve->changepar(1,(int)(o->value()+64));}
          xywh {214 269 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(172);
 return;
} 
rkr->efx_Valve->changepar(4,(int)o->value());}
          xywh {214 283 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_drive {
          label Drive
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(173);
 return;
} 
rkr->efx_Valve->changepar(3,(int)o->value());}
          xywh {214 296 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button valve_ed {
          label {Extra Dist.}
          user_data 2
          callback {rkr->efx_Valve->changepar(11,(int)o->value());}
          xywh {176 308 72 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider valve_Q {
          label {Dist.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(174);
 return;
} 
rkr->efx_Valve->changepar(10,(int)o->value());}
          xywh {214 324 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_Pre {
          label Presence
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(175);
 return;
} 
rkr->efx_Valve->changepar(12,(int)o->value());}
          xywh {214 339 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button valve_pf {
          label {Pre Filter}
          user_data 2
          callback {rkr->efx_Valve->changepar(9,(int)o->value());}
          xywh {166 351 62 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button valve_st {
          label Stereo
          user_data 2
          callback {rkr->efx_Valve->changepar(8,(int)o->value());}
          xywh {226 351 50 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button valve_neg {
          label {Neg.}
          user_data 2
          callback {rkr->efx_Valve->changepar(5,(int)o->value());}
          xywh {275 351 40 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider valve_lpf {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(176);
 return;
} 
rkr->efx_Valve->changepar(6,(int)o->value());}
          xywh {214 368 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider valve_hpf {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(177);
 return;
} 
rkr->efx_Valve->changepar(7,(int)o->value());}
          xywh {214 381 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group DFLANGE {
        user_data 1
        xywh {321 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button dflange_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->DFlange_Bypass);
 return;
}
rkr->DFlange_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_DFlange->cleanup();
findpos(20,(int)o->value(),o);}
          xywh {326 216 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice dflange_preset {
          label Preset
          user_data 12020
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12020))rkr->efx_DFlange->setpreset((int)o->value());
dflange_WD->value(rkr->efx_DFlange->getpar(0));
dflange_pan->value(rkr->efx_DFlange->getpar(1));
dflange_freq->value(rkr->efx_DFlange->getpar(10));
dflange_rnd->value(rkr->efx_DFlange->getpar(13));
dflange_lfotype->value(rkr->efx_DFlange->getpar(12));
dflange_stdf->value(rkr->efx_DFlange->getpar(11));
dflange_width->value(rkr->efx_DFlange->getpar(4));
dflange_depth->value(rkr->efx_DFlange->getpar(3));
dflange_fb->value(rkr->efx_DFlange->getpar(6));
dflange_LR->value(rkr->efx_DFlange->getpar(2));
dflange_subs->value(rkr->efx_DFlange->getpar(8));
dflange_tz->value(rkr->efx_DFlange->getpar(9));
dflange_offset->value(rkr->efx_DFlange->getpar(5));
dflange_lpf->value(rkr->efx_DFlange->getpar(7));
dflange_intense->value(rkr->efx_DFlange->getpar(14));}
          xywh {398 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Dual Flange 1}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange-Wah}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label FbFlange
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label SoftFlange
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label Flanger
            xywh {92 92 36 21} labelsize 10
          }
          MenuItem {} {
            label {Deep Chorus}
            xywh {102 102 36 21} labelsize 10
          }
          MenuItem {} {
            label {Bright Chorus}
            xywh {112 112 36 21} labelsize 10
          }
        }
        Fl_Value_Slider dflange_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(158);
 return;
} 
rkr->efx_DFlange->changepar(0,(int)(o->value()));}
          xywh {373 236 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(159);
 return;
} 
rkr->efx_DFlange->changepar(1,(int)o->value());}
          xywh {373 247 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(160);
 return;
} 
rkr->efx_DFlange->changepar(2,(int)o->value());}
          xywh {373 258 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_depth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(161);
 return;
} 
rkr->efx_DFlange->changepar(3,(int)o->value());}
          xywh {373 269 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 2500 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_width {
          label Width
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(162);
 return;
} 
rkr->efx_DFlange->changepar(4,(int)o->value());}
          xywh {373 281 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 6000 step 5 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_offset {
          label Offset
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(163);
 return;
} 
rkr->efx_DFlange->changepar(5,(int)o->value());}
          xywh {373 292 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(164);
 return;
} 
rkr->efx_DFlange->changepar(6,(int)o->value());}
          xywh {373 303 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_lpf {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(165);
 return;
} 
rkr->efx_DFlange->changepar(7,(int)o->value());}
          xywh {373 314 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Check_Button dflange_subs {
          label Subtr
          user_data 2
          callback {rkr->efx_DFlange->changepar(8,(int)o->value());}
          xywh {326 325 46 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button dflange_tz {
          label {Th. zero}
          user_data 2
          callback {rkr->efx_DFlange->changepar(9,(int)o->value());}
          xywh {369 325 55 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button dflange_intense {
          label Intense
          user_data 2
          callback {rkr->efx_DFlange->changepar(14,(int)o->value());}
          xywh {423 325 52 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider dflange_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(166);
 return;
} 
rkr->efx_DFlange->changepar(10,(int)o->value());}
          xywh {373 340 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Value_Slider dflange_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(167);
 return;
} 
rkr->efx_DFlange->changepar(11,(int)o->value());}
          xywh {373 352 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice dflange_lfotype {
          label {LFO Type}
          callback {rkr->efx_DFlange->changepar(12,(int)o->value());} open
          xywh {384 365 72 15} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider dflange_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(168);
 return;
} 
rkr->efx_DFlange->changepar(13,(int)o->value());}
          xywh {373 382 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group RING {
        user_data 1
        xywh {322 411 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button ring_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Ring_Bypass);
 return;
}
rkr->Ring_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Ring->cleanup();
findpos(21,(int)o->value(),o);}
          xywh {327 415 34 18} shortcut 0x34 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice ring_preset {
          label Preset
          user_data 12021
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12021))rkr->efx_Ring->setpreset((int) o->value());
ring_WD->value(rkr->efx_Ring->getpar(0));
ring_LRc->value(rkr->efx_Ring->getpar(2));
ring_input->value(rkr->efx_Ring->getpar(11));
ring_level->value(rkr->efx_Ring->getpar(3));
ring_st->value(rkr->efx_Ring->getpar(6));
ring_depth->value(rkr->efx_Ring->getpar(4));
ring_freq->value(rkr->efx_Ring->getpar(5));
ring_sin->value(rkr->efx_Ring->getpar(7));
ring_tri->value(rkr->efx_Ring->getpar(8));
ring_saw->value(rkr->efx_Ring->getpar(9));
ring_squ->value(rkr->efx_Ring->getpar(10));
ring_pan->value(rkr->efx_Ring->getpar(1));
ring_afreq->value(rkr->efx_Ring->getpar(12));}
          xywh {399 415 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Saw_Sin
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {E string}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {A string}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label Dissonance
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fast Beat}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Ring Amp}
            xywh {92 92 36 21} labelsize 10
          }
        }
        Fl_Value_Slider ring_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(178);
 return;
} 
rkr->efx_Ring->changepar(0,(int)o->value());}
          xywh {373 440 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_LRc {
          label {L/R Cr.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(179);
 return;
} 
rkr->efx_Ring->changepar(2,(int)o->value());}
          xywh {373 453 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_input {
          label Input
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(180);
 return;
} 
rkr->efx_Ring->changepar(11,(int)o->value());}
          xywh {373 466 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(181);
 return;
} 
rkr->efx_Ring->changepar(3,(int)o->value());}
          xywh {373 479 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(182);
 return;
} 
rkr->efx_Ring->changepar(1,(int)o->value());}
          xywh {373 492 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button ring_st {
          label Stereo
          user_data 2
          callback {rkr->efx_Ring->changepar(6,(int)o->value());}
          xywh {350 503 52 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button ring_afreq {
          label {Auto Freq}
          user_data 2
          callback {rkr->efx_Ring->changepar(12,(int)o->value());}
          xywh {402 503 69 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider ring_depth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(183);
 return;
} 
rkr->efx_Ring->changepar(4,(int)o->value());}
          xywh {373 517 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_freq {
          label Freq
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(184);
 return;
} 
rkr->efx_Ring->changepar(5,(int)o->value());}
          xywh {373 529 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 20000 step 10 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_sin {
          label Sin
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(185);
 return;
} 
rkr->efx_Ring->changepar(7,(int)o->value());}
          xywh {373 541 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_tri {
          label Tri
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(186);
 return;
} 
rkr->efx_Ring->changepar(8,(int)o->value());}
          xywh {373 553 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_saw {
          label Saw
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(187);
 return;
} 
rkr->efx_Ring->changepar(9,(int)o->value());}
          xywh {373 565 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ring_squ {
          label Squ
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(188);
 return;
} 
rkr->efx_Ring->changepar(10,(int)o->value());}
          xywh {373 578 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group EXCITER {
        user_data 1
        xywh {162 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button exciter_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Exciter_Bypass);
 return;
}
rkr->Exciter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Exciter->cleanup();
findpos(22,(int)o->value(),o);}
          xywh {167 216 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice exciter_preset {
          label Preset
          user_data 12022
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12022))rkr->efx_Exciter->setpreset((int) o->value());
ex_Gain->value(rkr->efx_Exciter->getpar(0));
ex_1->value(rkr->efx_Exciter->getpar(1));
ex_2->value(rkr->efx_Exciter->getpar(2));
ex_3->value(rkr->efx_Exciter->getpar(3));
ex_4->value(rkr->efx_Exciter->getpar(4));
ex_5->value(rkr->efx_Exciter->getpar(5));
ex_6->value(rkr->efx_Exciter->getpar(6));
ex_7->value(rkr->efx_Exciter->getpar(7));
ex_8->value(rkr->efx_Exciter->getpar(8));
ex_9->value(rkr->efx_Exciter->getpar(9));
ex_10->value(rkr->efx_Exciter->getpar(10));
ex_lfreq->value(rkr->efx_Exciter->getpar(11));
ex_hfreq->value(rkr->efx_Exciter->getpar(12));}
          xywh {239 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Plain
            xywh {22 22 36 21} labelsize 10
          }
          MenuItem {} {
            label Loudness
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Exciter 1}
            xywh {22 22 36 21} labelsize 10
          }
          MenuItem {} {
            label {Exciter 2}
            xywh {22 22 36 21} labelsize 10
          }
          MenuItem {} {
            label {Exciter 3}
            xywh {32 32 36 21} labelsize 10
          }
        }
        Fl_Value_Slider ex_Gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(189);
 return;
} 
rkr->efx_Exciter->changepar(0,(int)o->value());}
          xywh {211 237 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_lfreq {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(190);
 return;
} 
rkr->efx_Exciter->changepar(11,(int)o->value());}
          xywh {211 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_hfreq {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(191);
 return;
} 
rkr->efx_Exciter->changepar(12,(int)o->value());}
          xywh {211 261 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_1 {
          label {Har 1}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(192);
 return;
} 
rkr->efx_Exciter->changepar(1,(int)o->value());}
          xywh {211 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_2 {
          label {Har 2}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(193);
 return;
} 
rkr->efx_Exciter->changepar(2,(int)o->value());}
          xywh {211 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_3 {
          label {Har 3}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(194);
 return;
} 
rkr->efx_Exciter->changepar(3,(int)o->value());}
          xywh {211 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_4 {
          label {Har 4}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(195);
 return;
} 
rkr->efx_Exciter->changepar(4,(int)o->value());}
          xywh {211 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_5 {
          label {Har 5}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(196);
 return;
} 
rkr->efx_Exciter->changepar(5,(int)o->value());}
          xywh {211 321 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_6 {
          label {Har 6}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(197);
 return;
} 
rkr->efx_Exciter->changepar(6,(int)o->value());}
          xywh {211 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_7 {
          label {Har 7}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(198);
 return;
} 
rkr->efx_Exciter->changepar(7,(int)o->value());}
          xywh {211 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_8 {
          label {Har 8}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(199);
 return;
} 
rkr->efx_Exciter->changepar(8,(int)o->value());}
          xywh {211 358 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_9 {
          label {Har 9}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(200);
 return;
} 
rkr->efx_Exciter->changepar(9,(int)o->value());}
          xywh {211 370 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ex_10 {
          label {Har 10}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(201);
 return;
} 
rkr->efx_Exciter->changepar(10,(int)o->value());}
          xywh {211 381 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group MBDIST {
        user_data 1
        xywh {480 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button mbdist_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->MBDist_Bypass);
 return;
}
rkr->MBDist_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_MBDist->cleanup();
findpos(23,(int)o->value(),o);}
          xywh {485 215 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice mbdist_preset {
          label Preset
          user_data 12023
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12023))rkr->efx_MBDist->setpreset((int)o->value());
mbdist_WD->value(rkr->efx_MBDist->getpar(0)-64);
mbdist_LRc->value(rkr->efx_MBDist->getpar(2)-64);
mbdist_drive->value(rkr->efx_MBDist->getpar(3));
mbdist_level->value(rkr->efx_MBDist->getpar(4));
mbdist_tipoL->value(rkr->efx_MBDist->getpar(5));
mbdist_tipoM->value(rkr->efx_MBDist->getpar(6));
mbdist_tipoH->value(rkr->efx_MBDist->getpar(7));
mbdist_volL->value(rkr->efx_MBDist->getpar(8));
mbdist_volM->value(rkr->efx_MBDist->getpar(9));
mbdist_volH->value(rkr->efx_MBDist->getpar(10));
mbdist_neg->value(rkr->efx_MBDist->getpar(11));
mbdist_st->value(rkr->efx_MBDist->getpar(14));
mbdist_pan->value(rkr->efx_MBDist->getpar(1)-64);
mbdist_cross1->value(rkr->efx_MBDist->getpar(12));
mbdist_cross2->value(rkr->efx_MBDist->getpar(13));}
          xywh {557 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Saturation
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distorsion 1}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label Soft
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label Modulated
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label Crunch
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distortion 2}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distortion 3}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distortion 4}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider mbdist_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(202);
 return;
} 
rkr->efx_MBDist->changepar(0,(int)(o->value()+64));}
          xywh {532 237 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(203);
 return;
} 
rkr->efx_MBDist->changepar(2,(int)(o->value()+64));}
          xywh {532 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_drive {
          label Drive
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(204);
 return;
} 
rkr->efx_MBDist->changepar(3,(int)o->value());}
          xywh {532 261 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(205);
 return;
} 
rkr->efx_MBDist->changepar(4,(int)o->value());}
          xywh {532 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_volL {
          label {L.Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(206);
 return;
} 
rkr->efx_MBDist->changepar(8,(int)o->value());}
          xywh {532 287 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_volM {
          label {M.Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(207);
 return;
} 
rkr->efx_MBDist->changepar(9,(int)o->value());}
          xywh {532 300 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_volH {
          label {H. Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(208);
 return;
} 
rkr->efx_MBDist->changepar(10,(int)o->value());}
          xywh {532 313 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_cross1 {
          label Cross1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(209);
 return;
} 
rkr->efx_MBDist->changepar(12,(int)o->value());}
          xywh {532 326 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbdist_cross2 {
          label Cross2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(210);
 return;
} 
rkr->efx_MBDist->changepar(13,(int)o->value());}
          xywh {532 338 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 800 maximum 12000 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice mbdist_tipoL {
          callback {rkr->efx_MBDist->changepar(5,(int)o->value());} open
          xywh {483 350 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_dist_tipo);}
        } {}
        Fl_Choice mbdist_tipoM {
          callback {rkr->efx_MBDist->changepar(6,(int)o->value());} open
          xywh {534 350 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_dist_tipo);}
        } {}
        Fl_Choice mbdist_tipoH {
          callback {rkr->efx_MBDist->changepar(7,(int)o->value());} open
          xywh {585 350 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_dist_tipo);}
        } {}
        Fl_Value_Slider mbdist_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(211);
 return;
} 
rkr->efx_MBDist->changepar(1,(int)(o->value()+64));}
          xywh {532 369 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button mbdist_st {
          label Stereo
          user_data 2
          callback {rkr->efx_MBDist->changepar(14,(int)o->value());}
          xywh {512 379 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button mbdist_neg {
          label {Neg.}
          user_data 2
          callback {rkr->efx_MBDist->changepar(11,(int)o->value());}
          xywh {581 378 44 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group ARPIE {
        user_data 1
        xywh {161 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button arpie_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Arpie_Bypass);
 return;
}
rkr->Arpie_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Arpie->cleanup();
findpos(24,(int)o->value(),o);}
          xywh {166 215 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice arpie_preset {
          label Preset
          user_data 12024
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12024))rkr->efx_Arpie->setpreset((int) o->value());
arpie_WD->value(rkr->efx_Arpie->getpar(0)-64);
arpie_pan->value(rkr->efx_Arpie->getpar(1)-64);
arpie_delay->value(rkr->efx_Arpie->getpar(2));
arpie_LRdl->value(rkr->efx_Arpie->getpar(3));
arpie_LRc->value(rkr->efx_Arpie->getpar(4)-64);
arpie_fb->value(rkr->efx_Arpie->getpar(5));
arpie_damp->value(rkr->efx_Arpie->getpar(6));
arpie_arpe->value(rkr->efx_Arpie->getpar(7));
arpie_harm->value(rkr->efx_Arpie->getpar(8));
arpie_pattern->value(rkr->efx_Arpie->getpar(9));
arpie_subdiv->value(rkr->efx_Arpie->getpar(10));}
          xywh {238 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Arpie 1}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Arpie 2}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Arpie 3}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Simple Arpie}
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label Canyon
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Arpie 1}
            xywh {107 107 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Arpie 2}
            xywh {117 117 36 21} labelsize 10
          }
          MenuItem {} {
            label {Panning Arpie 3}
            xywh {127 127 36 21} labelsize 10
          }
          MenuItem {} {
            label {Feedback Arpie}
            xywh {137 137 36 21} labelsize 10
          }
        }
        Fl_Value_Slider arpie_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(212);
 return;
} 
rkr->efx_Arpie->changepar(0,(int)(o->value()+64));}
          xywh {212 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_arpe {
          label {Arpe's}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(213);
 return;
} 
rkr->efx_Arpie->changepar(7,(int)o->value());}
          xywh {212 253 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(214);
 return;
} 
rkr->efx_Arpie->changepar(1,(int)(o->value()+64));}
          xywh {212 267 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_delay {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(215);
 return;
} 
rkr->efx_Arpie->changepar(2,(int)o->value());}
          xywh {212 281 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 600 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Choice arpie_subdiv {
          label SubDivision
          user_data 12
          callback {rkr->efx_Arpie->changepar(10,(int)o->value());}
          xywh {239 293 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label 1
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label {1/2}
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label {1/3}
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label {1/4}
            xywh {97 97 36 21} labelsize 10
          }
          MenuItem {} {
            label {1/5}
            xywh {107 107 36 21} labelsize 10
          }
          MenuItem {} {
            label {1/6}
            xywh {127 127 36 21} labelsize 10
          }
        }
        Fl_Value_Slider arpie_LRdl {
          label {LRdl.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(216);
 return;
} 
rkr->efx_Arpie->changepar(3,(int)o->value());}
          xywh {212 314 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_LRc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(217);
 return;
} 
rkr->efx_Arpie->changepar(4,(int)(o->value()+64));}
          xywh {212 329 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_fb {
          label {Fb.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(218);
 return;
} 
rkr->efx_Arpie->changepar(5,(int)o->value());}
          xywh {212 344 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider arpie_damp {
          label Damp
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(219);
 return;
} 
rkr->efx_Arpie->changepar(6,(int)o->value());}
          xywh {212 378 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Counter arpie_harm {
          label H
          callback {rkr->efx_Arpie->changepar(8,(int)o->value());}
          tooltip {Number of steps in the pattern} xywh {181 361 52 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 8 step 1 value 1 textsize 9
        }
        Fl_Choice arpie_pattern {
          user_data 12
          callback {rkr->efx_Arpie->changepar(9,(int)o->value());}
          xywh {238 358 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Ascending
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label Descending
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label UpDown
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label Stutter
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label {Interrupted Descent}
            xywh {97 97 36 21} labelsize 10
          }
          MenuItem {} {
            label {Double Descend }
            xywh {117 117 36 21} labelsize 10
          }
        }
      }
      Fl_Group EXPANDER {
        user_data 1
        xywh {321 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button expander_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Expander_Bypass);
 return;
}
rkr->Expander_Bypass=(int)o->value();
findpos(25,(int)o->value(),o);}
          xywh {326 215 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice expander_preset {
          label Preset
          user_data 12025
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12025))rkr->efx_Expander->setpreset((int) o->value());
expander_ATime->value(rkr->efx_Expander->getpar(3));
expander_RTime->value(rkr->efx_Expander->getpar(4));
expander_shape->value(rkr->efx_Expander->getpar(2));
expander_threshold->value(rkr->efx_Expander->getpar(1));
expander_HPF->value(rkr->efx_Expander->getpar(6));
expander_LPF->value(rkr->efx_Expander->getpar(5));
expander_level->value(rkr->efx_Expander->getpar(7));}
          xywh {398 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Noise Gate}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Boost Gate}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Treble swell}
            xywh {52 52 36 21} labelsize 10
          }
        }
        Fl_Value_Slider expander_ATime {
          label {A. Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(220);
 return;
} 
rkr->efx_Expander->changepar(3,(int)o->value());}
          xywh {372 250 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 5000 step 1 value 10 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_RTime {
          label {R. Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(221);
 return;
} 
rkr->efx_Expander->changepar(4,(int) o->value());}
          xywh {371 272 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 1000 step 1 value 500 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_shape {
          label Shape
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(222);
 return;
} 
rkr->efx_Expander->changepar(2, (int) o->value());}
          xywh {371 294 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 50 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_threshold {
          label Thrhold
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(223);
 return;
} 
rkr->efx_Expander->changepar(1, (int)o->value());}
          xywh {371 316 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -80 maximum 0 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(224);
 return;
} 
rkr->efx_Expander->changepar(7, (int) o->value());}
          xywh {371 336 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_LPF {
          label LPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(225);
 return;
} 
rkr->efx_Expander->changepar(5, (int)o->value());}
          xywh {371 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider expander_HPF {
          label HPF
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(226);
 return;
} 
rkr->efx_Expander->changepar(6, (int)o->value());}
          xywh {371 373 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
          class SliderW
        }
      }
      Fl_Group SHUFFLE {
        label {High Freq}
        user_data 1
        xywh {480 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button shuffle_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Shuffle_Bypass);
 return;
}
rkr->Shuffle_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Shuffle->cleanup();
findpos(26,(int)o->value(),o);}
          xywh {485 215 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice shuffle_preset {
          label Preset
          user_data 12026
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12026))rkr->efx_Shuffle->setpreset((int)o->value());
shuffle_volL->value(rkr->efx_Shuffle->getpar(1));
shuffle_volML->value(rkr->efx_Shuffle->getpar(2));
shuffle_volMH->value(rkr->efx_Shuffle->getpar(2));
shuffle_volH->value(rkr->efx_Shuffle->getpar(4));
shuffle_cross1->value(rkr->efx_Shuffle->getpar(5));
shuffle_cross2->value(rkr->efx_Shuffle->getpar(6));
shuffle_cross3->value(rkr->efx_Shuffle->getpar(7));
shuffle_cross4->value(rkr->efx_Shuffle->getpar(8));
shuffle_Q->value(rkr->efx_Shuffle->getpar(9));
shuffle_WD->value(rkr->efx_Shuffle->getpar(0)-64);
shuffle_E->value(rkr->efx_Shuffle->getpar(10));}
          xywh {557 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Shuffle 1}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Shuffle 2}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Shuffle 3}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label Remover
            xywh {72 72 36 21} labelsize 10
          }
        }
        Fl_Value_Slider shuffle_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(227);
 return;
} 
rkr->efx_Shuffle->changepar(0,(int)o->value()+64);}
          xywh {535 242 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_cross1 {
          label {Low Freq}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(228);
 return;
} 
rkr->efx_Shuffle->changepar(5,(int)o->value());}
          xywh {535 260 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_volL {
          label {Low Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(229);
 return;
} 
rkr->efx_Shuffle->changepar(1,(int)o->value());}
          xywh {535 275 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_cross2 {
          label {M.L. Freq}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(230);
 return;
} 
rkr->efx_Shuffle->changepar(6,(int)o->value());}
          xywh {535 290 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 400 maximum 4000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_volML {
          label {M.L Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(231);
 return;
}
rkr->efx_Shuffle->changepar(2,(int)o->value());}
          xywh {535 305 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_cross3 {
          label {M.H. Freq}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(232);
 return;
}
rkr->efx_Shuffle->changepar(7,(int)o->value());}
          xywh {535 320 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1200 maximum 8000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_volMH {
          label {M.H. Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(233);
 return;
}
rkr->efx_Shuffle->changepar(3,(int)o->value());}
          xywh {535 335 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_cross4 {
          label {High Freq}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(234);
 return;
}
rkr->efx_Shuffle->changepar(8,(int)o->value());}
          xywh {535 350 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 6000 maximum 26000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_volH {
          label {High Gain}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(235);
 return;
}
rkr->efx_Shuffle->changepar(4,(int)o->value());}
          xywh {535 365 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shuffle_Q {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(236);
 return;
}
rkr->efx_Shuffle->changepar(9,(int)o->value());}
          xywh {535 380 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button shuffle_E {
          label Rev
          user_data 2
          callback {rkr->efx_Shuffle->changepar(10,(int)o->value());}
          xywh {482 378 40 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group SYNTHFILTER {
        user_data 1
        xywh {319 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button synthfilter_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Synthfilter_Bypass);
 return;
}
rkr->Synthfilter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Synthfilter->cleanup();
findpos(27,(int)o->value(),o);}
          xywh {324 215 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice synthfilter_preset {
          label Preset
          user_data 12027
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12027))rkr->efx_Synthfilter->setpreset((int) o->value());
synthfilter_WD->value(rkr->efx_Synthfilter->getpar(0)-64);
synthfilter_Distort->value(rkr->efx_Synthfilter->getpar(1));
synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
synthfilter_rand->value(rkr->efx_Synthfilter->getpar(3));
synthfilter_lfotype->value(rkr->efx_Synthfilter->getpar(4));
synthfilter_stdf->value(rkr->efx_Synthfilter->getpar(5));
synthfilter_width->value(rkr->efx_Synthfilter->getpar(6));
synthfilter_Lstages->value(rkr->efx_Synthfilter->getpar(8));
synthfilter_Hstages->value(rkr->efx_Synthfilter->getpar(9));
synthfilter_fb->value(rkr->efx_Synthfilter->getpar(7));
synthfilter_Offset->value(rkr->efx_Synthfilter->getpar(15));
synthfilter_subs->value(rkr->efx_Synthfilter->getpar(10));
synthfilter_dpth->value(rkr->efx_Synthfilter->getpar(11));
synthfilter_EnvSens->value(rkr->efx_Synthfilter->getpar(12));
synthfilter_ATime->value(rkr->efx_Synthfilter->getpar(13));
synthfilter_RTime->value(rkr->efx_Synthfilter->getpar(14));}
          xywh {396 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Low Pass}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {High Pass}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Band Pass}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Lead Synth}
            xywh {92 92 36 21} labelsize 10
          }
          MenuItem {} {
            label Water
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Pan Filter}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Multi
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider synthfilter_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(237);
 return;
}
rkr->efx_Synthfilter->changepar(0,(int)(o->value()+64));}
          xywh {368 236 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_Distort {
          label Distort
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(238);
 return;
}
rkr->efx_Synthfilter->changepar(1,(int)o->value());}
          xywh {368 247 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(239);
 return;
}
rkr->efx_Synthfilter->changepar(2,(int)o->value());}
          xywh {368 259 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_rand {
          label Random
          callback {/*if(Fl::event_button()==3)
{
 getMIDIControl(240);
 return;
}*/
rkr->efx_Synthfilter->changepar(3,(int)o->value());}
          xywh {368 270 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice synthfilter_lfotype {
          label {LFO Type}
          callback {rkr->efx_Synthfilter->changepar(4,(int)o->value());}
          xywh {373 280 52 13} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Check_Button synthfilter_subs {
          label {Subtr.}
          user_data 2
          callback {rkr->efx_Synthfilter->changepar(10,(int)o->value())}
          xywh {428 279 46 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider synthfilter_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(240);
 return;
}
rkr->efx_Synthfilter->changepar(5,(int)o->value());}
          xywh {368 294 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_width {
          label Width
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(241);
 return;
}
rkr->efx_Synthfilter->changepar(6,(int)o->value());}
          xywh {368 305 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(242);
 return;
}
rkr->efx_Synthfilter->changepar(7,(int)o->value());}
          xywh {368 316 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Counter synthfilter_Lstages {
          label {LPF Stg.}
          callback {rkr->efx_Synthfilter->changepar(8,(int)o->value());}
          xywh {367 327 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
        }
        Fl_Counter synthfilter_Hstages {
          label {HPF Stg.}
          callback {rkr->efx_Synthfilter->changepar(9,(int)o->value());}
          xywh {444 327 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
        }
        Fl_Value_Slider synthfilter_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(243);
 return;
}
rkr->efx_Synthfilter->changepar(11,(int)o->value());}
          xywh {368 339 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_EnvSens {
          label {E.Sens}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(244);
 return;
}
rkr->efx_Synthfilter->changepar(12,(int)(o->value()));}
          xywh {368 350 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_ATime {
          label {A.Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(245);
 return;
}
rkr->efx_Synthfilter->changepar(13,(int)o->value());}
          xywh {368 361 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 1000 step 1 value 5 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_RTime {
          label {R.Time}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(246);
 return;
}
rkr->efx_Synthfilter->changepar(14,(int)o->value());}
          xywh {368 372 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 500 step 1 value 5 textcolor 7
          class SliderW
        }
        Fl_Value_Slider synthfilter_Offset {
          label Offset
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(247);
 return;
}
rkr->efx_Synthfilter->changepar(15,(int)o->value());}
          xywh {368 383 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group MBVVOL {
        user_data 1
        xywh {319 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button mbvvol_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->MBVvol_Bypass);
 return;
}
rkr->MBVvol_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_MBVvol->cleanup();
findpos(28,(int)o->value(),o);}
          xywh {326 216 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice mbvvol_preset {
          label Preset
          user_data 12028
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12028))rkr->efx_MBVvol->setpreset((int)o->value());
mbvvol_WD->value(rkr->efx_MBVvol->getpar(0)-64);
mbvvol_freq1->value(rkr->efx_MBVvol->getpar(1));
mbvvol_lfotype1->value(rkr->efx_MBVvol->getpar(2));
mbvvol_stdf1->value(rkr->efx_MBVvol->getpar(3));
mbvvol_freq2->value(rkr->efx_MBVvol->getpar(4));
mbvvol_lfotype2->value(rkr->efx_MBVvol->getpar(5));
mbvvol_stdf2->value(rkr->efx_MBVvol->getpar(6));
mbvvol_cross1->value(rkr->efx_MBVvol->getpar(7));
mbvvol_cross2->value(rkr->efx_MBVvol->getpar(8));
mbvvol_cross3->value(rkr->efx_MBVvol->getpar(9));
//mbvvol_combi->value(rkr->efx_MBVvol->getpar(10));
mbvvol_LB->value(rkr->efx_MBVvol->getpar(11));
mbvvol_MB1->value(rkr->efx_MBVvol->getpar(12));
mbvvol_MB2->value(rkr->efx_MBVvol->getpar(13));
mbvvol_HB->value(rkr->efx_MBVvol->getpar(14));}
          xywh {398 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {VaryVol 1}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {VaryVol 2}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {VaryVol 3}
            xywh {72 72 36 21} labelsize 10
          }
        }
        Fl_Value_Slider mbvvol_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(248);
 return;
}
rkr->efx_MBVvol->changepar(0,(int)(o->value()+64));}
          xywh {373 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbvvol_freq1 {
          label {Tempo 1}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(249);
 return;
}
rkr->efx_MBVvol->changepar(1,(int)o->value());}
          xywh {373 251 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice mbvvol_lfotype1 {
          label {LFO 1 Type}
          callback {rkr->efx_MBVvol->changepar(2,(int)o->value());}
          xywh {384 264 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider mbvvol_stdf1 {
          label {St.df 1}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(250);
 return;
}
rkr->efx_MBVvol->changepar(3,(int)o->value());}
          xywh {373 283 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbvvol_freq2 {
          label {Tempo 2}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(251);
 return;
}
rkr->efx_MBVvol->changepar(4,(int)o->value());}
          xywh {373 295 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice mbvvol_lfotype2 {
          label {LFO 2 Type}
          callback {rkr->efx_MBVvol->changepar(5,(int)o->value());}
          xywh {384 308 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider mbvvol_stdf2 {
          label {St.df 2}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(252);
 return;
}
rkr->efx_MBVvol->changepar(6,(int)o->value());}
          xywh {373 327 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbvvol_cross1 {
          label Cross1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(253);
 return;
}
rkr->efx_MBVvol->changepar(7,(int)o->value());}
          xywh {373 339 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbvvol_cross2 {
          label Cross2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(254);
 return;
}
rkr->efx_MBVvol->changepar(8,(int)o->value());}
          xywh {373 351 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1000 maximum 8000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider mbvvol_cross3 {
          label Cross3
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(255);
 return;
}
rkr->efx_MBVvol->changepar(9,(int)o->value());}
          xywh {373 363 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2000 maximum 26000 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice mbvvol_LB {
          label L
          user_data 12
          callback {rkr->efx_MBVvol->changepar(11,(int)o->value());} open
          tooltip {Low Band Volume} xywh {330 375 27 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label {1 - LFO 1}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {2 - LFO 2}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {C - Constant}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {M - Muted}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Choice mbvvol_MB1 {
          label M
          user_data 12
          callback {rkr->efx_MBVvol->changepar(12,(int)o->value());} open
          tooltip {Mid Band 1 Volume} xywh {369 375 27 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label {1 - LFO 1}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {2 - LFO 2}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {C - Constant}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {M - Muted}
            xywh {10 10 36 21} labelsize 10
          }
        }
        Fl_Choice mbvvol_MB2 {
          label M
          user_data 12
          callback {rkr->efx_MBVvol->changepar(13,(int)o->value());} open
          tooltip {Mid Band 2 Volume} xywh {409 375 27 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label {1 - LFO 1}
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {2 - LFO 2}
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {C - Constant}
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {M - Muted}
            xywh {456 375 36 21} labelsize 10
          }
        }
        Fl_Choice mbvvol_HB {
          label H
          user_data 12
          callback {rkr->efx_MBVvol->changepar(14,(int)o->value());} open
          tooltip {High Band Volume} xywh {447 375 27 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label {1 - LFO 1}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {2 - LFO 2}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {C - Constant}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {M - Muted}
            xywh {30 30 36 21} labelsize 10
          }
        }
      }
      Fl_Group CONVOLOTRON {
        user_data 1
        xywh {322 213 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button convo_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Convol_Bypass);
 return;
}
rkr->Convol_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Convol->cleanup();
findpos(29,(int)o->value(),o);}
          xywh {328 217 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice convo_preset {
          label Preset
          user_data 12029
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12029))rkr->efx_Convol->setpreset((int) o->value());
convo_pan->value(rkr->efx_Convol->getpar(1)-64);
convo_level->value(rkr->efx_Convol->getpar(7));
convo_WD->value(rkr->efx_Convol->getpar(0)-64);
convo_damp->value(rkr->efx_Convol->getpar(6));
convo_fnum->value(rkr->efx_Convol->getpar(8));
convo_length->value(rkr->efx_Convol->getpar(3));
convo_user->value(rkr->efx_Convol->getpar(4));
convo_user->do_callback();
convo_safe->value(rkr->efx_Convol->getpar(2));
convo_fb->value(rkr->efx_Convol->getpar(10));}
          xywh {401 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Marshall JCM200}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fender Superchamp}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Mesa Boogie}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Mesa Boogie 2}
            xywh {77 77 36 21} labelsize 10
          }
        }
        Fl_Value_Slider convo_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(280);
 return;
}
rkr->efx_Convol->changepar(0,(int)(o->value()+64));}
          xywh {374 243 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider convo_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(281);
 return;
}
rkr->efx_Convol->changepar(1,(int)(o->value()+64));}
          xywh {374 259 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider convo_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(282);
 return;
}
rkr->efx_Convol->changepar(7,(int)o->value());}
          xywh {374 275 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider convo_damp {
          label Damp
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(283);
 return;
}
rkr->efx_Convol->changepar(6,(int)o->value());}
          xywh {374 291 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider convo_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(284);
 return;
}
rkr->efx_Convol->changepar(10,(int)o->value());}
          xywh {374 307 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider convo_length {
          label Length
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(285);
 return;
}
rkr->efx_Convol->changepar(3,(int)o->value());}
          xywh {374 323 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 5 maximum 250 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Check_Button convo_user {
          label User
          user_data 2
          callback {rkr->efx_Convol->changepar(4,(int)o->value());

if((int)o->value())B_wav->activate(); else B_wav->deactivate();}
          xywh {432 339 43 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button convo_safe {
          label {Safe Mode}
          user_data 2
          callback {rkr->efx_Convol->changepar(2,(int)o->value())}
          xywh {341 354 73 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Button B_wav {
          label Browse
          user_data 2
          callback {char *filename;
filename=fl_file_chooser("Load Wav File:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
strcpy(rkr->efx_Convol->Filename,filename);
rkr->efx_Convol->setfile(USERFILE);}
          xywh {428 356 46 12} labelsize 10 deactivate
        }
        Fl_Choice convo_fnum {
          label Preset
          user_data 12
          callback {rkr->efx_Convol->changepar(8,(int)o->value());}
          xywh {373 372 101 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Marshall JCM200}
            xywh {44 44 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fender Superchamp}
            xywh {54 54 36 21} labelsize 10
          }
          MenuItem {} {
            label {Mesa Boogie}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Mesa Boogie 2}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Marshall Plexi}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Bassman
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label JCM2000
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label Ampeg
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label Marshall2
            xywh {40 40 36 21} labelsize 10
          }
        }
      }
      Fl_Group LOOPER {
        user_data 1
        xywh {319 213 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button looper_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Looper_Bypass);
 return;
}
rkr->Looper_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Looper->cleanup();
findpos(30,(int)o->value(),o);}
          xywh {324 217 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice looper_preset {
          label Preset
          user_data 12030
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12030))rkr->efx_Looper->setpreset((int) o->value());
looper_WD->value(rkr->efx_Looper->getpar(0)-64);
looper_play->value(rkr->efx_Looper->getpar(1));
looper_record->value(rkr->efx_Looper->getpar(3));
looper_rv->value(rkr->efx_Looper->getpar(5));
looper_ap->value(rkr->efx_Looper->getpar(9));
looper_level1->value(rkr->efx_Looper->getpar(6));
looper_level2->value(rkr->efx_Looper->getpar(10));

looper_t1->value(rkr->efx_Looper->getpar(7));
looper_t2->value(rkr->efx_Looper->getpar(8));
looper_r1->value(rkr->efx_Looper->getpar(11));
looper_r2->value(rkr->efx_Looper->getpar(12));
looper_lnk->value(rkr->efx_Looper->getpar(13));
looper_Tempo->value(rkr->efx_Looper->getpar(14));
looper_bar->value(rkr->efx_Looper->getpar(15));
looper_ms->value(rkr->efx_Looper->getpar(17));}
          xywh {396 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Looper
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label Reverse
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider looper_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(267);
 return;
}
rkr->efx_Looper->changepar(0,(int)(o->value()+64));}
          xywh {370 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider looper_level1 {
          label {Level 1}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(268);
 return;
}
rkr->efx_Looper->changepar(6,(int)o->value());}
          xywh {370 250 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider looper_level2 {
          label {Level 2}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(269);
 return;
}
rkr->efx_Looper->changepar(10,(int)o->value());}
          xywh {370 262 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider looper_Tempo {
          label Tempo
          callback {rkr->efx_Looper->changepar(14,(int)o->value());}
          xywh {370 274 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 380 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Choice looper_bar {
          label {Time Sig.}
          callback {rkr->efx_Looper->changepar(15,(int)o->value());}
          xywh {376 286 40 15} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {2/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {3/4}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {4/4}
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label {5/4}
            xywh {30 30 36 21} labelsize 9
          }
          MenuItem {} {
            label {6/8}
            xywh {40 40 36 21} labelsize 9
          }
          MenuItem {} {
            label {7/8}
            xywh {50 50 36 21} labelsize 9
          }
          MenuItem {} {
            label {9/8}
            xywh {60 60 36 21} labelsize 9
          }
          MenuItem {} {
            label {11/8}
            xywh {70 70 36 21} labelsize 9
          }
        }
        Fl_Choice looper_ms {
          label MS
          callback {rkr->efx_Looper->changepar(17,(int)o->value());}
          xywh {440 286 29 15} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label N
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label H
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label L
            xywh {20 20 36 21} labelsize 9
          }
        }
        Fl_Check_Button looper_rv {
          label Reverse
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(270);
 return;
}
rkr->efx_Looper->changepar(5,(int)o->value())}
          xywh {327 302 61 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button looper_ap {
          label {Auto Play}
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(271);
 return;
}
rkr->efx_Looper->changepar(9,(int)o->value())}
          xywh {397 302 67 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Box Box_Play {
          label {Play/Stop}
          xywh {323 316 52 14} labelsize 10 labelcolor 7
        }
        Fl_Box Box_P {
          label Pause
          xywh {377 316 44 14} labelsize 10 labelcolor 7
        }
        Fl_Box {} {
          label Record
          xywh {428 316 44 14} labelsize 10 labelcolor 7
        }
        Fl_Button looper_play {
          label {@|>}
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(272);
 return;
}
rkr->efx_Looper->changepar(1,(int)o->value());
update_looper();}
          tooltip {Play - Shortcut 'F5'} xywh {327 330 44 22} type Toggle shortcut 0xffc2
        }
        Fl_Button looper_stop {
          label {@||}
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(273);
 return;
}
rkr->efx_Looper->changepar(2,(int)o->value());
update_looper();}
          tooltip {Stop - Shortcut 'F6'} xywh {378 330 44 22} type Toggle shortcut 0xffc3
        }
        Fl_Button looper_record {
          label {@circle}
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(274);
 return;
}
rkr->efx_Looper->changepar(3,(int)o->value());
update_looper();}
          xywh {428 330 44 22} type Toggle labelcolor 1
        }
        Fl_Box {} {
          label Track
          xywh {390 362 39 14} labelsize 10 labelcolor 7
        }
        Fl_Check_Button looper_r1 {
          label R1
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(275);
 return;
}
rkr->efx_Looper->changepar(11,(int)o->value())}
          xywh {327 366 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
        }
        Fl_Check_Button looper_r2 {
          label R2
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(276);
 return;
}
rkr->efx_Looper->changepar(12,(int)o->value())}
          xywh {346 366 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
        }
        Fl_Button looper_t1 {
          label 1
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(277);
 return;
}
rkr->efx_Looper->changepar(7,(int)o->value());
update_looper();}
          xywh {430 360 18 18} type Toggle labelsize 10 align 16
        }
        Fl_Button looper_t2 {
          label 2
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(278);
 return;
}
rkr->efx_Looper->changepar(8,(int)o->value());
update_looper();}
          xywh {453 360 18 18} type Toggle labelsize 10 align 16
        }
        Fl_Check_Button looper_lnk {
          label Lnk
          user_data 2
          callback {rkr->efx_Looper->changepar(13,(int)o->value())}
          xywh {346 380 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
        }
        Fl_Button looper_clear {
          label Clear
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(279);
 return;
}
rkr->efx_Looper->changepar(4,(int)o->value());
update_looper();}
          xywh {365 378 43 14} labelsize 10
        }
        Fl_Check_Button looper_mt {
          label M
          user_data 2
          callback {rkr->efx_Looper->changepar(16,(int)o->value())}
          xywh {412 380 27 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Box L_TimePos {
          xywh {440 379 35 14} box DOWN_BOX align 84
        }
      }
      Fl_Group RYANWAH {
        user_data 1
        xywh {479 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112
      } {
        Fl_Light_Button ryanwah_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->RyanWah_Bypass);
 return;
}
rkr->RyanWah_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_RyanWah->cleanup();
findpos(31,(int)o->value(),o);}
          xywh {485 216 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice ryanwah_preset {
          label Preset
          user_data 12031
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12031))rkr->efx_RyanWah->setpreset((int) o->value());
ryanwah_WD->value(rkr->efx_RyanWah->getpar(0)-64);

int temp=rkr->efx_RyanWah->getpar(17);

if((temp==1) || (temp==3)) ryanwah_qm->value(1); else ryanwah_qm->value(0);
if((temp==2) || (temp==3)) ryanwah_nat->value(1); else ryanwah_nat->value(0);


ryanwah_q->value(rkr->efx_RyanWah->getpar(1));
ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
ryanwah_Rnd->value(rkr->efx_RyanWah->getpar(3));
ryanwah_lfotype->value(rkr->efx_RyanWah->getpar(4));
ryanwah_St->value(rkr->efx_RyanWah->getpar(5)-64);
ryanwah_dpth->value(rkr->efx_RyanWah->getpar(6));
ryanwah_ampsns->value(rkr->efx_RyanWah->getpar(7));
ryanwah_ampsnsinv->value(rkr->efx_RyanWah->getpar(8));
ryanwah_smooth->value(rkr->efx_RyanWah->getpar(9));
ryanwah_lp->value(rkr->efx_RyanWah->getpar(10));
ryanwah_bp->value(rkr->efx_RyanWah->getpar(11));
ryanwah_hp->value(rkr->efx_RyanWah->getpar(12));
svfilter_stages->value(rkr->efx_RyanWah->getpar(13));
ryanwah_rng->value(rkr->efx_RyanWah->getpar(14));
ryanwah_minfreq->value(rkr->efx_RyanWah->getpar(15));
ryanwah_res->value(rkr->efx_RyanWah->getpar(16));
o->value(rkr->efx_RyanWah->getpar(18));
o->redraw();}
          xywh {557 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label WahWah
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label Mutron
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Phase Wah}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label Phaser
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Quack Quack}
            xywh {92 92 36 21} labelsize 10
          }
          MenuItem {} {
            label SmoothTron
            xywh {102 102 36 21} labelsize 10
          }
        }
        Fl_Value_Slider ryanwah_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(256);
 return;
}
rkr->efx_RyanWah->changepar(0,(int)(o->value()+64));}
          xywh {529 236 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button ryanwah_qm {
          label M
          user_data 2
          callback {if((int)o->value()) 
rkr->efx_RyanWah->Pmode +=1;
else
rkr->efx_RyanWah->Pmode -=1;
rkr->efx_RyanWah->changepar(17,rkr->efx_RyanWah->Pmode);}
          tooltip {Analog Gain Mode} xywh {495 245 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
        }
        Fl_Value_Slider ryanwah_lp {
          label LP
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(257);
 return;
}
rkr->efx_RyanWah->changepar(10,(int)o->value());}
          xywh {529 245 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button ryanwah_nat {
          label N
          user_data 2
          callback {if((int)o->value()) 
rkr->efx_RyanWah->Pmode +=2;
else
rkr->efx_RyanWah->Pmode -=2;
rkr->efx_RyanWah->changepar(17,rkr->efx_RyanWah->Pmode);}
          tooltip {Exponential Wah} xywh {495 255 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
        }
        Fl_Value_Slider ryanwah_bp {
          label BP
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(258);
 return;
}
rkr->efx_RyanWah->changepar(11,(int)o->value());}
          xywh {529 254 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button ryanwah_res {
          label R
          user_data 2
          callback {rkr->efx_RyanWah->changepar(16,(int)o->value());}
          tooltip {Modulate Resonance} xywh {495 265 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
        }
        Fl_Value_Slider ryanwah_hp {
          label HP
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(259);
 return;
}
rkr->efx_RyanWah->changepar(12,(int)o->value());}
          xywh {529 263 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_Rnd {
          label Rnd
          callback {/*if(Fl::event_button()==3)
{
 getMIDIControl(259);
 return;
}*/
rkr->efx_RyanWah->changepar(3,(int)o->value());}
          tooltip {LFO Randomness} xywh {529 273 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_St {
          label {St.df}
          callback {/*if(Fl::event_button()==3)
{
 getMIDIControl(259);
 return;
}*/
rkr->efx_RyanWah->changepar(5,(int)o->value()+64);}
          tooltip {LFO L/R Delay} xywh {529 283 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Counter svfilter_stages {
          label Stg
          callback {rkr->efx_RyanWah->changepar(13,(int)o->value());}
          xywh {506 294 27 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
        }
        Fl_Choice ryanwah_lfotype {
          label LFO
          callback {rkr->efx_RyanWah->changepar(4,(int)o->value())}
          xywh {559 293 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider ryanwah_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(260);
 return;
}
rkr->efx_RyanWah->changepar(6,(int)o->value());}
          xywh {529 313 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(261);
 return;
}
rkr->efx_RyanWah->changepar(2,(int)o->value());}
          xywh {529 323 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_q {
          label {Res.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(262);
 return;
}
rkr->efx_RyanWah->changepar(1,(int)(o->value()));}
          xywh {529 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_rng {
          label Range
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(263);
 return;
}
rkr->efx_RyanWah->changepar(14,(int)o->value());}
          xywh {529 345 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 6000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_ampsnsinv {
          label Wah
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(264);
 return;
}
rkr->efx_RyanWah->changepar(8,(int)o->value());}
          xywh {529 355 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_ampsns {
          label {E. Sens}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(265);
 return;
}
rkr->efx_RyanWah->changepar(7,(int)o->value());}
          xywh {529 364 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_smooth {
          label Smooth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(266);
 return;
}
rkr->efx_RyanWah->changepar(9,(int)o->value());}
          xywh {529 373 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider ryanwah_minfreq {
          label {St. Freq}
          callback {/*if(Fl::event_button()==3)
{
 getMIDIControl(266);
 return;
}*/
rkr->efx_RyanWah->changepar(15,(int)o->value());}
          tooltip {Starting Frequency} xywh {529 383 100 8} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 30 maximum 800 step 1 value 450 textcolor 7
          class SliderW
        }
      }
      Fl_Group RBECHO {
        user_data 1
        xywh {475 212 161 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button rbecho_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->RBEcho_Bypass);
 return;
}
rkr->RBEcho_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_RBEcho->cleanup();
findpos(32,(int)o->value(),o);}
          xywh {480 216 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice rbecho_preset {
          label Preset
          user_data 12032
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12032))rkr->efx_RBEcho->setpreset((int) o->value());
rbecho_WD->value(rkr->efx_RBEcho->getpar(0)-64);
rbecho_pan->value(rkr->efx_RBEcho->getpar(1)-64);
rbecho_delay->value(rkr->efx_RBEcho->getpar(2));
rbecho_LRdl->value(rkr->efx_RBEcho->getpar(3));
rbecho_angle->value(rkr->efx_RBEcho->getpar(4)-64);
rbecho_fb->value(rkr->efx_RBEcho->getpar(5));
rbecho_damp->value(rkr->efx_RBEcho->getpar(6));
rbecho_RV->value(rkr->efx_RBEcho->getpar(7));
rbecho_subdiv->value(rkr->efx_RBEcho->getpar(8));
rbecho_es->value(rkr->efx_RBEcho->getpar(9));}
          xywh {552 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Echo 1}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echo 2}
            xywh {67 67 36 21} labelsize 10
          }
          MenuItem {} {
            label {Echo 3}
            xywh {67 67 36 21} labelsize 10
          }
        }
        Fl_Value_Slider rbecho_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(303);
 return;
}
rkr->efx_RBEcho->changepar(0,(int)(o->value()+64));}
          xywh {526 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_RV {
          label Reverse
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(304);
 return;
}
rkr->efx_RBEcho->changepar(7,(int)o->value());}
          xywh {526 253 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(305);
 return;
}
rkr->efx_RBEcho->changepar(1,(int)(o->value()+64));}
          xywh {526 267 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_delay {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(306);
 return;
}
rkr->efx_RBEcho->changepar(2,(int)o->value());}
          xywh {526 281 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 600 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_LRdl {
          label {LRdl.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(307);
 return;
}
rkr->efx_RBEcho->changepar(3,(int)o->value());}
          xywh {526 295 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_fb {
          label {Fb.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(308);
 return;
}
rkr->efx_RBEcho->changepar(5,(int)o->value());}
          xywh {526 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice rbecho_subdiv {
          label SubDivision
          callback {rkr->efx_RBEcho->changepar(8,(int)o->value());} open
          xywh {552 323 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
          code0 {o->menu(menu_arpie_subdiv);}
        } {}
        Fl_Value_Slider rbecho_damp {
          label Damp
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(309);
 return;
}
rkr->efx_RBEcho->changepar(6,(int)o->value());}
          xywh {526 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_es {
          label {E.S.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(310);
 return;
}
rkr->efx_RBEcho->changepar(9,(int)o->value());}
          xywh {526 360 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider rbecho_angle {
          label Angle
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(311);
 return;
}
rkr->efx_RBEcho->changepar(4,(int)(o->value()+64));}
          xywh {526 374 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group COILCRAFTER {
        user_data 1
        xywh {478 214 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button coil_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->CoilCrafter_Bypass);
 return;
}
rkr->CoilCrafter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_CoilCrafter->cleanup();
findpos(33,(int)o->value(),o);}
          xywh {483 218 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice coil_preset {
          label Preset
          user_data 12033
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12033))rkr->efx_CoilCrafter->setpreset((int) o->value());
coil_WD->value(rkr->efx_CoilCrafter->getpar(0));
coil_tone->value(rkr->efx_CoilCrafter->getpar(7));
coil_origin->value(rkr->efx_CoilCrafter->getpar(1));
coil_destiny->value(rkr->efx_CoilCrafter->getpar(2));
coil_freq1->value(rkr->efx_CoilCrafter->getpar(3));
coil_q1->value(rkr->efx_CoilCrafter->getpar(4));
coil_freq2->value(rkr->efx_CoilCrafter->getpar(5));
coil_q2->value(rkr->efx_CoilCrafter->getpar(6));
coil_mode->value(rkr->efx_CoilCrafter->getpar(8));}
          xywh {555 218 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {H to S}
            xywh {32 32 36 21} labelsize 10
          }
          MenuItem {} {
            label {S to H}
            xywh {10 10 36 21} labelsize 10
          }
        }
        Fl_Value_Slider coil_WD {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(286);
 return;
}
rkr->efx_CoilCrafter->changepar(0,(int)o->value());}
          xywh {527 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 value 127 textcolor 7
          class SliderW
        }
        Fl_Value_Slider coil_tone {
          label Tone
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(287);
 return;
}
rkr->efx_CoilCrafter->changepar(7,(int)o->value());}
          xywh {527 255 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 4400 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Choice coil_origin {
          label Origin
          user_data 12
          callback {rkr->efx_CoilCrafter->changepar(1,(int)o->value());
coil_freq1->value(rkr->efx_CoilCrafter->getpar(3));
coil_q1->value(rkr->efx_CoilCrafter->getpar(4));}
          xywh {526 269 90 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Off
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fender Strat (old)}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fender Strat (new)}
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {Squire Strat}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Fender Hambucker}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Gibson P90}
            xywh {52 52 36 21} labelsize 10
          }
          MenuItem {} {
            label {Gibson Standard}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Gibson Mini}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Gibson Super L6S}
            xywh {10 10 36 21} labelsize 10
          }
        }
        Fl_Value_Slider coil_freq1 {
          label Freq1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(288);
 return;
}
rkr->efx_CoilCrafter->changepar(3,(int)o->value());}
          xywh {527 293 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2600 maximum 4500 step 1 value 3200 textcolor 7
          class SliderW
        }
        Fl_Value_Slider coil_q1 {
          label Q1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(289);
 return;
}
rkr->efx_CoilCrafter->changepar(4,(int)o->value());}
          xywh {527 308 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 65 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice coil_destiny {
          label Destiny
          callback {rkr->efx_CoilCrafter->changepar(2,(int)o->value());
coil_freq2->value(rkr->efx_CoilCrafter->getpar(5));
coil_q2->value(rkr->efx_CoilCrafter->getpar(6));} open
          xywh {526 321 90 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
          code0 {o->menu(menu_coil_origin);}
        } {}
        Fl_Value_Slider coil_freq2 {
          label Freq2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(290);
 return;
}
rkr->efx_CoilCrafter->changepar(5,(int)o->value());}
          xywh {527 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2600 maximum 4500 step 1 value 3200 textcolor 7
          class SliderW
        }
        Fl_Value_Slider coil_q2 {
          label Q2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(291);
 return;
}
rkr->efx_CoilCrafter->changepar(6,(int)o->value());}
          xywh {528 361 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 65 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Check_Button coil_mode {
          label {Pos.}
          user_data 2
          callback {rkr->efx_CoilCrafter->changepar(8,(int)o->value());}
          xywh {491 375 41 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group SHELFBOOST {
        user_data 1
        xywh {321 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button shelf_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->ShelfBoost_Bypass);
 return;
}
rkr->ShelfBoost_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_ShelfBoost->cleanup();
findpos(34,(int)o->value(),o);}
          xywh {326 216 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice shelf_preset {
          label Preset
          user_data 12034
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12034))rkr->efx_ShelfBoost->setpreset((int) o->value());
shelf_gain->value(rkr->efx_ShelfBoost->getpar(0));
shelf_q1->value(rkr->efx_ShelfBoost->getpar(1));
shelf_freq1->value(rkr->efx_ShelfBoost->getpar(2));
shelf_mode->value(rkr->efx_ShelfBoost->getpar(3));
shelf_level->value(rkr->efx_ShelfBoost->getpar(4));} open
          xywh {398 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Treble
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label Mid
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label Low
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Distortion 1}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider shelf_gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(292);
 return;
}
rkr->efx_ShelfBoost->changepar(0,(int)o->value());}
          xywh {370 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shelf_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(293);
 return;
}
rkr->efx_ShelfBoost->changepar(4,(int)o->value());}
          xywh {370 298 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 32 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shelf_freq1 {
          label Tone
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(294);
 return;
}
rkr->efx_ShelfBoost->changepar(2,(int)o->value());}
          xywh {370 318 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 220 maximum 16000 step 1 value 1000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shelf_q1 {
          label {Pres.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(295);
 return;
}
rkr->efx_ShelfBoost->changepar(1,(int)o->value());}
          xywh {370 338 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button shelf_mode {
          label Stereo
          user_data 2
          callback {rkr->efx_ShelfBoost->changepar(3,(int)o->value());}
          xywh {334 373 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group VOCODER {
        user_data 1
        xywh {161 213 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button vo_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Vocoder_Bypass);
 return;
}
rkr->Vocoder_Bypass=(int)o->value();
if((int) o->value()==0)
vu_vu->value(-48);
findpos(35,(int)o->value(),o);}
          xywh {167 217 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice vo_preset {
          label Preset
          user_data 12035
          callback {long long ud= (long long) v;
        if((ud==0)||(ud==12035))rkr->efx_Vocoder->setpreset((int) o->value());
        vo_WD->value(rkr->efx_Vocoder->getpar(0)-64);
        vo_pan->value(rkr->efx_Vocoder->getpar(1)-64);
        vo_mu->value(rkr->efx_Vocoder->getpar(2));
        vo_q->value(rkr->efx_Vocoder->getpar(3));
        vo_input->value(rkr->efx_Vocoder->getpar(4));
        vo_ring->value(rkr->efx_Vocoder->getpar(6));
        vo_level->value(rkr->efx_Vocoder->getpar(5));}
          xywh {240 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Vocoder 1}
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label {Vocoder 2}
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label {Vocoder 3}
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label {Vocoder 4}
            xywh {87 87 36 21} labelsize 10
          }
        }
        Fl_Value_Slider vo_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(296);
         return;
        }
        rkr->efx_Vocoder->changepar(0,(int)(o->value()+64));}
          xywh {213 243 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_pan {
          label Pan
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(297);
         return;
        }
        rkr->efx_Vocoder->changepar(1,(int)(o->value()+64));}
          xywh {213 263 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_input {
          label Input
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(298);
         return;
        }
        rkr->efx_Vocoder->changepar(4,(int)o->value());}
          xywh {213 283 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_mu {
          label {Muf.}
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(299);
         return;
        }
        rkr->efx_Vocoder->changepar(2,(int)o->value());}
          xywh {213 303 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_q {
          label Q
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(300);
         return;
        }
        rkr->efx_Vocoder->changepar(3,(int)o->value());}
          xywh {213 323 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 40 maximum 170 step 1 value 120 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_ring {
          label Ring
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(301);
         return;
        }
        rkr->efx_Vocoder->changepar(6,(int)o->value());}
          xywh {213 343 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vo_level {
          label Level
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(302);
         return;
        }
        rkr->efx_Vocoder->changepar(5,(int)o->value());}
          xywh {213 363 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Slider vu_vu {
          xywh {168 268 11 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
      }
      Fl_Group SUSTAINER {
        user_data 1
        xywh {161 213 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button sus_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
        {
         getMIDIControl(116);
         o->value(rkr->Sustainer_Bypass);
         return;
        }
        rkr->Sustainer_Bypass=(int)o->value();
        if((int) o->value()==0)
        rkr->efx_Sustainer->cleanup();
        findpos(36,(int)o->value(),o);}
          xywh {166 217 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice sus_preset {
          label Preset
          user_data 12036
          callback {long long ud= (long long) v;
        if((ud==0)||(ud==12036))rkr->efx_Sustainer->setpreset((int) o->value());
sus_gain->value(rkr->efx_Sustainer->getpar(0));
sus_sus->value(rkr->efx_Sustainer->getpar(1));}
          xywh {238 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Sustain 1}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Sustain 2}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Sustain 3}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider sus_gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(312);
 return;
}
rkr->efx_Sustainer->changepar(0,(int)o->value());}
          xywh {210 275 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider sus_sus {
          label Sustain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(313);
 return;
}
rkr->efx_Sustainer->changepar(1,(int)o->value());}
          xywh {210 299 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 32 textcolor 7
          class SliderW
        }
      }
      Fl_Group SEQUENCE {
        user_data 1
        xywh {319 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button seq_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Sequence_Bypass);
 return;
}
rkr->Sequence_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Sequence->cleanup();
findpos(37,(int)o->value(),o);}
          xywh {324 216 34 16} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice seq_preset {
          label Preset
          user_data 12037
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12037))rkr->efx_Sequence->setpreset((int) o->value());
seq_WD->value(rkr->efx_Sequence->getpar(8)-64);
seq_q->value(rkr->efx_Sequence->getpar(10)-64);
seq_amp->value(rkr->efx_Sequence->getpar(11));
seq_tempo->value(rkr->efx_Sequence->getpar(9));
seq_stdf->value(rkr->efx_Sequence->getpar(12));
seq_1->value(rkr->efx_Sequence->getpar(0));
seq_2->value(rkr->efx_Sequence->getpar(1));
seq_3->value(rkr->efx_Sequence->getpar(2));
seq_4->value(rkr->efx_Sequence->getpar(3));
seq_5->value(rkr->efx_Sequence->getpar(4));
seq_6->value(rkr->efx_Sequence->getpar(5));
seq_7->value(rkr->efx_Sequence->getpar(6));
seq_8->value(rkr->efx_Sequence->getpar(7));
seq_mode->value(rkr->efx_Sequence->getpar(13));
seq_range->value(rkr->efx_Sequence->getpar(14));}
          xywh {396 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Jumpy
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Stair Step}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label Mild
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Wah Wah}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Filter Pan}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Stepper
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Shifter
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Zeke Trem}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label Boogie
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Chorus
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider seq_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(314);
 return;
}
rkr->efx_Sequence->changepar(8,(int)(o->value()+64));}
          xywh {368 237 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_1 {
          label 1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(315);
 return;
}
rkr->efx_Sequence->changepar(0,(int)o->value());}
          xywh {368 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_2 {
          label 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(316);
 return;
}
rkr->efx_Sequence->changepar(1,(int)o->value());}
          xywh {368 261 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_3 {
          label 3
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(317);
 return;
}
rkr->efx_Sequence->changepar(2,(int)o->value());}
          xywh {368 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_4 {
          label 4
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(318);
 return;
}
rkr->efx_Sequence->changepar(3,(int)o->value());}
          xywh {368 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_5 {
          label 5
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(319);
 return;
}
rkr->efx_Sequence->changepar(4,(int)o->value());}
          xywh {369 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_6 {
          label 6
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(320);
 return;
}
rkr->efx_Sequence->changepar(5,(int)o->value());}
          xywh {369 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_7 {
          label 7
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(321);
 return;
}
rkr->efx_Sequence->changepar(6,(int)o->value());}
          xywh {369 321 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_8 {
          label 8
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(322);
 return;
}
rkr->efx_Sequence->changepar(7,(int)o->value());}
          xywh {369 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_tempo {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(323);
 return;
}
rkr->efx_Sequence->changepar(9,(int)o->value());}
          xywh {368 345 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_q {
          label Q
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(324);
 return;
}
rkr->efx_Sequence->changepar(10,(int)o->value()+64);}
          xywh {368 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider seq_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(325);
 return;
}
rkr->efx_Sequence->changepar(12,(int)o->value());}
          xywh {368 369 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 7 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button seq_amp {
          label {Amp.}
          user_data 2
          callback {rkr->efx_Sequence->changepar(11,(int)o->value())}
          xywh {432 381 43 14} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Choice seq_mode {
          label Mode
          user_data 12
          callback {rkr->efx_Sequence->changepar(13,(int)o->value())}
          xywh {352 381 78 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label Lineal
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label UpDown
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Stepper
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Shifter
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Tremor
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label Arpegiator
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Chorus
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label TrigStepper
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Seq Delay}
            xywh {20 20 36 21} labelsize 9
          }
        }
        Fl_Counter seq_range {
          label Range
          callback {rkr->efx_Sequence->changepar(14,(int)o->value())}
          xywh {324 285 33 13} type Simple labelsize 10 labelcolor 7 minimum 1 maximum 8 step 1 value 1 textsize 9
        }
      }
      Fl_Group SHIFTER {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button shifter_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Shifter_Bypass);
 return;
}
rkr->Shifter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Shifter->cleanup();
findpos(38,(int)o->value(),o);}
          xywh {325 216 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice shifter_preset {
          label Preset
          user_data 12038
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12038))rkr->efx_Shifter->setpreset((int)o->value());
shifter_WD->value(rkr->efx_Shifter->getpar(0)-64);
shifter_pan->value(rkr->efx_Shifter->getpar(1)-64);
shifter_gain->value(rkr->efx_Shifter->getpar(2)-64);
shifter_int->value(rkr->efx_Shifter->getpar(6));
shifter_attack->value(rkr->efx_Shifter->getpar(3));
shifter_decay->value(rkr->efx_Shifter->getpar(4));
shifter_thre->value(rkr->efx_Shifter->getpar(5));
shifter_ud->value(rkr->efx_Shifter->getpar(7));
shifter_whammy->value(rkr->efx_Shifter->getpar(9));

shifter_mode->value(rkr->efx_Shifter->getpar(8));}
          xywh {397 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Fast
            xywh {10 10 45 26} labelsize 10
          }
          MenuItem {} {
            label {Slow Up}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Slow Down}
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label Chorus
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Trig. Chorus}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider shifter_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(326);
 return;
}
rkr->efx_Shifter->changepar(0,(int)(o->value()+64));}
          xywh {370 242 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_int {
          label {Int.}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(327);
 return;
}
rkr->Shifter_Bypass=0;
rkr->efx_Shifter->changepar(6,(int)o->value());
if((int)shifter_activar->value())rkr->Shifter_Bypass=1;}
          xywh {370 255 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 12 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(328);
 return;
}
rkr->efx_Shifter->changepar(2,(int)(o->value()+64));}
          xywh {370 270 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(329);
 return;
}
rkr->efx_Shifter->changepar(1,(int)(o->value()+64));}
          xywh {370 283 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_attack {
          label Attack
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(330);
 return;
}
rkr->efx_Shifter->changepar(3,(int)o->value());}
          xywh {371 300 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 2000 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_decay {
          label Decay
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(331);
 return;
}
rkr->efx_Shifter->changepar(4,(int)o->value());}
          xywh {370 313 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 2000 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shifter_thre {
          label Thrshold
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(332);
 return;
}
rkr->efx_Shifter->changepar(5,(int)o->value());}
          xywh {370 326 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Check_Button shifter_ud {
          label Down
          user_data 2
          callback {rkr->efx_Shifter->changepar(7,(int)o->value())}
          xywh {371 340 49 14} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Value_Slider shifter_whammy {
          label Whamy
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(333);
 return;
}
rkr->efx_Shifter->changepar(9,(int)o->value());}
          xywh {370 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice shifter_mode {
          label Mode
          user_data 12
          callback {rkr->efx_Shifter->changepar(8,(int)o->value())} open
          xywh {363 377 78 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label Trigger
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label Whammy
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label Portamento
            xywh {10 10 36 21} labelsize 9
          }
        }
      }
      Fl_Group STOMPBOX {
        user_data 1
        xywh {481 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button stomp_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->StompBox_Bypass);
 return;
}
rkr->StompBox_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_StompBox->cleanup();
findpos(39,(int)o->value(),o);}
          xywh {486 216 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice stomp_preset {
          label Preset
          user_data 12039
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12039))rkr->efx_StompBox->setpreset((int)o->value());
stomp_WD->value(rkr->efx_StompBox->getpar(0));
stomp_gain->value(rkr->efx_StompBox->getpar(4));
stomp_low->value(rkr->efx_StompBox->getpar(3));
stomp_mid->value(rkr->efx_StompBox->getpar(2));
stomp_high->value(rkr->efx_StompBox->getpar(1));

stomp_mode->value(rkr->efx_StompBox->getpar(5));}
          xywh {558 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Odie
            xywh {20 20 45 26} labelsize 10
          }
          MenuItem {} {
            label Grunger
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hard Dist.}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Ratula
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Classic Dist}
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {Morbid Impalement}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {Sharp Metal}
            xywh {40 40 36 21} labelsize 10
          }
          MenuItem {} {
            label {Classic Fuzz}
            xywh {50 50 36 21} labelsize 10
          }
        }
        Fl_Value_Slider stomp_WD {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(334);
 return;
}
rkr->efx_StompBox->changepar(0,(int)o->value());}
          xywh {531 242 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider stomp_gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(335);
 return;
}
rkr->efx_StompBox->changepar(4,(int)o->value());}
          xywh {531 270 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider stomp_low {
          label Low
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(336);
 return;
}
rkr->efx_StompBox->changepar(3,(int)o->value());}
          xywh {531 287 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider stomp_mid {
          label Mid
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(337);
 return;
}
rkr->efx_StompBox->changepar(2,(int)o->value());}
          xywh {531 304 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 36 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider stomp_high {
          label High
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(338);
 return;
}
rkr->efx_StompBox->changepar(1,(int)o->value());}
          xywh {531 321 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice stomp_mode {
          label Mode
          user_data 12
          callback {rkr->efx_StompBox->changepar(5,(int)o->value())}
          xywh {524 377 78 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
        } {
          MenuItem {} {
            label Amp
            xywh {20 20 36 21} labelsize 9
          }
          MenuItem {} {
            label Grunge
            xywh {30 30 36 21} labelsize 9
          }
          MenuItem {} {
            label Rat
            xywh {40 40 36 21} labelsize 9
          }
          MenuItem {} {
            label {Fat Cat}
            xywh {50 50 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dist+}
            xywh {60 60 36 21} labelsize 9
          }
          MenuItem {} {
            label Death
            xywh {70 70 36 21} labelsize 9
          }
          MenuItem {} {
            label {Mid Elves Own}
            xywh {80 80 36 21} labelsize 9
          }
          MenuItem {} {
            label Fuzz
            xywh {90 90 36 21} labelsize 9
          }
        }
      }
      Fl_Group REVERBTRON {
        user_data 1
        xywh {158 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button revtron_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Reverbtron_Bypass);
 return;
}
rkr->Reverbtron_Bypass=(int)o->value();
if((int) o->value()==0) rkr->efx_Reverbtron->cleanup();
findpos(40,(int)o->value(),o);}
          xywh {164 216 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice revtron_preset {
          label Preset
          user_data 12040
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12040))rkr->efx_Reverbtron->setpreset((int) o->value());
revtron_pan->value(rkr->efx_Reverbtron->getpar(11)-64);
revtron_level->value(rkr->efx_Reverbtron->getpar(7));
revtron_WD->value(rkr->efx_Reverbtron->getpar(0)-64);
revtron_damp->value(rkr->efx_Reverbtron->getpar(6));
revtron_fnum->value(rkr->efx_Reverbtron->getpar(8));
revtron_length->value(rkr->efx_Reverbtron->getpar(3));
revtron_strech->value(rkr->efx_Reverbtron->getpar(9));
revtron_safe->value(rkr->efx_Reverbtron->getpar(2));
revtron_user->value(rkr->efx_Reverbtron->getpar(4));
revtron_user->do_callback();
revtron_fb->value(rkr->efx_Reverbtron->getpar(10));
revtron_fade->value(rkr->efx_Reverbtron->getpar(1));
revtron_idelay->value(rkr->efx_Reverbtron->getpar(5));
revtron_LPF->value(rkr->efx_Reverbtron->getpar(14));
revtron_HPF->value(rkr->efx_Reverbtron->getpar(15));

revtron_es->value(rkr->efx_Reverbtron->getpar(12));
revtron_rv->value(rkr->efx_Reverbtron->getpar(13));}
          xywh {237 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Chamber
            xywh {77 77 36 21} labelsize 10
          }
          MenuItem {} {
            label {Concrete Stairwell}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Hall
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Med Hall}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Room
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Hall
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Guitar
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Studio
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Cathedral
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Value_Slider revtron_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(339);
 return;
}
rkr->efx_Reverbtron->changepar(0,(int)(o->value()+64));}
          xywh {210 237 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(340);
 return;
}
rkr->efx_Reverbtron->changepar(11,(int)(o->value()+64));}
          xywh {210 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_level {
          label Level
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(341);
 return;
}
rkr->efx_Reverbtron->changepar(7,(int)o->value());}
          xywh {210 261 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_damp {
          label Damp
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(342);
 return;
}
rkr->efx_Reverbtron->changepar(6,(int)o->value());}
          xywh {210 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(343);
 return;
}
rkr->efx_Reverbtron->changepar(10,(int)o->value());}
          xywh {210 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_length {
          label Length
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(344);
 return;
}
rkr->efx_Reverbtron->changepar(3,(int)o->value());}
          xywh {210 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 1500 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_strech {
          label Stretch
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(345);
 return;
}
rkr->efx_Reverbtron->changepar(9,(int)o->value());}
          xywh {210 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_idelay {
          label {I.Del}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(346);
 return;
}
rkr->efx_Reverbtron->changepar(5,(int)o->value());}
          xywh {210 321 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 500 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_fade {
          label Fade
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(347);
 return;
}
rkr->efx_Reverbtron->changepar(1,(int)o->value());}
          xywh {210 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_HPF {
          label Diffusion
          callback {rkr->efx_Reverbtron->changepar(15,(int)o->value());}
          xywh {211 345 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 value 26000 textcolor 7
          class SliderW
        }
        Fl_Value_Slider revtron_LPF {
          label LPF
          callback {rkr->efx_Reverbtron->changepar(14,(int)o->value());}
          xywh {210 357 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 26000 step 1 value 20 textcolor 7
          class SliderW
        }
        Fl_Check_Button revtron_rv {
          label Sh
          user_data 2
          callback {rkr->efx_Reverbtron->changepar(13,(int)o->value());}
          xywh {160 363 30 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button revtron_es {
          label ES
          user_data 2
          callback {rkr->efx_Reverbtron->changepar(12,(int)o->value());}
          xywh {160 376 29 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button revtron_safe {
          label Safe
          user_data 2
          callback {rkr->efx_Reverbtron->changepar(2,(int)o->value());}
          xywh {188 366 41 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button revtron_user {
          label User
          user_data 2
          callback {rkr->efx_Reverbtron->changepar(4,(int)o->value());

if((int)o->value())B_rvb->activate(); else B_rvb->deactivate();}
          xywh {225 366 39 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Button B_rvb {
          label Browse
          user_data 2
          callback {char *filename;
filename=fl_file_chooser("Load rvb File:","(*.rvb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rvb");
strcpy(rkr->efx_Reverbtron->Filename,filename);
rkr->efx_Reverbtron->setfile(USERFILE);}
          xywh {264 368 46 10} labelsize 10 deactivate
        }
        Fl_Choice revtron_fnum {
          label File
          user_data 12
          callback {rkr->efx_Reverbtron->changepar(8,(int)o->value());}
          xywh {209 380 101 14} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Chamber
            xywh {54 54 36 21} labelsize 10
          }
          MenuItem {} {
            label {Conc. Stair}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Hall
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Med Hall}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Large Room}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Large Hall}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Guitar Ambience}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Studio
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Twilight
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Santa Lucia}
            xywh {0 0 36 21} labelsize 10
          }
        }
      }
      Fl_Group ECHOTRON {
        user_data 1
        xywh {323 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button echotron_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Echotron_Bypass);
 return;
}
rkr->Echotron_Bypass=(int)o->value();
if((int) o->value()==0) rkr->efx_Echotron->cleanup();
findpos(41,(int)o->value(),o);}
          xywh {329 216 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice echotron_preset {
          label Preset
          user_data 12041
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12041))rkr->efx_Echotron->setpreset((int) o->value());
echotron_pan->value(rkr->efx_Echotron->getpar(11)-64);
echotron_WD->value(rkr->efx_Echotron->getpar(0)-64);
echotron_damp->value(rkr->efx_Echotron->getpar(6));
echotron_fnum->value(rkr->efx_Echotron->getpar(8));
echotron_user->value(rkr->efx_Echotron->getpar(4));
echotron_user->do_callback();
echotron_fb->value(rkr->efx_Echotron->getpar(10));
echotron_tempo->value(rkr->efx_Echotron->getpar(5));
echotron_lfotype->value(rkr->efx_Echotron->getpar(14));
echotron_width->value(rkr->efx_Echotron->getpar(2));
echotron_deep->value(rkr->efx_Echotron->getpar(1)-64);
echotron_lrcross->value(rkr->efx_Echotron->getpar(7)-64);
echotron_stdf->value(rkr->efx_Echotron->getpar(9));
echotron_af->value(rkr->efx_Echotron->getpar(15));
echotron_mf->value(rkr->efx_Echotron->getpar(13));
echotron_md->value(rkr->efx_Echotron->getpar(12));
echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);}
          xywh {402 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Summer
            xywh {87 87 36 21} labelsize 10
          }
          MenuItem {} {
            label Ambience
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Arranjer
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Suction
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label SuctionFlange
            xywh {20 20 36 21} labelsize 10
          }
        }
        Fl_Value_Slider echotron_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(348);
 return;
}
rkr->efx_Echotron->changepar(0,(int)(o->value()+64));}
          xywh {375 237 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(349);
 return;
}
rkr->efx_Echotron->changepar(11,(int)(o->value()+64));}
          xywh {375 249 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_tempo {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(350);
 return;
}
rkr->efx_Echotron->changepar(5,(int)o->value());}
          xywh {375 261 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 600 step 1 value 60 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_damp {
          label Damp
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(351);
 return;
}
rkr->efx_Echotron->changepar(6,(int)o->value());}
          xywh {375 273 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(352);
 return;
}
rkr->efx_Echotron->changepar(10,(int)o->value());}
          xywh {375 285 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_lrcross {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(353);
 return;
}
rkr->efx_Echotron->changepar(7,(int)(o->value()+64));}
          xywh {375 297 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_width {
          label Width
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(354);
 return;
}
rkr->efx_Echotron->changepar(2,(int)o->value());}
          xywh {375 309 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_deep {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(355);
 return;
}
rkr->efx_Echotron->changepar(1,((int)o->value()+64));}
          xywh {375 321 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider echotron_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(356);
 return;
}
rkr->efx_Echotron->changepar(9,(int)o->value());}
          xywh {375 333 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button echotron_af {
          label AF
          user_data 2
          callback {rkr->efx_Echotron->changepar(15,(int)o->value());}
          xywh {325 348 32 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Choice echotron_lfotype {
          label {LFO Type}
          callback {rkr->efx_Echotron->changepar(14,(int)o->value());} open
          xywh {411 347 64 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Check_Button echotron_mf {
          label MF
          user_data 2
          callback {rkr->efx_Echotron->changepar(13,(int)o->value());}
          xywh {325 363 33 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button echotron_md {
          label MD
          user_data 2
          callback {rkr->efx_Echotron->changepar(12,(int)o->value());}
          xywh {356 363 34 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Check_Button echotron_user {
          label User
          user_data 2
          callback {rkr->efx_Echotron->changepar(4,(int)o->value());

if((int)o->value())B_ech->activate(); else B_ech->deactivate();}
          xywh {390 366 39 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
        Fl_Button B_ech {
          label Browse
          user_data 2
          callback {char *filename;
filename=fl_file_chooser("Load dly File:","(*.dly)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".dly");
strcpy(rkr->efx_Echotron->Filename,filename);
rkr->efx_Echotron->setfile(USERFILE);
echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);}
          xywh {429 368 46 10} labelsize 10 deactivate
        }
        Fl_Counter echotron_length {
          label {\#}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(357);
 return;
}
rkr->efx_Echotron->changepar(3,(int)o->value());}
          xywh {339 379 48 12} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 127 step 1 value 1 textsize 9
        }
        Fl_Choice echotron_fnum {
          label File
          user_data 12
          callback {rkr->efx_Echotron->changepar(8,(int)o->value());
echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);}
          xywh {411 380 64 14} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label SwingPong
            xywh {64 64 36 21} labelsize 10
          }
          MenuItem {} {
            label {Short Delays}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Flange + Echo}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Comb
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label EchoFlange
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Filtered Echo}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Notch-Wah}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Multi-Chorus}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label PingPong
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {90-Shifter}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {Basic LR Delay}
            xywh {40 40 36 21} labelsize 10
          }
        }
      }
      Fl_Group SHAR {
        user_data 1
        xywh {481 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button shar_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->StereoHarm_Bypass);
 return;
}
rkr->StereoHarm_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_StereoHarm->cleanup();
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
Chord(1);
findpos(42,(int)o->value(),o);}
          xywh {486 216 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice shar_preset {
          label Preset
          user_data 12042
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12042))rkr->efx_StereoHarm->setpreset((int)o->value());
shar_WD->value(rkr->efx_StereoHarm->getpar(0)-64);
shar_ganl->value(rkr->efx_StereoHarm->getpar(1)-64);
shar_intl->value(rkr->efx_StereoHarm->getpar(2)-12);
shar_chl->value(rkr->efx_StereoHarm->getpar(3));
shar_ganr->value(rkr->efx_StereoHarm->getpar(4)-64);
shar_intr->value(rkr->efx_StereoHarm->getpar(5)-12);
shar_chr->value(rkr->efx_StereoHarm->getpar(6));
shar_lrc->value(rkr->efx_StereoHarm->getpar(11)-64);
shar_SELECT->value(rkr->efx_StereoHarm->getpar(7));
shar_note->value(rkr->efx_StereoHarm->getpar(8));
shar_type->value(rkr->efx_StereoHarm->getpar(9));
shar_MIDI->value(rkr->efx_StereoHarm->getpar(10));
if ((rkr->efx_StereoHarm->PMIDI) || (rkr->efx_StereoHarm->PSELECT)) Chord(1);}
          xywh {558 216 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Plain
            xywh {10 10 45 26} labelsize 10
          }
          MenuItem {} {
            label Octavator
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label Chorus
            xywh {42 42 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hard Chorus}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider shar_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(358);
 return;
}
rkr->efx_StereoHarm->changepar(0,(int)(o->value()+64));}
          xywh {531 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_intl {
          label {Int L}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(359);
 return;
}
rkr->StereoHarm_Bypass=0;
rkr->efx_StereoHarm->changepar(2,(int)(o->value()+12));
if((int)shar_activar->value())rkr->StereoHarm_Bypass=1;}
          xywh {531 251 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_chl {
          label {Chrm L}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(360);
 return;
}
rkr->efx_StereoHarm->changepar(3,(int)o->value());}
          xywh {531 264 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -2000 maximum 2000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_ganl {
          label {Gain L}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(361);
 return;
}
rkr->efx_StereoHarm->changepar(1,(int)(o->value()+64));}
          xywh {531 277 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_intr {
          label {Int R}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(362);
 return;
}
rkr->StereoHarm_Bypass=0;
rkr->efx_StereoHarm->changepar(5,(int)(o->value()+12));
if((int)shar_activar->value())rkr->StereoHarm_Bypass=1;}
          xywh {531 290 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_chr {
          label {Chrm R}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(363);
 return;
}
rkr->efx_StereoHarm->changepar(6,(int)o->value());}
          xywh {531 303 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -2000 maximum 2000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_ganr {
          label {Gain R}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(364);
 return;
}
rkr->efx_StereoHarm->changepar(4,(int)(o->value()+64));}
          xywh {531 316 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_lrc {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(365);
 return;
}
rkr->efx_StereoHarm->changepar(11,(int)(o->value()+64));}
          xywh {531 329 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button shar_MIDI {
          label MIDI
          user_data 2
          callback {rkr->efx_StereoHarm->changepar(10,(int)o->value());
rkr->RC->cleanup();

if(!(int)o->value())
{
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
}}
          xywh {490 341 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
        }
        Fl_Check_Button shar_SELECT {
          label SEL
          user_data 2
          callback {rkr->efx_StereoHarm->changepar(7,(int)o->value());
rkr->RC->cleanup();
Chord(1);

if(!(int)o->value())
{
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
}}
          xywh {490 354 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
        }
        Fl_Box shar_chordname {
          xywh {537 344 98 21} labelsize 12 labelcolor 7
        }
        Fl_Value_Slider shar_note {
          label Note
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(366);
 return;
}
rkr->efx_StereoHarm->changepar(8,(int)o->value());
Chord(1);}
          xywh {531 370 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 23 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider shar_type {
          label Chord
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(367);
 return;
}
rkr->efx_StereoHarm->changepar(9,(int)o->value());
Chord(1);}
          xywh {531 382 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 33 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group COMPBAND {
        user_data 1
        xywh {162 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button cband_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->CompBand_Bypass);
 return;
}
rkr->CompBand_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_CompBand->cleanup();
findpos(43,(int)o->value(),o);}
          xywh {167 215 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice cband_preset {
          label Preset
          user_data 12043
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12043))rkr->efx_CompBand->setpreset((int)o->value());
cband_WD->value(rkr->efx_CompBand->getpar(0)-64);
cband_Lratio->value(rkr->efx_CompBand->getpar(1));
cband_MLratio->value(rkr->efx_CompBand->getpar(2));
cband_MHratio->value(rkr->efx_CompBand->getpar(3));
cband_Hratio->value(rkr->efx_CompBand->getpar(4));
cband_Lthres->value(rkr->efx_CompBand->getpar(5));
cband_MLthres->value(rkr->efx_CompBand->getpar(6));
cband_MHthres->value(rkr->efx_CompBand->getpar(7));
cband_Hthres->value(rkr->efx_CompBand->getpar(8));
cband_cross1->value(rkr->efx_CompBand->getpar(9));
cband_cross2->value(rkr->efx_CompBand->getpar(10));
cband_cross3->value(rkr->efx_CompBand->getpar(11));
cband_cross3->value(rkr->efx_CompBand->getpar(11));
cband_gain->value(rkr->efx_CompBand->getpar(12));}
          xywh {239 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Good Start}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label Loudness
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Loudness 2}
            xywh {82 82 36 21} labelsize 10
          }
        }
        Fl_Value_Slider cband_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(368);
 return;
}
rkr->efx_CompBand->changepar(0,(int)(o->value()+64));}
          xywh {214 238 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_gain {
          label Gain
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(369);
 return;
}
rkr->efx_CompBand->changepar(12,(int)o->value());}
          xywh {214 250 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_Lratio {
          label {L Ratio}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(370);
 return;
}
rkr->efx_CompBand->changepar(1, (int) o->value());}
          xywh {214 262 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_MLratio {
          label {ML Ratio}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(371);
 return;
}
rkr->efx_CompBand->changepar(2, (int) o->value());}
          xywh {214 274 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_MHratio {
          label {MH Ratio}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(372);
 return;
}
rkr->efx_CompBand->changepar(3, (int) o->value());}
          xywh {214 286 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_Hratio {
          label {H Ratio}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(373);
 return;
}
rkr->efx_CompBand->changepar(4, (int) o->value());}
          xywh {214 298 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_Lthres {
          label {L Thres}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(374);
 return;
}
rkr->efx_CompBand->changepar(5, (int)o->value());}
          xywh {214 310 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_MLthres {
          label {ML Thres}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(375);
 return;
}
rkr->efx_CompBand->changepar(6, (int)o->value());}
          xywh {214 322 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_MHthres {
          label {MH Thres}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(376);
 return;
}
rkr->efx_CompBand->changepar(7, (int)o->value());}
          xywh {214 334 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_Hthres {
          label {H Thres}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(377);
 return;
}
rkr->efx_CompBand->changepar(8, (int)o->value());}
          xywh {214 346 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_cross1 {
          label Cross1
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(378);
 return;
}
rkr->efx_CompBand->changepar(9,(int)o->value());}
          xywh {214 358 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_cross2 {
          label Cross2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(379);
 return;
}
rkr->efx_CompBand->changepar(10,(int)o->value());}
          xywh {214 370 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1000 maximum 8000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider cband_cross3 {
          label Cross3
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(380);
 return;
}
rkr->efx_CompBand->changepar(11,(int)o->value());}
          xywh {214 382 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2000 maximum 26000 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group OTREM {
        user_data 1
        xywh {320 213 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button otrem_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Opticaltrem_Bypass);
 return;
}
rkr->Opticaltrem_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Opticaltrem->cleanup();
findpos(44,(int)o->value(),o);}
          xywh {325 217 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice otrem_preset {
          label Preset
          user_data 12044
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12044))rkr->efx_Opticaltrem->setpreset((int)o->value());
otrem_dpth->value(rkr->efx_Opticaltrem->getpar(0));
otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
otrem_rnd->value(rkr->efx_Opticaltrem->getpar(2));
otrem_lfotype->value(rkr->efx_Opticaltrem->getpar(3));
otrem_stdf->value(rkr->efx_Opticaltrem->getpar(4));
otrem_pan->value(rkr->efx_Opticaltrem->getpar(5)-64);
otrem_invert->value(rkr->efx_Opticaltrem->getpar(6));}
          xywh {397 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Fast
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Trem 2}
            xywh {72 72 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hard Pan}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Soft Pan}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Ramp Down}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Hard Ramp}
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider otrem_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(381);
 return;
}
rkr->efx_Opticaltrem->changepar(0,(int)o->value());}
          xywh {372 246 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider otrem_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(382);
 return;
}
rkr->efx_Opticaltrem->changepar(1,(int)o->value());}
          xywh {372 266 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider otrem_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(383);
 return;
}
rkr->efx_Opticaltrem->changepar(2,(int)o->value());}
          xywh {372 286 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice otrem_lfotype {
          label {LFO Type}
          callback {rkr->efx_Opticaltrem->changepar(3,(int)o->value());}
          xywh {383 313 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider otrem_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(384);
 return;
}
rkr->efx_Opticaltrem->changepar(4,(int)o->value());}
          xywh {372 340 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider otrem_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(385);
 return;
}
rkr->efx_Opticaltrem->changepar(5,(int)(o->value()+64));}
          xywh {372 360 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button otrem_invert {
          label Invert
          user_data 2
          callback {rkr->efx_Opticaltrem->changepar(6,(int)o->value())}
          tooltip {If checked it behaves more like tube preamp trem. If unchecked it behaves like a stompbox Opto Trem} xywh {428 378 73 15} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group VIBE {
        user_data 1
        xywh {480 211 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button vibe_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Vibe_Bypass);
 return;
}
rkr->Vibe_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Vibe->cleanup();
findpos(45,(int)o->value(),o);}
          xywh {485 215 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice vibe_preset {
          label Preset
          user_data 12045
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12045))rkr->efx_Vibe->setpreset((int)o->value());
vibe_WD->value(rkr->efx_Vibe->getpar(6)-64);
vibe_width->value(rkr->efx_Vibe->getpar(0));
vibe_dpth->value(rkr->efx_Vibe->getpar(8));
vibe_freq->value(rkr->efx_Vibe->getpar(1));
vibe_rnd->value(rkr->efx_Vibe->getpar(2));
vibe_lfotype->value(rkr->efx_Vibe->getpar(3));
vibe_stdf->value(rkr->efx_Vibe->getpar(4));
vibe_pan->value(rkr->efx_Vibe->getpar(5)-64);
vibe_fb->value(rkr->efx_Vibe->getpar(7)-64);
vibe_LR->value(rkr->efx_Vibe->getpar(9)-64);
vibe_stereo->value(rkr->efx_Vibe->getpar(10));}
          xywh {557 215 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Classic
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Stereo Classic}
            xywh {82 82 36 21} labelsize 10
          }
          MenuItem {} {
            label {Wide Vibe}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Classic Chorus}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Vibe Chorus}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Lush Chorus}
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label {Sick Phaser}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Warble
            xywh {0 0 36 21} labelsize 10
          }
        }
        Fl_Value_Slider vibe_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(386);
 return;
}
rkr->efx_Vibe->changepar(6,(int)(o->value())+64);}
          xywh {532 240 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_width {
          label Width
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(387);
 return;
}
rkr->efx_Vibe->changepar(0,(int)o->value());}
          xywh {532 253 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_dpth {
          label Depth
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(388);
 return;
}
rkr->efx_Vibe->changepar(8,(int)o->value());}
          xywh {532 266 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_freq {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(389);
 return;
}
rkr->efx_Vibe->changepar(1,(int)o->value());}
          xywh {532 279 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_rnd {
          label Rnd
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(390);
 return;
}
rkr->efx_Vibe->changepar(2,(int)o->value());}
          xywh {532 292 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Choice vibe_lfotype {
          label {LFO Type}
          callback {rkr->efx_Vibe->changepar(3,(int)o->value());}
          xywh {543 307 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_chorus_lfotype);}
        } {}
        Fl_Value_Slider vibe_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(391);
 return;
}
rkr->efx_Vibe->changepar(4,(int)o->value());}
          xywh {532 329 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_fb {
          label Fb
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(392);
 return;
}
rkr->efx_Vibe->changepar(7,(int)(o->value()+64));}
          xywh {532 342 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_LR {
          label {L/R.Cr}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(393);
 return;
}
rkr->efx_Vibe->changepar(9,(int)(o->value()+64));}
          xywh {532 355 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider vibe_pan {
          label Pan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(394);
 return;
}
rkr->efx_Vibe->changepar(5,(int)(o->value()+64));}
          xywh {532 368 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Check_Button vibe_stereo {
          label Stereo
          user_data 2
          callback {rkr->efx_Vibe->changepar(10,(int)o->value())}
          xywh {583 380 43 14} down_box BORDER_BOX labelsize 10 labelcolor 7
        }
      }
      Fl_Group INFINIT {
        user_data 1
        xywh {479 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
      } {
        Fl_Light_Button infinity_activar {
          label On
          user_data 2
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(116); 
 o->value(rkr->Infinity_Bypass);
 return;
} 
rkr->Infinity_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Infinity->cleanup();
findpos(46,(int)o->value(),o);}
          xywh {487 217 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Choice infinity_preset {
          label Preset
          user_data 12046
          callback {long long ud= (long long) v;
if((ud==0)||(ud==12046))rkr->efx_Infinity->setpreset((int) o->value());
infinity_WD->value(rkr->efx_Infinity->getpar(0)-64);
infinity_Q->value(rkr->efx_Infinity->getpar(9));
infinity_1->value(rkr->efx_Infinity->getpar(1));
infinity_2->value(rkr->efx_Infinity->getpar(2));
infinity_3->value(rkr->efx_Infinity->getpar(3));
infinity_4->value(rkr->efx_Infinity->getpar(4));
infinity_5->value(rkr->efx_Infinity->getpar(5));
infinity_6->value(rkr->efx_Infinity->getpar(6));
infinity_7->value(rkr->efx_Infinity->getpar(7));
infinity_8->value(rkr->efx_Infinity->getpar(8));
infinity_start->value(rkr->efx_Infinity->getpar(10));
infinity_end->value(rkr->efx_Infinity->getpar(11));
infinity_rate->value(rkr->efx_Infinity->getpar(12));
infinity_stdf->value(rkr->efx_Infinity->getpar(13));
infinity_subdiv->value(rkr->efx_Infinity->getpar(14));
infinity_pan->value(rkr->efx_Infinity->getpar(15));
infinity_rev->value(rkr->efx_Infinity->getpar(16));
infinity_stages->value(rkr->efx_Infinity->getpar(17));}
          xywh {559 217 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label Basic
            xywh {27 27 36 21} labelsize 10
          }
          MenuItem {} {
            label {Rising Comb}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label {Falling Comb}
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Laser
            xywh {0 0 36 21} labelsize 10
          }
          MenuItem {} {
            label Doppler
            xywh {10 10 36 21} labelsize 10
          }
          MenuItem {} {
            label Detune
            xywh {20 20 36 21} labelsize 10
          }
          MenuItem {} {
            label {Dizzy Sailor}
            xywh {30 30 36 21} labelsize 10
          }
          MenuItem {} {
            label {Stereo Phaser}
            xywh {40 40 36 21} labelsize 10
          }
          MenuItem {} {
            label Corkscrew
            xywh {50 50 36 21} labelsize 10
          }
          MenuItem {} {
            label FreqeeVox
            xywh {60 60 36 21} labelsize 10
          }
        }
        Fl_Value_Slider infinity_WD {
          label {Wet/Dry}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(395);
 return;
} 
rkr->efx_Infinity->changepar(0,(int)(o->value()+64));}
          xywh {531 239 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_Q {
          label Res
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(396);
 return;
}
rkr->efx_Infinity->changepar(9,(int)o->value());}
          xywh {531 253 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -1000 maximum 1000 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Input infinity_1 {
          label 1
          callback {rkr->efx_Infinity->changepar(1,(int)o->value());}
          xywh {495 268 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_2 {
          label 2
          callback {rkr->efx_Infinity->changepar(2,(int)o->value());}
          xywh {531 268 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_3 {
          label 3
          callback {rkr->efx_Infinity->changepar(3,(int)o->value());}
          xywh {567 267 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_4 {
          label 4
          callback {rkr->efx_Infinity->changepar(4,(int)o->value());}
          xywh {603 267 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_5 {
          label 5
          callback {rkr->efx_Infinity->changepar(5,(int)o->value());}
          xywh {495 286 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_6 {
          label 6
          callback {rkr->efx_Infinity->changepar(6,(int)o->value());}
          xywh {531 286 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_7 {
          label 7
          callback {rkr->efx_Infinity->changepar(7,(int)o->value());}
          xywh {567 286 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Value_Input infinity_8 {
          label 8
          callback {rkr->efx_Infinity->changepar(8,(int)o->value());}
          xywh {603 286 20 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
        }
        Fl_Check_Button infinity_rev {
          label Rev
          user_data 2
          callback {rkr->efx_Infinity->changepar(16,(int)o->value());}
          tooltip {Reverse left from right directions} xywh {485 305 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
        }
        Fl_Counter infinity_stages {
          label Stages
          callback {rkr->efx_Infinity->changepar(17,(int)o->value());}
          xywh {569 305 46 15} type Simple labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 10
        }
        Fl_Value_Slider infinity_pan {
          label AutoPan
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(397);
 return;
} 
rkr->efx_Infinity->changepar(15,(int)o->value());}
          xywh {531 323 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_stdf {
          label {St.df}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(398);
 return;
} 
rkr->efx_Infinity->changepar(13,(int)o->value());}
          xywh {531 335 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_start {
          label Start
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(399);
 return;
} 
rkr->efx_Infinity->changepar(10,(int)o->value());}
          xywh {531 347 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_end {
          label End
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(400);
 return;
} 
rkr->efx_Infinity->changepar(11,(int)o->value());}
          xywh {531 359 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_rate {
          label Tempo
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(401);
 return;
} 
rkr->efx_Infinity->changepar(12,(int)o->value());}
          xywh {531 371 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 600 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider infinity_subdiv {
          label Subdiv
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(402);
 return;
} 
rkr->efx_Infinity->changepar(14,(int)o->value());}
          xywh {531 383 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -16 maximum 16 step 1 textcolor 7
          class SliderW
        }
      }
      Fl_Group Tuner {
        user_data 1
        xywh {520 24 276 58} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button tuner_activar {
          label On
          user_data 2
          callback {rkr->Tuner_Bypass=(int)o->value();
tuner_bar->value(-32);
WNote->copy_label("");
WRfreq->copy_label("");
WNfreq->copy_label("");
ChangeActives();
TUNER_LABEL->redraw_label();}
          tooltip {Enable Tuner - Shortcut 'T'} xywh {526 28 38 18} shortcut 0x74 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Progress tuner_bar {
          xywh {586 31 205 14} box THIN_DOWN_BOX color 47 selection_color 88 align 80
          code0 {o->minimum(-32);}
          code1 {o->maximum(32);}
          code2 {o->value(-32);}
          class TunerLed
        }
        Fl_Box WNote {
          user_data 7
          xywh {676 57 28 22} labelfont 1 labelcolor 7 align 16
        }
        Fl_Box WRfreq {
          user_data 7
          xywh {588 57 76 22} labelfont 1 labelcolor 7 align 16
        }
        Fl_Box WNfreq {
          user_data 7
          xywh {714 57 76 22} labelfont 1 labelcolor 7 align 16
        }
        Fl_Box PINCHO {
          label {@-4$8<}
          xywh {673 48 32 5} box FLAT_BOX color 55 labelcolor 4 align 16
        }
        Fl_Box TUNER_LABEL {
          label Tuner
          user_data 7
          xywh {524 63 57 14} labelfont 1 labelcolor 7
        }
      }
      Fl_Group InOut {
        user_data 1
        xywh {2 24 164 170} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button ActivarGeneral {
          label {FX On}
          user_data 2
          callback {rkr->Bypass=o->value();
rkr->val_il_sum=-50.0;
rkr->val_ir_sum=-50.0;

rkr->val_vl_sum=-50.0;
rkr->val_vr_sum=-50.0;

rkr->old_vl_sum=-50.0;
rkr->old_vr_sum=-50.0;

rkr->old_il_sum=-50.0;
rkr->old_ir_sum=-50.0;

input_vul->value(-50.0);
input_vur->value(-50.0);

output_vul->value(-50.0);
output_vur->value(-50.0);


ChangeActives();  
LABEL_IO->redraw_label();

if (!o->value())
   {
    rkr->OnCounter = 0;
    if (rkr->Tuner_Bypass)
        {
           tuner_activar->value(0);
           tuner_activar->do_callback();
        } 
    if (rkr->MIDIConverter_Bypass)  
        {
            midi_activar->value(0);
            midi_activar->do_callback();
        }
             
rkr->cleanup_efx();

}}
          tooltip {Enable rakarrack - Shortcut 'R'} xywh {6 30 52 18} down_box BORDER_BOX shortcut 0x72 color 62 selection_color 1 labelsize 10 align 84 when 1
        }
        Fl_Button BostBut {
          label {+10dB}
          user_data 78
          callback {if(o->value()) rkr->booster = dB2rap(10);
else rkr->booster=1.0f;}
          tooltip {+10 dB Booster - Shortcut 'F10'} xywh {132 30 30 14} type Toggle shortcut 0xffc7 color 62 labelsize 6
        }
        Fl_Value_Slider Balance {
          label {FX%}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(12);
 return;
} 
rkr->Fraction_Bypass=(float)(o->value()/100.0f);}
          xywh {15 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 100 maximum 0 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Nivel_Entrada {
          label Input
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(14);
 return;
} 
rkr->Input_Gain=(float)((o->value()+50)/100.0);
rkr->calculavol(1);}
          xywh {57 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 50 maximum -50 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Nivel_Salida {
          label Output
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(7);
 return;
} 

rkr->Master_Volume=(float)((o->value()+50)/100.0);
rkr->calculavol(2);}
          tooltip {Shortcut 'F2' decrease volume, 'F3' Increase volume} xywh {115 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 50 maximum -50 step 1 textcolor 7
          class SliderW
        }
        Fl_Slider input_vul {
          xywh {84 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider input_vur {
          xywh {93 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider output_vul {
          xywh {142 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider output_vur {
          xywh {151 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Box LABEL_IO {
          label {In/Out}
          user_data 7
          xywh {60 30 62 14} labelfont 1 labelcolor 7 align 16
        }
      }
      Fl_Group Midi {
        user_data 1
        xywh {520 85 276 52} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button midi_activar {
          label On
          user_data 2
          callback {if ((int)o->value()==0)
{ 
rkr->efx_MIDIConverter->panic();
  Mled->color(fl_darker(FL_RED));
  Mled->redraw();
}


rkr->MIDIConverter_Bypass=(int)o->value();
Midi_out_Counter->do_callback();

ChangeActives();
MIDI_LABEL->redraw_label();}
          tooltip {Enable MIDI Converter - Shortcut 'M'} xywh {525 89 38 18} shortcut 0x6d color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice MIDIOctave {
          label Octave
          user_data 12
          callback {switch((int)o->value())
{
  case 0:
  rkr->efx_MIDIConverter->changepar(4,-2);
  break;
  
  case 1:
  rkr->efx_MIDIConverter->changepar(4,-1);
  break;

  case 2:
  rkr->efx_MIDIConverter->changepar(4,0);
  break;

  case 3:
  rkr->efx_MIDIConverter->changepar(4,1);

  break;

  case 4:
  rkr->efx_MIDIConverter->changepar(4,2);
  break;

}}
          xywh {624 118 37 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 when 1 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {-2}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label {-1}
            xywh {62 62 36 21} labelsize 10
          }
          MenuItem {} {
            label 0
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label 1
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label 2
            xywh {20 20 36 21} labelsize 9
          }
        }
        Fl_Counter Midi_out_Counter {
          label Channel
          callback {rkr->efx_MIDIConverter->changepar(3, (int)o->value());}
          xywh {601 89 60 17} type Simple color 62 labelsize 9 labelcolor 7 minimum 1 maximum 16 step 1 value 1 textsize 11
        }
        Fl_Check_Button Use_FFT {
          label FFT
          user_data 2
          callback {rkr->efx_MIDIConverter->changepar(5, (int)o->value());}
          xywh {571 119 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
        }
        Fl_Value_Slider Trig_Adj {
          label Trigger
          callback {rkr->efx_MIDIConverter->changepar(1,(int)o->value());}
          xywh {667 100 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 2 maximum 60 step 1 textcolor 7
          class SliderW
        }
        Fl_Value_Slider Vel_Adj {
          label Velocity
          callback {rkr->efx_MIDIConverter->changepar(2,(int)o->value());}
          xywh {667 119 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 1 maximum 100 step 1 textcolor 7
          class SliderW
        }
        Fl_Box Mled {
          xywh {571 90 10 10} box ROUNDED_BOX color 88 labelsize 18
        }
        Fl_Box MIDI_LABEL {
          label MIDI
          user_data 7
          callback {int ok;
char *filename;

\#define EXT ".rkrb"
filename=fl_file_chooser("Save Bank File:","(*" EXT")",rkr->Bank_Saved,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
ok=rkr->savebank(filename);
if (ok)
{
strcpy(rkr->Bank_Saved,filename);
BankWin_Label(filename);
}}
          xywh {524 117 44 14} labelfont 1 labelcolor 7 when 0
        }
      }
      Fl_Group Metro {
        user_data 1
        xywh {520 85 276 52} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button metro_activar {
          label On
          user_data 2
          callback {if ((int)o->value()==0)
{ 
  Metro_Led->color(fl_darker(FL_RED));
  Metro_Led->redraw();
}

rkr->M_Metronome->cleanup();
rkr->Metro_Bypass=(int)o->value();


ChangeActives();
Metro_Label->redraw_label();}
          tooltip {Enable Metronome - Shortcut 'M'} xywh {525 89 38 18} shortcut 0x6d color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice MetroBar {
          label {Time Sig.}
          user_data 12
          callback {rkr->M_Metro_Bar=(int)o->value();

switch(rkr->M_Metro_Bar)

   {
      case 0:
      rkr->M_Metronome->set_meter(2);
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(3);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(4);
      break;                    
      case 3:
      rkr->M_Metronome->set_meter(5);
      break;                    
      case 4:
      rkr->M_Metronome->set_meter(6);
      break;                    
      case 5:
      rkr->M_Metronome->set_meter(7);
      break;                    
      case 6:
      rkr->M_Metronome->set_meter(9);
      break;                    
      case 7:
      rkr->M_Metronome->set_meter(11);
      break;                    

 }} open
          xywh {624 98 37 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_looper_bar);}
        } {}
        Fl_Value_Slider Metro_Volume {
          label Volume
          callback {rkr->M_Metro_Vol=2.0f*(float)o->value()/100.0f;}
          xywh {667 100 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 maximum 100 step 1 value 50 textcolor 7
          class SliderW
        }
        Fl_Choice MetroSound {
          label S
          user_data 12
          callback {rkr->M_Metro_Sound=(int)o->value();

switch(rkr->M_Metro_Sound)

   {
      case 0:
      MetroBar->do_callback();
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(1);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(0);
      break;                    
       

 }} open
          xywh {634 118 28 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_looper_ms);}
        } {}
        Fl_Value_Slider Metro_Tempo {
          label Tempo
          callback {rkr->M_Metro_Tempo=(int)o->value();
rkr->M_Metronome->set_tempo(rkr->M_Metro_Tempo);}
          xywh {667 119 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 20 maximum 340 step 1 value 100 textcolor 7
          class SliderW
        }
        Fl_Box Metro_Led {
          xywh {568 90 10 10} box ROUNDED_BOX color 88 labelsize 18
        }
        Fl_Box Metro_Label {
          label Metronome
          user_data 7
          xywh {522 117 92 14} labelfont 1 labelcolor 7 when 0
        }
      }
      Fl_Group Presets {
        user_data 1
        xywh {168 24 352 170} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Box PRESETS_LABEL {
          label Presets
          user_data 7
          xywh {174 28 62 14} labelfont 1 labelcolor 7
        }
        Fl_Button L_B1 {
          label 1
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Default.rkrb", DATADIR);
int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=0;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
}}
          xywh {418 30 22 16} color 62 labelsize 10
        }
        Fl_Button L_B2 {
          label 2
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=1;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
}}
          xywh {442 30 22 16} color 62 labelsize 10
        }
        Fl_Button L_B3 {
          label 3
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra1.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=2;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
}}
          xywh {466 30 22 16} color 62 labelsize 10
        }
        Fl_Button L_B4 {
          label U
          user_data 77
          callback {is_modified();
int ok=rkr->loadbank(rkr->BankFilename);
if(ok) 
{
rkr->a_bank=3;
BankWin_Label(rkr->BankFilename);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
}}
          xywh {490 30 22 16} color 62 labelsize 10
        }
        Fl_Button S_new {
          label New
          user_data 77
          callback {rkr->New();
DisAssigns();
FillML(0);
Prepare_Order();
Put_Loaded();}
          tooltip {New preset - Shortcut 'N'} xywh {174 50 64 18} shortcut 0x6e color 62 labelsize 12
        }
        Fl_Button L_preset {
          label Load
          user_data 77
          callback {char *filename;
filename=fl_file_chooser("Load Preset:","(*.rkr)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkr");
rkr->loadfile(filename);
Put_Loaded();}
          tooltip {Open load preset window - Shortcut 'L'} xywh {240 50 64 18} shortcut 0x6c color 62 labelsize 12
        }
        Fl_Button S_preset {
          label Save
          user_data 77
          callback {char *filename;
\#define EXT ".rkr"
filename=fl_file_chooser("Save Preset:","(*" EXT")",rkr->Preset_Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
rkr->savefile(filename);}
          tooltip {Open save preset window - Shortcut 'S'} xywh {306 50 64 18} shortcut 0x73 color 62 labelsize 12
        }
        Fl_Light_Button Compare {
          label Compare
          user_data 7
          callback {if ((int) o->value())
{
rkr->Preset_to_Bank(0);
rkr->Bank_to_Preset((int)Preset_Counter->value());
Put_Loaded();
}

else
{
 rkr->Bank_to_Preset(0);
 Put_Loaded();
}}
          tooltip {Compare to bank preset - Shortcut 'P'} xywh {373 50 72 18} shortcut 0x70 color 62 selection_color 1 labelsize 12 align 84 when 1
        }
        Fl_Button B_preset {
          label Bank
          user_data 77
          callback {if(!BankWindow->visible())
{
if(!made) make_window_banks();
BankWindow->show();
put_icon(BankWindow);
ScanDir();
}
else
BankWindow->hide();}
          tooltip {Open bank window - Shortcut 'B'} xywh {448 50 64 18} shortcut 0x62 color 62 labelsize 12
        }
        Fl_Input WPreset_Name {
          callback {strcpy(rkr->Preset_Name,o->value());}
          xywh {174 72 338 30} color 62 labelcolor 7 align 20 textsize 24 textcolor 7
          code0 {o->maximum_size(22);}
        }
        Fl_Counter Preset_Counter {
          label Preset
          callback {rkr->new_bank_loaded=0;
unlight_preset(rkr->Selected_Preset);
rkr->Bank_to_Preset((int) o->value());
light_preset((int)o->value());
rkr->Selected_Preset=(int)o->value();
rkr->OnCounter=0;
FillML(0);
Prepare_Order();
Put_Loaded();
if(rkr->Tap_Updated) UpdateTGUI();}
          tooltip {Next or previous preset - Shortcut +(plus) or -(minus)} xywh {174 106 60 20} type Simple color 62 selection_color 0 labelsize 11 labelcolor 7 minimum 1 maximum 60 step 1 value 1 textsize 11
        }
        Fl_Box DAuthor {
          user_data 7
          xywh {246 107 266 18} box DOWN_BOX color 62 align 116
        }
        Fl_Button RandomP {
          label Random
          user_data 77
          callback {RandomPreset();}
          tooltip {Random Preset selection - Shortcut 'F7'} xywh {175 141 59 14} shortcut 0xffc4 color 62 labelsize 10 align 80 when 6
        }
        Fl_Button Open_Order {
          label {Put Order in your Rack}
          user_data 77
          callback {if (!Order->visible())
{
Prepare_Order();
rkr->deachide=0;
Order_DeacHide->value(rkr->deachide);
Order->show();
put_icon(Order);
}
else
Order->hide();}
          tooltip {Open preset order window - Shortcut 'O'} xywh {247 132 195 24} shortcut 0x6f color 62 align 80 when 6
        }
        Fl_Button Etit {
          callback {if(rkr->Bypass)
{
o->hide();
Analy->show();
Analyzer_ON=1;
}}
          xywh {174 160 340 28} type Toggle box NO_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 21 align 17
        }
        Fl_Box Analy {
          xywh {174 160 340 28} labeltype EMBOSSED_LABEL labelfont 1 labelsize 22 align 80 hide
          class Analyzer
        }
        Fl_Button HideUE {
          label Hide
          user_data 77
          callback {if(rkr->deachide)
{
 rkr->deachide=0;
 o->label("Hide");
}
else
{
rkr->deachide=1;
 o->label("Show");
}
 
reordena();}
          tooltip {Hide/Show unused Effects - Shortcut 'F9'} xywh {445 137 32 18} shortcut 0xffc6 color 62 labelsize 10 align 80 when 6
        }
        Fl_Button SwitchMod {
          label Sw
          user_data 77
          callback {if(rkr->sw_stat==0) 
{ 
  rkr->sw_stat = 1;
  Midi->hide();
  Metro->show();
}
else
 {
  rkr->sw_stat= 0;
  Metro->hide();
  Midi->show();
 }}
          tooltip {Switch between Midi Converter &
Metronome - Shortcut 'F8'} xywh {480 137 32 18} shortcut 0xffc5 color 62 labelsize 10 align 80 when 6
        }
      }
      Fl_Group Tap {
        user_data 1
        xywh {520 140 276 54} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button Tap_activar {
          label On
          user_data 2
          callback {rkr->Tap_Bypass = (int)o->value();
if(rkr->Tap_Bypass) rkr->TapTempo_Timeout(0);
ChangeActives();
TAP_LABEL->redraw_label();}
          tooltip {Enable Tap Tempo - Shortcut 'H'} xywh {525 144 38 18} shortcut 0x68 color 62 selection_color 1 labelsize 10 when 1
        }
        Fl_Choice T_SEL {
          label Input
          user_data 12
          callback {rkr->Tap_Selection=(int)o->value();}
          xywh {600 145 87 15} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label GUI
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {MIDI Note On}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Jack Transport}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label MTC
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Beat Tracker}
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Choice T_SET {
          label Set
          user_data 12
          callback {rkr->Tap_SetValue=(int)o->value();}
          xywh {714 145 76 15} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        } {
          MenuItem {} {
            label {Dl. 1 LFO 1}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/2}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/4}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Button T_Apply {
          label Apply
          user_data 77
          callback {if((rkr->Tap_Bypass) && (rkr->Tap_TempoSet>0))
{
rkr->Update_tempo();
UpdateTGUI();
}}
          xywh {628 172 38 15} shortcut 0x67 labelsize 10
        }
        Fl_Button T_BUT {
          label Tap
          user_data 77
          callback {if((rkr->Tap_Bypass) && ( rkr->Tap_Selection==0))
{
T_DIS->value(rkr->TapTempo());
UpdateTGUI();
}}
          tooltip {Tap tempo set - Shortcut 'G'} xywh {671 165 38 23} shortcut 0x67 labelsize 12
        }
        Fl_Box TAP_LABEL {
          label {Tap Tempo}
          user_data 7
          xywh {524 170 93 14} labelfont 1 labelcolor 7 when 0
        }
        Fl_Value_Input T_DIS {
          callback {if(o->value()> 360) o->value(360);
if(o->value()< 20) o->value(20);
if(rkr->Tap_Bypass)
{
rkr->Tap_TempoSet=(int)o->value();
rkr->Update_tempo();
UpdateTGUI();
}}
          xywh {719 165 70 22} align 0 minimum 20 maximum 360 step 1 value 100 textcolor 7
        }
      }
    }
    Fl_Window BankWindow {
      callback {o->hide();
save_stat(1);}
      xywh {1488 150 800 600} type Double color 4 selection_color 7 hide resizable size_range {640 480 3200 2400}
    } {
      Fl_Box Fondo3 {
        xywh {1 1 800 600}
      }
      Fl_Menu_Bar MenuB {
        xywh {0 0 253 20} box NO_BOX color 55 selection_color 7 labelcolor 7 align 112 textcolor 7
      } {
        Submenu ArchivoB {
          label {&File} open
          xywh {10 10 100 20} labelcolor 7
        } {
          MenuItem NewB {
            label {&New}
            callback {rkr->New_Bank();
Put_Loaded_Bank();
BankWindow->redraw();}
            xywh {0 0 45 26} divider
          }
          MenuItem Load_Bank {
            label {&Load Bank}
            callback {int ok;
char *filename;
is_modified();
filename=fl_file_chooser("Load Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
ok=rkr->loadbank(filename);
if(ok) 
{
BankWin_Label(filename);
Put_Loaded_Bank();
AddBankName(filename);
if(rkr->CheckOldBank(filename)==0)
{
        char nombre[64];
        char *filepart;
        memset(nombre,0,sizeof(nombre));
        filepart = strrchr(filename,'/')+1;
        strncpy(nombre,filepart,strlen(filepart)-5);
        CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)filename, 0);
}
}}
            xywh {10 10 45 26}
          }
          MenuItem Save_Bank {
            label {&Save Bank}
            callback {MIDI_LABEL->do_callback();}
            xywh {10 10 45 26} divider
          }
          MenuItem Convert_Old_Bank {
            label {Convert &Old Bank}
            callback {char *filename;
char name[64];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Old Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");

if(rkr->CheckOldBank(filename))
{
rkr->ConvertOldFile(filename);
rkr->Message(1,name, "Please, now try to load the new files");
}
else
rkr->Message(1, name, "This file has already the new format");}
            xywh {0 0 36 21} divider
          }
          MenuItem salirB {
            label {&Close}
            callback {BankWindow->do_callback();}
            xywh {12 12 36 21} labelcolor 7
          }
        }
        Submenu AyudaB {
          label {&Help} open
          xywh {10 10 100 20} labelcolor 7
        } {
          MenuItem ContenidoB {
            label {Help &Contents}
            callback {show_help();}
            xywh {10 10 100 20} shortcut 0xffbe labelcolor 7
          }
          MenuItem Acerca_deB {
            label {&About...}
            callback {int x,y;

x = BankWindow->x()+((BankWindow->w()-420)/2);
y = BankWindow->y()+((BankWindow->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);}
            xywh {10 10 100 20} labelcolor 7
          }
        }
      }
      Fl_Button B_B1 {
        label 1
        user_data 77
        callback {L_B1->do_callback();}
        xywh {258 14 32 24} color 62 labelsize 10
      }
      Fl_Button B_B2 {
        label 2
        user_data 77
        callback {L_B2->do_callback();}
        xywh {298 14 32 24} color 62 labelsize 10
      }
      Fl_Button B_B3 {
        label 3
        user_data 77
        callback {L_B3->do_callback();}
        xywh {338 14 32 24} color 62 labelsize 10
      }
      Fl_Button B_B4 {
        label U
        user_data 77
        callback {L_B4->do_callback();}
        xywh {378 14 32 24} color 62 labelsize 10
      }
      Fl_Choice CH_UB {
        label {User Banks       }
        callback {int ok=rkr->loadbank((char *)v);
if(ok) 
{
BankWin_Label((char *)v);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
}} open
        xywh {549 14 117 24} down_box BORDER_BOX selection_color 7 labelcolor 7 when 6 textcolor 7
      } {}
      Fl_Group ob {
        xywh {0 60 800 540} labelsize 18
      } {}
    }
    Fl_Window Order {
      callback {save_stat(2);
Order->hide();}
      xywh {759 49 500 400} type Double color 178 hide resizable size_range {500 400 3200 2400}
    } {
      Fl_Box Fondo1 {
        xywh {1 1 600 400}
      }
      Fl_Box O_TITLE {
        label {Put Order in your Rack}
        xywh {25 3 438 37} labelfont 1 labelsize 33 labelcolor 7
      }
      Fl_Browser Avail_Bro {
        user_data 99
        xywh {15 50 175 225} type Hold labelsize 18 textsize 18 textcolor 7
      }
      Fl_Button Pon {
        label {@<->}
        callback {int i = Order_Bro->value();
int j = Avail_Bro->value();

if(!i) return;
if(!j) return;

Order_Bro->insert(i,Avail_Bro->text(j));

Avail_Bro->remove(j);
Order_Bro->remove(i+1);
Order_Bro->select(1);
rkr->new_order[i-1]=rkr->availables[j];
Fill_Avail(rkr->eff_filter);}
        xywh {200 145 50 25} labelsize 18
      }
      Fl_Browser Order_Bro {
        xywh {260 50 175 225} type Hold labelsize 18 textsize 18 textcolor 7
      }
      Fl_Button Sube {
        label {@$2->}
        callback {int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i-1);

i--;

if (i>0) 
{
x=rkr->new_order[i];
x1=rkr->new_order[i-1];

rkr->new_order[i]=x1;
rkr->new_order[i-1]=x;
}}
        xywh {442 120 50 25} labelsize 18
      }
      Fl_Button Baja {
        label {@$8->}
        callback {int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i+1);

i--;

if (i<9)
{
x=rkr->new_order[i];
x1=rkr->new_order[i+1];

rkr->new_order[i]=x1;
rkr->new_order[i+1]=x;
}}
        xywh {442 160 50 25} labelsize 18
      }
      Fl_Group Filters {
        xywh {15 280 180 110}
      } {
        Fl_Button Fil0 {
          label All
          callback {rkr->eff_filter=0;
Fill_Avail(rkr->eff_filter);}
          xywh {15 284 177 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil1 {
          label Distortion
          callback {rkr->eff_filter=1;
Fill_Avail(rkr->eff_filter);}
          xywh {105 304 86 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil2 {
          label Modulation
          callback {rkr->eff_filter=2;
Fill_Avail(rkr->eff_filter);}
          xywh {15 304 78 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil4 {
          label Time
          callback {rkr->eff_filter=4;
Fill_Avail(rkr->eff_filter);}
          xywh {105 325 86 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil8 {
          label Emulation
          callback {rkr->eff_filter=8;
Fill_Avail(rkr->eff_filter);}
          xywh {15 324 78 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil16 {
          label Filters
          callback {rkr->eff_filter=16;
Fill_Avail(rkr->eff_filter);}
          xywh {105 345 86 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil32 {
          label Dynamics
          callback {rkr->eff_filter=32;
Fill_Avail(rkr->eff_filter);}
          xywh {15 344 78 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil64 {
          label {Processing && EQ}
          callback {rkr->eff_filter=64;
Fill_Avail(rkr->eff_filter);}
          xywh {105 365 86 15} type Radio labelsize 10 when 1
        }
        Fl_Button Fil128 {
          label Synthesis
          callback {rkr->eff_filter=128;
Fill_Avail(rkr->eff_filter);}
          xywh {15 365 78 15} type Radio labelsize 10 when 1
        }
      }
      Fl_Check_Button Order_DeacHide {
        label {Hide Unused Effect Widgets}
        callback {rkr->deachide=(int) o->value();}
        xywh {420 286 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
      }
      Fl_Button ok_order {
        label Ok
        callback {int i;
for (i=0;i<10;i++) rkr->efx_order[i]=rkr->new_order[i];
reordena();
Order->do_callback();}
        xywh {333 349 72 26}
      }
      Fl_Button Cancel_order {
        label Cancel
        callback {int i;
for (i=0;i<10;i++) rkr->efx_order[i]=rkr->saved_order[i];
Order->do_callback();}
        xywh {415 349 72 26}
      }
    }
    Fl_Window Settings {
      callback {save_stat(3);
Settings->hide();} open
      xywh {1388 103 640 528} type Double color 4 hide size_range {640 528 0 0}
    } {
      Fl_Box Fondo2 {
        xywh {1 1 640 528}
      }
      Fl_Tabs STabs {
        user_data 1 open
        xywh {0 0 636 535}
      } {
        Fl_Group Look {
          label Look
          user_data 1
          xywh {5 26 630 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
        } {
          Fl_Box Fondo6 {
            xywh {5 26 630 502}
          }
          Fl_Choice scheme_ch {
            label Schema
            callback {switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

}}
            xywh {60 50 88 20} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 12 textcolor 7
          } {
            MenuItem {} {
              label X11
              xywh {10 10 45 26} labelsize 12
            }
            MenuItem {} {
              label fltk
              xywh {10 10 45 26} labelsize 12
            }
            MenuItem {} {
              label {gtk+}
              xywh {20 20 45 26} labelsize 12
            }
            MenuItem {} {
              label plastic
              xywh {30 30 45 26} labelsize 12
            }
          }
          Fl_Browser Font_Bro {
            label Font
            callback {rkr->font = (int)o->value()-1;
chfsize(0);}
            xywh {20 100 400 225} type Select labelsize 11 labelcolor 7 align 1 when 1
          }
          Fl_Box FSLabel {
            label {Font Size}
            xywh {10 333 60 17} labelsize 11 labelcolor 7
          }
          Fl_Button FSless {
            label {-}
            user_data 77
            callback {rkr->relfontsize--;
chfsize(-1);}
            xywh {78 330 30 20}
          }
          Fl_Button FSplus {
            label {+}
            user_data 77
            callback {rkr->relfontsize++;
chfsize(1);}
            xywh {113 330 30 20}
          }
          Fl_Button FSReset {
            label Reset
            user_data 77
            callback {rkr->relfontsize=0;
chfsize(0);}
            xywh {148 330 57 20}
          }
          Fl_Box CLLabel {
            label Colors
            xywh {10 358 40 19} labelsize 11 labelcolor 7
          }
          Fl_Button B_C {
            label Buttons
            user_data 77
            callback {uchar r,g,b;

Fl::get_color(fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b)) return;
fore_color=fl_rgb_color(r,g,b);
Buttons_Color_Change(fore_color);}
            xywh {15 380 90 25}
          }
          Fl_Button A_C {
            label Labels
            user_data 77
            callback {uchar r,g,b;
Fl::get_color(label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b)) return;
label_color=fl_rgb_color(r,g,b);
Label_Color_Change(label_color);}
            xywh {120 380 90 25}
          }
          Fl_Button L_C {
            label Leds
            user_data 77
            callback {uchar r,g,b;
Fl::get_color(leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b)) return;
leds_color=fl_rgb_color(r,g,b);
Leds_Color_Change(leds_color);}
            xywh {225 380 90 25}
          }
          Fl_Button K_C {
            label Background
            user_data 77
            callback {uchar r,g,b;
Fl::get_color(back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b)) return;
back_color=fl_rgb_color(r,g,b);
Background_Color_Change(back_color);}
            xywh {330 380 90 25}
          }
          Fl_Check_Button Enable_Back {
            label {Enable Background Image}
            callback {rkr->EnableBackgroundImage=(int) o->value();
PutBackground();}
            xywh {162 409 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_File_Input BackFiname {
            label {Background Image}
            xywh {10 445 390 30} labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
          Fl_Button BI_Browser {
            label Browse
            user_data 77
            callback {char *filename;
filename=fl_file_chooser("Browse:","(*.png)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
strcpy(rkr->BackgroundImage,filename);
PutBackground();}
            xywh {410 455 65 20}
          }
          Fl_Check_Button Enable_DeacHide {
            label {Hide Unused Effect Widgets}
            callback {rkr->deachide=(int) o->value();}
            xywh {169 500 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
        }
        Fl_Group AUDIO_SET {
          label Audio
          user_data 1
          xywh {0 26 635 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4
        } {
          Fl_Box Fondo7 {
            xywh {5 26 630 502}
          }
          Fl_Check_Button INSTATE {
            label {FX On at start}
            callback {rkr->init_state=(int) o->value();}
            xywh {96 29 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button Filter_DC {
            label {Filter Input DC Offset}
            callback {rkr->DC_Offset=(int) o->value();}
            xywh {135 53 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button Pre_Serve {
            label {Preserve Gain/Master when Preset change}
            callback {rkr->actuvol=(int) o->value();}
            xywh {259 77 21 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button Update_TAP {
            label {Update TapTempo when Preset change}
            callback {rkr->Tap_Updated = (int) o->value();}
            xywh {239 100 21 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button UPSAMPLE_C {
            label Upsampling
            callback {Show_Next_Time();}
            xywh {83 124 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4 when 1
          }
          Fl_Choice Upr_Amo {
            label Amount
            callback {rkr->UpAmo =(int) o->value();

Show_Next_Time();}
            xywh {145 126 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label x2
              xywh {40 40 45 26} labelsize 10
            }
            MenuItem {} {
              label x3
              xywh {40 40 45 26} labelsize 10
            }
            MenuItem {} {
              label x4
              xywh {30 30 36 21} labelsize 10
            }
            MenuItem {} {
              label x5
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label x6
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label x7
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label x8
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label x9
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label x10
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label x11
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label x12
              xywh {0 0 36 21} labelsize 10
            }
          }
          Fl_Choice Upr_Qual {
            label Up
            callback {rkr->UpQual =(int) o->value();

Show_Next_Time();}
            xywh {217 126 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label Best
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label Medium
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label Fastest
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label {Zero Order}
              xywh {10 10 36 21} labelsize 10
            }
            MenuItem {} {
              label Linear
              xywh {10 10 36 21} labelsize 10
            }
          }
          Fl_Choice Downr_Qual {
            label Down
            callback {rkr->DownQual =(int) o->value();

Show_Next_Time();}
            xywh {329 126 73 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Counter L_SIZE {
            label {Looper Size Seconds     }
            callback {if(!rkr->m_displayed)
{
Show_Next_Time();
rkr->m_displayed=1;
}}
            xywh {133 149 47 18} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 0.5 maximum 30 step 0.5 value 0.5 textsize 10
          }
          Fl_Counter LM_Volume {
            label {Looper Metronome Volume  }
            callback {rkr->Metro_Vol=(int)o->value();
rkr->efx_Looper->setmvol(rkr->Metro_Vol);}
            xywh {338 149 47 18} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 0 maximum 100 step 1 value 50 textsize 10
          }
          Fl_Choice Har_Qual {
            label {Harmonizer Quality      }
            callback {int i = (int) o->value();

switch(i)
{
     case 0:
       rkr->HarQual=4;
       break;
     case 1:
       rkr->HarQual=8;
       break;
     case 2:
       rkr->HarQual=16;	
	break;
     case 3:
       rkr->HarQual=32;	
	break;

		
}


Show_Next_Time();}
            xywh {132 173 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label 4
              xywh {20 20 45 26} labelsize 10
            }
            MenuItem {} {
              label 8
              xywh {20 20 45 26} labelsize 10
            }
            MenuItem {} {
              label 16
              xywh {10 10 36 21} labelsize 10
            }
            MenuItem {} {
              label 32
              xywh {10 10 36 21} labelsize 10
            }
          }
          Fl_Choice Ste_Qual {
            label {StereoHarm Quality}
            callback {int i = (int) o->value();

switch(i)
{
     case 0:
       rkr->SteQual=4;
       break;
     case 1:
       rkr->SteQual=8;
       break;
     case 2:
       rkr->SteQual=16;	
	break;
     case 3:
       rkr->SteQual=32;	
	break;

		
}


Show_Next_Time();}
            xywh {296 173 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label 4
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label 8
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label 16
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label 32
              xywh {20 20 36 21} labelsize 10
            }
          }
          Fl_Choice Voc_Bands {
            label {Vocoder Bands              }
            callback {switch((int)o->value())
{
  case 0:
  rkr->VocBands = 16;
  break;

  case 1:
  rkr->VocBands = 32;
  break;

  case 2:
  rkr->VocBands = 64;
  break;

  case 3:
  rkr->VocBands = 128;
  break;

  case 4:
  rkr->VocBands = 256;
  break;

}

Show_Next_Time();} open
            xywh {132 196 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label 16
              xywh {50 50 45 26} labelsize 10
            }
            MenuItem {} {
              label 32
              xywh {50 50 45 26} labelsize 10
            }
            MenuItem {} {
              label 64
              xywh {40 40 36 21} labelsize 10
            }
            MenuItem {} {
              label 128
              xywh {30 30 36 21} labelsize 10
            }
            MenuItem {} {
              label 256
              xywh {30 30 36 21} labelsize 10
            }
          }
          Fl_Check_Button FLPosition {
            label {Limiter before Output Volume}
            callback {rkr->flpos=(int)o->value();}
            xywh {186 222 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button DB6B {
            label {+6dB Final Limiter }
            callback {rkr->db6booster=(int)o->value();}
            xywh {324 222 23 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Counter Calibration {
            label {Tuner Calibration A4 }
            callback {rkr->aFreq=o->value();
rkr->RecNote->update_freqs(rkr->aFreq);
rkr->RingRecNote->update_freqs(rkr->aFreq);}
            xywh {120 249 116 21} labelsize 10 labelcolor 7 align 4 minimum 420 maximum 460 value 440 textsize 10
          }
          Fl_Counter RTrigger {
            label {Recognize Note Trigger}
            callback {rkr->rtrig = o->value();
rkr->RecNote->trigfact = o->value();
rkr->RingRecNote->trigfact = o->value();}
            xywh {367 249 116 21} labelsize 10 labelcolor 7 align 4 minimum 0.01 maximum 0.99 step 0.01 value 0.6 textsize 10
            code0 {o->lstep(0.1);}
          }
          Fl_Choice RC_Opti {
            label {Recognize Note Optimization}
            callback {rkr->RCOpti =(int) o->value();

switch(rkr->RCOpti)
  {
  
  
    case 0:
    	rkr->RecNote->setlpf(5500);
    	rkr->RecNote->sethpf(80);
	rkr->RingRecNote->setlpf(5500);
	rkr->RingRecNote->sethpf(80);
    	break;
    	

    case 1:
    	rkr->RecNote->setlpf(4500);
    	rkr->RecNote->sethpf(80);
	rkr->RingRecNote->setlpf(4500);
	rkr->RingRecNote->sethpf(80);
    	break;
    	
    case 2:
    	rkr->RecNote->setlpf(3000);
    	rkr->RecNote->sethpf(300);
	rkr->RingRecNote->setlpf(3000);
	rkr->RingRecNote->sethpf(300);
    	break;

}} open
            xywh {160 277 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label Normal
              xywh {40 40 45 26} labelsize 10
            }
            MenuItem {} {
              label Guitar
              xywh {40 40 45 26} labelsize 10
            }
            MenuItem {} {
              label Voice
              xywh {30 30 36 21} labelsize 10
            }
          }
          Fl_Choice Har_Downsample {
            label {Harmonizer Downsample }
            callback {rkr->Har_Down=(int)o->value();
Show_Next_Time();}
            xywh {145 306 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label Normal
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label 96000
              xywh {30 30 45 26} labelsize 10
            }
            MenuItem {} {
              label 48000
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label 44100
              xywh {20 20 36 21} labelsize 10
            }
            MenuItem {} {
              label 32000
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label 22050
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label 16000
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label 12000
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label 8000
              xywh {0 0 36 21} labelsize 10
            }
            MenuItem {} {
              label 4000
              xywh {0 0 36 21} labelsize 10
            }
          }
          Fl_Choice Har_Down_Qua {
            label Down
            callback {rkr->Har_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 306 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Har_Up_Qua {
            label Up
            callback {rkr->Har_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 306 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Rev_Downsample {
            label {Reverbtron Downsample  }
            callback {rkr->Rev_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 329 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Rev_Down_Qua {
            label Down
            callback {rkr->Rev_D_Q=(int)o->value();
Show_Next_Time();}
            xywh {250 329 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Rev_Up_Qua {
            label Up
            callback {rkr->Rev_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 329 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Con_Downsample {
            label {Convolotron Downsample}
            callback {rkr->Con_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 352 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Con_Down_Qua {
            label Down
            callback {rkr->Con_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 352 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Con_Up_Qua {
            label Up
            callback {rkr->Con_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 352 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Seq_Downsample {
            label {Sequence Downsample    }
            callback {rkr->Seq_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 375 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Seq_Down_Qua {
            label Down
            callback {rkr->Seq_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 375 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Seq_Up_Qua {
            label Up
            callback {rkr->Seq_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 375 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Shi_Downsample {
            label {Shifter Downsample         }
            callback {rkr->Shi_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 398 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Shi_Down_Qua {
            label Down
            callback {rkr->Shi_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 398 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Shi_Up_Qua {
            label Up
            callback {rkr->Shi_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 398 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Voc_Downsample {
            label {Vocoder Downsample      }
            callback {rkr->Voc_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 422 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Voc_Down_Qua {
            label Down
            callback {rkr->Voc_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 422 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Voc_Up_Qua {
            label Up
            callback {rkr->Voc_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 422 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Ste_Downsample {
            label {StereoHarm Downsample}
            callback {rkr->Ste_Down=(int)o->value();
Show_Next_Time();} open
            xywh {145 447 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Har_Downsample);}
          } {}
          Fl_Choice Ste_Down_Qua {
            label Down
            callback {rkr->Ste_D_Q=(int)o->value();
Show_Next_Time();} open
            xywh {250 447 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Ste_Up_Qua {
            label Up
            callback {rkr->Ste_U_Q=(int)o->value();
Show_Next_Time();} open
            xywh {343 447 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Wave_Amo {
            label {Waveshape Resampling   }
            callback {Show_Next_Time();}
            xywh {145 497 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          } {
            MenuItem {} {
              label Normal
              xywh {50 50 45 26} labelsize 10
            }
            MenuItem {} {
              label x2
              xywh {50 50 45 26} labelsize 10
            }
            MenuItem {} {
              label x4
              xywh {40 40 36 21} labelsize 10
            }
            MenuItem {} {
              label x8
              xywh {30 30 36 21} labelsize 10
            }
            MenuItem {} {
              label x12
              xywh {30 30 36 21} labelsize 10
            }
          }
          Fl_Choice Wave_Down_Qua {
            label Down
            callback {rkr->Wave_down_q=(int)o->value();
Show_Next_Time();}
            xywh {252 497 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
          Fl_Choice Wave_Up_Qua {
            label Up
            callback {rkr->Wave_up_q=(int)o->value();
Show_Next_Time();}
            xywh {345 497 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
            code0 {o->menu(menu_Upr_Qual);}
          } {}
        }
        Fl_Group MIDI_SET {
          label MIDI
          user_data 1
          xywh {5 26 630 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
        } {
          Fl_Box Fondo8 {
            xywh {5 26 630 502}
          }
          Fl_Check_Button D_A_Connect {
            label {Auto Connect MIDI In}
            callback {rkr->aconnect_MI=(int) o->value();

if (rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();}
            xywh {135 38 105 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Browser BMidiIn {
            label {ALSA Sequencer Ports}
            callback {int valor;
valor = (int) o->value();
if(o->text(valor) != NULL)
strcpy(rkr->MID,o->text(valor));
else return;
o->select(valor,1);
rkr->Conecta();}
            xywh {15 72 190 111} type Hold selection_color 0 labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
          Fl_Counter Midi_In_Counter {
            label {Receive Channel}
            callback {rkr->MidiCh=(int)o->value()-1;}
            xywh {103 198 60 24} type Simple color 25 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 16 step 1 value 1 textsize 11
          }
          Fl_Counter Har_In_Counter {
            label {Harmonizer Receive Channel}
            callback {rkr->HarCh=(int)o->value()-1;}
            xywh {162 235 60 24} type Simple color 25 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 16 step 1 value 1 textsize 11
          }
          Fl_Group wMIDI {
            label {MIDI implementation}
            xywh {15 285 273 23} box DOWN_FRAME labelsize 10 labelcolor 7 align 5
          } {
            Fl_Check_Button Mw0 {
              label Default
              callback {rkr->MIDIway=0;
ML_Menu->deactivate();}
              xywh {72 287 18 18} type Radio down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
            }
            Fl_Check_Button Mw1 {
              label {MIDI Learn}
              callback {rkr->MIDIway=1;
ML_Menu->activate();}
              xywh {183 287 18 18} type Radio down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
            }
          }
          Fl_Check_Button AAssign {
            label {Auto Assign MIDI Learn}
            callback {rkr->autoassign=o->value();}
            xywh {134 319 16 15} down_box DOWN_BOX labelsize 10 labelcolor 7 align 4
          }
          Fl_Check_Button MTable {
            label {MIDI Program Change Table}
            callback {rkr->midi_table=o->value();
if(rkr->midi_table) scroll->activate(); else 
scroll->deactivate();}
            xywh {157 337 16 15} down_box DOWN_BOX labelsize 10 labelcolor 7 align 4
          }
          Fl_Scroll scroll {
            user_data 5000 open
            xywh {15 360 585 162} type VERTICAL_ALWAYS
          } {}
        }
        Fl_Group JACK_SET {
          label Jack
          user_data 1
          xywh {5 26 630 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
        } {
          Fl_Box Fondo9 {
            xywh {5 26 630 502}
          }
          Fl_Check_Button D_J_Connect {
            label {Auto Connect Out}
            callback {rkr->aconnect_JA=(int) o->value();
if (rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();}
            xywh {114 40 25 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Browser JackCo {
            label {Output Ports}
            xywh {10 72 235 138} type Multi selection_color 0 labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
          Fl_Check_Button D_IJ_Connect {
            label {Auto Connect In}
            callback {rkr->aconnect_JIA=(int) o->value();
if (rkr->aconnect_JIA) JackIn->activate();
else JackIn->deactivate();}
            xywh {104 228 25 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Browser JackIn {
            label {Input Ports}
            xywh {10 259 235 131} type Multi selection_color 0 labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
        }
        Fl_Group MISC_SET {
          label Misc
          user_data 1
          xywh {5 26 630 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
        } {
          Fl_Box Fondo10 {
            xywh {5 26 630 502}
          }
          Fl_Input Username {
            label {Username:}
            callback {rkr->UserRealName=(char*) o->value();}
            xywh {80 32 240 21} labelsize 11 labelcolor 7 textsize 11 textcolor 7
          }
          Fl_Check_Button MES_DIS {
            label {Disable Warnings    }
            callback {rkr->mess_dis=(int) o->value();}
            xywh {132 68 21 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button T_TIMEOUT {
            label {Tap Tempo Timeout}
            callback {rkr->t_timeout=(int) o->value();}
            xywh {132 88 21 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
          Fl_Check_Button ENA_TOOL {
            label {Enable Tooltips       }
            callback {rkr->ena_tool=(int) o->value();
Fl_Tooltip::enable(rkr->ena_tool);}
            xywh {132 108 21 20} down_box DOWN_BOX labelsize 11 labelcolor 7 align 4
          }
        }
        Fl_Group BANK_SET {
          label Bank
          user_data 1
          xywh {5 26 630 502} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
        } {
          Fl_Box Fondo11 {
            xywh {5 26 630 502}
          }
          Fl_File_Input BFiname {
            label {Bank Filename}
            xywh {20 50 390 30} labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
          Fl_Button BF_Browser {
            label Browse
            user_data 77
            callback {char *filename;
filename=fl_file_chooser("Browse:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
BFiname->value(filename);
strcpy(rkr->BankFilename,filename);}
            xywh {415 60 65 20}
          }
          Fl_File_Input Udir {
            label {User Directory}
            xywh {20 102 390 30} labelsize 11 labelcolor 7 align 5 textsize 12 textcolor 7
          }
          Fl_Button UD_Browser {
            label Browse
            user_data 77
            callback {char *dir;
dir=fl_dir_chooser("Browse:",NULL,0);
if (dir==NULL) return;
Udir->value(dir);
strcpy(rkr->UDirFilename,dir);
ScanDir();}
            xywh {415 112 65 20}
          }
        }
      }
    }
    Fl_Window MIDILearn {
      callback {CancelRec->do_callback();
save_stat(5);
MIDILearn->hide();}
      xywh {1279 49 640 480} type Double hide
    } {
      Fl_Box Fondo4 {
        xywh {1 1 640 480}
      }
      Fl_Browser Epar {
        user_data 99
        callback {DisAssigns();}
        xywh {10 58 201 348} type Hold textcolor 7
      }
      Fl_Button GMM {
        label {Get MIDI Message}
        user_data 77
        callback {rkr->ControlGet=0;
rkr->CountWait=0;
rkr->RControl=1;}
        xywh {10 445 135 30}
      }
      Fl_Browser TPresets {
        xywh {430 61 201 348} type Hold when 3 textcolor 7
      }
      Fl_Button CopyF {
        label {Copy from: }
        user_data 77
        callback {memcpy(rkr->XUserMIDI,rkr->Bank[TPresets->value()].XUserMIDI,sizeof(rkr->XUserMIDI));

DisAssigns();}
        xywh {430 20 95 30}
      }
      Fl_Button CopyT {
        label {Copy to: }
        user_data 77
        callback {memcpy(rkr->Bank[TPresets->value()].XUserMIDI,rkr->XUserMIDI, sizeof(rkr->XUserMIDI));}
        xywh {535 20 95 30}
      }
      Fl_Group Ares {
        xywh {215 60 205 180} box THIN_DOWN_BOX align 80
      } {
        Fl_Box Ar1 {
          xywh {220 65 45 30} box DOWN_BOX
        }
        Fl_Box Ar2 {
          xywh {270 65 45 30} box DOWN_BOX
        }
        Fl_Box Ar3 {
          xywh {320 65 45 30} box DOWN_BOX
        }
        Fl_Box Ar4 {
          xywh {370 65 45 30} box DOWN_BOX
        }
        Fl_Box Ar5 {
          xywh {220 100 45 30} box DOWN_BOX
        }
        Fl_Box Ar6 {
          xywh {270 100 45 30} box DOWN_BOX
        }
        Fl_Box Ar7 {
          xywh {320 100 45 30} box DOWN_BOX
        }
        Fl_Box Ar8 {
          xywh {370 100 45 30} box DOWN_BOX
        }
        Fl_Box Ar9 {
          xywh {220 135 45 30} box DOWN_BOX
        }
        Fl_Box Ar10 {
          xywh {270 135 45 30} box DOWN_BOX
        }
        Fl_Box Ar11 {
          xywh {320 135 45 30} box DOWN_BOX
        }
        Fl_Box Ar12 {
          xywh {370 135 45 30} box DOWN_BOX
        }
        Fl_Box Ar13 {
          xywh {220 170 45 30} box DOWN_BOX
        }
        Fl_Box Ar14 {
          xywh {270 170 45 30} box DOWN_BOX
        }
        Fl_Box Ar15 {
          xywh {320 170 45 30} box DOWN_BOX
        }
        Fl_Box Ar16 {
          xywh {370 170 45 30} box DOWN_BOX
        }
        Fl_Box Ar17 {
          xywh {220 205 45 30} box DOWN_BOX
        }
        Fl_Box Ar18 {
          xywh {270 205 45 30} box DOWN_BOX
        }
        Fl_Box Ar19 {
          xywh {320 205 45 30} box DOWN_BOX
        }
        Fl_Box Ar20 {
          xywh {370 205 45 30} box DOWN_BOX
        }
      }
      Fl_Button ClearA {
        label {Clear Assignements}
        user_data 77
        callback {int i, j,k;
int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(i=0; i<128; i++)
  {
    for(j=0;j<20;j++)
      {
         if (rkr->XUserMIDI[i][j] == the_one)
           {
             for(k=j+1;k<20;k++) rkr->XUserMIDI[i][k-1]=rkr->XUserMIDI[i][k];
             rkr->XUserMIDI[i][19]=0;             
           }
       
       }  
   }
   
DisAssigns();}
        xywh {245 250 150 30}
      }
      Fl_Button ClearP {
        label {Clear Preset}
        user_data 77
        callback {memset(rkr->XUserMIDI, 0, sizeof(rkr->XUserMIDI));
DisAssigns();}
        xywh {245 285 150 30}
      }
      Fl_Button Assign {
        label Assign
        user_data 77
        callback {int i;

int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(i=0;i<20;i++)

 {
    if(rkr->XUserMIDI[(int)Disp_Control->value()][i] == the_one) return;

    if(rkr->XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         rkr->XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
 
DisAssigns();}
        xywh {112 20 98 30}
      }
      Fl_Button AssignA {
        label {Assign to All}
        user_data 77
        callback {int i,j;
int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(j=1;j<61;j++)

{
for(i=0;i<20;i++)

 {
    if(rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] == the_one) break;

    if(rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
} 

Assign->do_callback();}
        xywh {10 20 98 30}
      }
      Fl_Button CancelRec {
        label Cancel
        user_data 77
        callback {rkr->RControl = 0;
GMM->color(fore_color);
GMM->redraw();}
        xywh {200 450 60 20}
      }
      Fl_Value_Input Disp_Control {
        callback {if(o->value()> 127) o->value(127);
if(o->value()< 1) o->value(1);}
        xywh {155 445 40 30} minimum 1 maximum 127 step 1 value 1 textcolor 7
      }
      Fl_Button CopyTAll {
        label {Copy to All}
        user_data 77
        callback {int i;
for(i=1;i<61;i++) memcpy(rkr->Bank[i].XUserMIDI,rkr->XUserMIDI, sizeof(rkr->XUserMIDI));}
        xywh {480 412 150 30}
      }
      Fl_Button CloseML {
        label Close
        user_data 77
        callback {MIDILearn->do_callback();}
        xywh {480 445 150 30}
      }
      Fl_Group Filters_ML {
        xywh {10 410 200 31} box DOWN_BOX
      } {
        Fl_Button M_fil_all {
          label All
          callback {rkr->ML_filter=0;
FillML(0);}
          xywh {16 415 89 20} type Radio
        }
        Fl_Button M_fil_current {
          label Current
          callback {rkr->ML_filter=1;
FillML(0);}
          xywh {113 415 89 20} type Radio
        }
      }
    }
    Fl_Window AboutWin {
      label {About Rakarrack}
      callback {AboutWin->hide();}
      xywh {811 82 375 235} type Double color 36 hide
    } {
      Fl_Box AB_Title {
        label Rakarrack
        xywh {56 4 259 41} labelfont 1 labelsize 40 labelcolor 7
      }
      Fl_Box AB_SubTitle {
        label {Audio F/X}
        xywh {121 39 130 22} labelfont 1 labelsize 16 labelcolor 7
      }
      Fl_Box About_Version {
        xywh {69 60 233 15} labelsize 12 labelcolor 7 align 16
      }
      Fl_Box AB_url {
        label {http://rakarrack.sourceforge.net}
        xywh {68 77 234 22} labelfont 1 labelsize 13 labelcolor 6
      }
      Fl_Box AB_Authors {
        label {Copyrigth Josep Andreu Ryan Billing Douglas McClendon Arnout Engelen <2007 - 2010>}
        xywh {20 96 345 26} labelfont 1 labelsize 8 labelcolor 7 align 128
      }
      Fl_Box AB_A1 {
        label {Code of some effects and structure based on ZynAddSubFx by Paul Nasca Octavian}
        xywh {44 125 281 26} labelfont 1 labelsize 8 labelcolor 7 align 128
      }
      Fl_Box AB_A2 {
        label {Code of Tuner taked from tuneit by Mario Lang}
        xywh {66 172 240 15} labelfont 1 labelsize 8 labelcolor 7
      }
      Fl_Box AB_A3 {
        label {Code of Compressor based in ArtsCompresor by Matthias Kretz & Stefan Westerfeld}
        xywh {84 185 219 24} labelfont 1 labelsize 8 labelcolor 7 align 128
      }
      Fl_Button {} {
        label LICENSE
        callback {show_lic();}
        xywh {48 215 92 16} labelsize 10
      }
      Fl_Button {} {
        label OK
        callback {AboutWin->hide();}
        xywh {276 215 92 16} labelsize 10
      }
      Fl_Box AB_A4 {
        label {Code of some effects based on swh-plugins LADSPA by Steve Harris}
        xywh {64 151 250 20} labelfont 1 labelsize 8 labelcolor 7 align 128
      }
    }
    Fl_Window Trigger {
      callback {rkr->ACI_Bypass=0;
Trigger->hide();
save_stat(6);}
      xywh {1991 171 205 165} type Double hide
    } {
      Fl_Box Fondo5 {
        xywh {0 1 210 164}
      }
      Fl_Box ACI_LABEL {
        label {Analog Control}
        xywh {25 8 135 24} labelfont 1 labelcolor 7
      }
      Fl_Slider aux_vu {
        xywh {5 18 16 144} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
        class NewVum
      }
      Fl_Choice aux_source {
        label Source
        callback {rkr->Aux_Source = (int) o->value();}
        xywh {100 37 50 17} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
      } {
        MenuItem {} {
          label Aux
          xywh {40 40 45 26} labelsize 10
        }
        MenuItem {} {
          label L
          xywh {40 40 45 26} labelsize 10
        }
        MenuItem {} {
          label R
          xywh {30 30 36 21} labelsize 10
        }
      }
      Fl_Value_Slider aux_gain {
        label Gain
        callback {rkr->Aux_Gain = (int)o->value();}
        xywh {99 59 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 textcolor 7
        class SliderW
      }
      Fl_Value_Slider aux_thres {
        label Threshold
        callback {rkr->Aux_Threshold = (int) o->value();}
        xywh {100 75 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 textcolor 7
        class SliderW
      }
      Fl_Value_Input aux_midi {
        label {Midi Control}
        callback {if(o->value()> 127) o->value(127);
if(o->value()< 1) o->value(1);
rkr->Aux_MIDI = (int)o->value();}
        xywh {98 96 39 22} labelsize 10 labelcolor 7 minimum 1 maximum 127 step 1 value 1 textsize 10
      }
      Fl_Value_Slider aux_min {
        label Minimum
        callback {rkr->Aux_Minimum = (int) o->value();}
        xywh {100 130 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
        class SliderW
      }
      Fl_Value_Slider aux_max {
        label Maximum
        callback {rkr->Aux_Maximum = (int) o->value();}
        xywh {100 150 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 value 127 textcolor 7
        class SliderW
      }
    }
    code {char tmp[64];
sprintf(tmp,"Version %s",VERSION);
About_Version->copy_label(tmp);} {}
  }
  Function {RKRGUI(int argc, char**argv,RKR *rkr_)} {open C
  } {
    code {Fl::args(argc,argv);
fl_open_display();
XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)icono_rakarrack_128x128,&p ,&mask, NULL);

Fl::visual(FL_DOUBLE|FL_RGB);
fl_register_images();
Fl::set_fonts(0);
rkr=rkr_;

mBankNameList = NULL;
mBankNameListTail = NULL;

back = NULL;
old = NULL;
make_window();

Principal->icon((char *)p);
BankWindow->icon((char *)p);
Order->icon((char *)p);
Settings->icon((char *)p);
AboutWin->icon((char *)p);
MIDILearn->icon((char *)p);
Trigger->icon((char *)p);

last_tecla=0;
made=0;
char tmp[256];
drag=1000;
nt=0;
at=0;
tta=0;
Analyzer_ON=0;
Scope_ON=0;

Sco->init(rkr->anall, rkr->analr, rkr->period);
Analy->init(rkr->anall, rkr->analr, rkr->period, rkr->sample_rate);

memset(tmp,0, sizeof(tmp));
if(filetoload != NULL)
{
  sprintf(tmp,"Session: %s",filetoload); 
}
  else
{
  sprintf(tmp,"%s   v%s",rkr->jackcliname,VERSION); 
}
 
Principal->copy_label(tmp);
BankWin_Label(rkr->BankFilename);
memset(tmp,0, sizeof(tmp));
sprintf(tmp,"%s   v%s - Effects Order",rkr->jackcliname,VERSION);
Order->copy_label(tmp);
memset(tmp,0, sizeof(tmp));
sprintf(tmp,"%s   v%s - Settings",rkr->jackcliname,VERSION);
Settings->copy_label(tmp);
sprintf(tmp,"%s   v%s - MIDI Learn",rkr->jackcliname,VERSION);
MIDILearn->copy_label(tmp);
sprintf(tmp,"%s   v%s - ACI",rkr->jackcliname,VERSION);
Trigger->copy_label(tmp);


load_stat();
make_table_window();
Put_Loaded();
Principal->show(argc,argv);
put_icon(Principal);
ReadIntPresets();
if(rkr->deachide) HideUE->label("Show");else HideUE->label("Hide");
HideUE->redraw();


void * v=MT;
Fl::add_timeout(.04,tick,v);
Fl::add_handler(prevnext);
install_signal_handlers();} {}
  }
  Function {Background_Color_Change(Fl_Color bcolor)} {} {
    code {MenuP->color(bcolor);
MenuB->color(bcolor);

back_color = bcolor;

Label_Color_Change(label_color);
if(!rkr->EnableBackgroundImage) back->color_average(back_color,0.0);} {}
  }
  Function {Label_Color_Change(Fl_Color bcolor)} {open
  } {
    code {label_color = bcolor;
chfsize(0);


for (int t=0; t<STabs->children();t++)
  {
   Fl_Widget *tabg = STabs->child(t);
        tabg->labelcolor(label_color);  
        tabg->selection_color(back_color);
        tabg->color(fore_color);   

   long long ud = (long long) tabg->user_data();

  if(ud==1)
  {
  
  Fl_Group *g = (Fl_Group *)tabg;     
      
     for(int i=0;i<g->children();i++)
       {
 
       Fl_Widget *w = g->child(i);

        w->labelcolor(label_color);  
        w->selection_color(back_color);
        w->color(fore_color);   
       }
   }
  }

for (int t=0; t<BankWindow->children();t++)
  {
    Fl_Widget *w = BankWindow->child(t);

     w->labelcolor(label_color);  
  }  


for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);

     w->labelcolor(label_color);  
  }  


for (int t=0; t<Order->children();t++)
  {
    Fl_Widget *w = Order->child(t);

     w->labelcolor(label_color);  
     w->selection_color(back_color);
     w->color(fore_color);
  }  

for (int t=0; t<Filters->children();t++)
  {
    Fl_Widget *w = Filters->child(t);

     w->labelcolor(label_color);  
     w->selection_color(back_color);
     w->color(fore_color);
  }  
    

for (int t=0; t<MIDILearn->children();t++)
  {
    Fl_Widget *w = MIDILearn->child(t);

     w->labelcolor(label_color);  
     w->selection_color(back_color);
     w->color(fore_color);
  }  

Font_Bro->textcolor(label_color);
ACI_LABEL->labelcolor(fl_lighter(label_color));
aux_source->labelcolor(label_color);
aux_midi->labelcolor(label_color);

Fl::redraw();} {}
  }
  Function {Buttons_Color_Change(Fl_Color bcolor)} {} {
    code {if (made)
{
for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp > 0) w->color(bcolor); 
  }

B_B1->color(bcolor);
B_B2->color(bcolor);
B_B3->color(bcolor);
B_B4->color(bcolor);
CH_UB->color(bcolor);

}


 fore_color= bcolor;
 aux_source->color(bcolor);
 Label_Color_Change(label_color);} {}
  }
  Function {Leds_Color_Change(Fl_Color bcolor)} {} {
    code {leds_color=bcolor;
chfsize(0);} {}
  }
  Function {put_icon(Fl_Window* window)} {} {
    code {if (hints == NULL)
hints = XGetWMHints(fl_display, fl_xid(window));

hints->icon_pixmap=p;
hints->icon_mask=mask; 
hints->flags = IconPixmapHint | IconMaskHint;
XSetWMHints(fl_display, fl_xid(window), hints);} {}
  }
  Function {load_stat()} {open
  } {
    code {int x,y,w,h,k,b,f,l,a;

Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

rakarrack.get(rkr->PrefNom("Principal X"),x,1);
rakarrack.get(rkr->PrefNom("Principal Y"),y,1);
rakarrack.get(rkr->PrefNom("Principal W"),w,800);
rkr->resolution=w;
rakarrack.get(rkr->PrefNom("Principal H"),h,600);

char tmp[256];
sprintf (tmp, "%s/bg.png", DATADIR);

rakarrack.get(rkr->PrefNom("Enable Background Image"),rkr->EnableBackgroundImage,1);
rakarrack.get(rkr->PrefNom("Background Image"),rkr->BackgroundImage,tmp,256);
PutBackground();
rakarrack.get(rkr->PrefNom("FontSize"),rkr->relfontsize,0);
if( rkr->relfontsize!=0) chfsize(rkr->relfontsize);
rakarrack.get(rkr->PrefNom("Font"),rkr->font,0);

rakarrack.get(rkr->PrefNom("Background Color"),b, 774778368);
rakarrack.get(rkr->PrefNom("Foreground Color"),f,1602392832);
rakarrack.get(rkr->PrefNom("Leds Color"),l, -13485824);
rakarrack.get(rkr->PrefNom("Labels Color"),a, -1075849984);
rakarrack.get(rkr->PrefNom("Schema"), k,0);
scheme_ch->value(k);
scheme_ch->do_callback();
rakarrack.get(rkr->PrefNom("Hide Effects"), rkr->deachide,0);




Principal->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("BankWindow X"),x,1);
rakarrack.get(rkr->PrefNom("BankWindow Y"),y,1);
rakarrack.get(rkr->PrefNom("BankWindow W"),w,800);
rakarrack.get(rkr->PrefNom("BankWindow H"),h,600);

BankWindow->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("Order X"),x,1);
rakarrack.get(rkr->PrefNom("Order Y"),y,1);
rakarrack.get(rkr->PrefNom("Order W"),w,600);
rakarrack.get(rkr->PrefNom("Order H"),h,480);

Order->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("MIDI Learn X"),x,1);
rakarrack.get(rkr->PrefNom("MIDI Learn Y"),y,1);
rakarrack.get(rkr->PrefNom("MIDI Learn W"),w,640);
rakarrack.get(rkr->PrefNom("MIDI Learn H"),h,480);

MIDILearn->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("Trigger X"),x,1);
rakarrack.get(rkr->PrefNom("Trigger Y"),y,1);
rakarrack.get(rkr->PrefNom("Trigger W"),w,205);
rakarrack.get(rkr->PrefNom("Trigger H"),h,165);

if(h<165) h= 165;

Trigger->resize(x,y,w,h);



rakarrack.get(rkr->PrefNom("Settings X"),x,1);
rakarrack.get(rkr->PrefNom("Settings Y"),y,1);
rakarrack.get(rkr->PrefNom("Settings W"),w,640);
rakarrack.get(rkr->PrefNom("Settings H"),h,528);

if (w<640) w=640;
if (h<528) h=528;

Settings->resize(x,y,w,h);


back_color=(Fl_Color)b;
fore_color=(Fl_Color)f;
leds_color=(Fl_Color)l;
label_color=(Fl_Color)a;

Background_Color_Change(back_color);
Buttons_Color_Change(fore_color);
Leds_Color_Change(leds_color);
Label_Color_Change(label_color);

rakarrack.get(rkr->PrefNom("Bank Selected"), rkr->a_bank,3);

if (!needtoloadbank)
{

switch(rkr->a_bank)
{
 
       case 0:
       L_B1->do_callback();
       break;

       case 1:
       L_B2->do_callback();
       break;
     
       case 2:
       L_B3->do_callback();
       break;
} 
} 
 
if (!commandline)
{

rakarrack.get(rkr->PrefNom("Preset Num"),k ,1);
rkr->Selected_Preset=k;
Preset_Counter->value(k);
Preset_Counter->do_callback();
}

rakarrack.get(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway,0); 
if(!rkr->MIDIway) ML_Menu->deactivate();

rakarrack.get(rkr->PrefNom("MIDI Table"),rkr->midi_table,0); 
if(!rkr->midi_table) scroll->deactivate();


rakarrack.get(rkr->PrefNom("UserName"),rkr->UserRealName,"",127);
rakarrack.get(rkr->PrefNom("User Directory"),rkr->UDirFilename,DATADIR,127);
rakarrack.get(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol,0);
rakarrack.get(rkr->PrefNom("Metronome Volume"),rkr->Metro_Vol,50);
rkr->efx_Looper->setmvol(rkr->Metro_Vol);

rakarrack.get(rkr->PrefNom("Update Tap"),rkr->Tap_Updated,0);
rakarrack.get(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh,1);
rkr->MidiCh--;

rakarrack.get(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh,1);
rkr->HarCh--;
rakarrack.get(rkr->PrefNom("Limiter Position"),rkr->flpos,0);
rakarrack.get(rkr->PrefNom("Limiter +6dB"),rkr->db6booster,0);
rakarrack.get(rkr->PrefNom("Booster"),rkr->booster,1.0f);
if (rkr->booster==1.0) BostBut->value(0); else BostBut->value(1);


rakarrack.get(rkr->PrefNom("FX_init_state"),rkr->init_state,0);
rakarrack.get(rkr->PrefNom("Auto Assign"),rkr->autoassign,0);





if(rkr->init_state)
{
  if(!needtoloadstate) rkr->Bypass=1;
  rkr->calculavol(1);
  rkr->calculavol(2);
}  


rakarrack.get(rkr->PrefNom("Recognize Optimization"),rkr->RCOpti,0);
RC_Opti->value(rkr->RCOpti);
RC_Opti->do_callback();


//MIDIConverter

rakarrack.get(rkr->PrefNom("Midi Out Channel"),k,1);
Midi_out_Counter->value(k);
Midi_out_Counter->do_callback();

rkr->efx_MIDIConverter->setmidichannel(k);
 
rakarrack.get(rkr->PrefNom("Trigger Adjust"),k,4);
Trig_Adj->value(k);
rkr->efx_MIDIConverter->setTriggerAdjust(k);


rakarrack.get(rkr->PrefNom("Velocity Adjust"),k,50);
Vel_Adj->value(k);
rkr->efx_MIDIConverter->setVelAdjust(k);

rakarrack.get(rkr->PrefNom("Converter Octave"),k,2);
MIDIOctave->value(k);
MIDIOctave->do_callback();

rakarrack.get(rkr->PrefNom("MIDI Converter On/Off"),k,0);
midi_activar->value(k);
midi_activar->do_callback();

//Metronome

rakarrack.get(rkr->PrefNom("Internal Metronome Time"),k,2);
MetroBar->value(k);
MetroBar->do_callback();

rakarrack.get(rkr->PrefNom("Internal Metronome Sound"),k,0);
MetroSound->value(k);
MetroSound->do_callback();

rakarrack.get(rkr->PrefNom("Internal Metronome Volume"),k,50);
Metro_Volume->value(k);
Metro_Volume->do_callback();

rakarrack.get(rkr->PrefNom("Internal Metronome Tempo"),k,100);
Metro_Tempo->value(k);
Metro_Tempo->do_callback();

rakarrack.get(rkr->PrefNom("Internal Metronome Show"),rkr->sw_stat,0);

rakarrack.get(rkr->PrefNom("Internal Metronome On/Off"),k,0);
metro_activar->value(k);
metro_activar->do_callback();

if(rkr->sw_stat==1) 
{ 
  Midi->hide();
  Metro->show();
}
else
 {
  Metro->hide();
  Midi->show();
 }

//Tuner

rakarrack.get(rkr->PrefNom("Tuner On/Off"),k,0);
tuner_activar->value(k);
tuner_activar->do_callback();


//Tap Tempo

rakarrack.get(rkr->PrefNom("TapTempo Input"),rkr->Tap_Selection,0);
T_SEL->value(rkr->Tap_Selection);
rakarrack.get(rkr->PrefNom("Tap Tempo Timeout"),rkr->t_timeout,0);
T_TIMEOUT->value(rkr->t_timeout);
rakarrack.get(rkr->PrefNom("TapTempo Set"),rkr->Tap_SetValue,0);
T_SET->value(rkr->Tap_SetValue);

rakarrack.get(rkr->PrefNom("TapTempo On/Off"),k,0);
Tap_activar->value(k);
Tap_activar->do_callback();



rakarrack.get(rkr->PrefNom("Disable Warnings"),rkr->mess_dis,0);
rakarrack.get(rkr->PrefNom("Enable Tooltips"),rkr->ena_tool,1);
Fl_Tooltip::enable(rkr->ena_tool);

//Trigger

rakarrack.get(rkr->PrefNom("Aux Source"),rkr->Aux_Source,0);
aux_source->value(rkr->Aux_Source);
rakarrack.get(rkr->PrefNom("Aux Gain"),rkr->Aux_Gain,0);
aux_gain->value(rkr->Aux_Gain);
rakarrack.get(rkr->PrefNom("Aux Threshold"),rkr->Aux_Threshold,0);
aux_thres->value(rkr->Aux_Threshold);
rakarrack.get(rkr->PrefNom("Aux MIDI"),rkr->Aux_MIDI,1);
aux_midi->value(rkr->Aux_MIDI);
rakarrack.get(rkr->PrefNom("Aux Minimum"),rkr->Aux_Minimum,0);
aux_min->value(rkr->Aux_Minimum);
rakarrack.get(rkr->PrefNom("Aux Maximum"),rkr->Aux_Maximum,127);
aux_max->value(rkr->Aux_Maximum);


char temp[64];


for(int i=0; i<128; i++)
{
if(i<60) k=i;
if((i>59)&&(i<120))k=1000+i-60;
if(i>119) k=0;
memset(temp,0,sizeof(temp));
sprintf(temp, "Midi Table Program %d",i);
rakarrack.get(rkr->PrefNom(temp),f,k);



if(f<1000) 
{
rkr->M_table[i].bank=0;
rkr->M_table[i].preset=f;
}

if((f>999) && (f<2000)) 
{
rkr->M_table[i].bank=1;
rkr->M_table[i].preset=f-1000;
}

if((f>1999) && (f<3000))
{
rkr->M_table[i].bank=2;
rkr->M_table[i].preset=f-2000;
}


if((f>2999) && (f<4000))
{
rkr->M_table[i].bank=3;
rkr->M_table[i].preset=f-3000;
}


}} {}
  }
  Function {save_stat(int whati)} {open
  } {
    code {int i,k;
char temp1[128];

Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (whati==0)
{
rakarrack.set(rkr->PrefNom("Principal X"),Principal->x());
rakarrack.set(rkr->PrefNom("Principal Y"),Principal->y());
rakarrack.set(rkr->PrefNom("Principal W"),Principal->w());
rakarrack.set(rkr->PrefNom("Principal H"),Principal->h());
rakarrack.set(rkr->PrefNom("FontSize"), rkr->relfontsize);
rakarrack.set(rkr->PrefNom("Font"), rkr->font);

rakarrack.set(rkr->PrefNom("Background Color"), (int)back_color);
rakarrack.set(rkr->PrefNom("Foreground Color"), (int)fore_color);
rakarrack.set(rkr->PrefNom("Leds Color"), (int) leds_color);
rakarrack.set(rkr->PrefNom("Labels Color"),(int) label_color);
rakarrack.set(rkr->PrefNom("Schema"), (int) scheme_ch->value());
rakarrack.set(rkr->PrefNom("Hide Effects"), (int) rkr->deachide);


rakarrack.set(rkr->PrefNom("Bank Selected"),rkr->a_bank);

if ((Preset_Counter->value() >0) && (Preset_Counter->value() < 61))

rakarrack.set(rkr->PrefNom("Preset Num"),(int) Preset_Counter->value());

if (rkr->help_displayed)
{

rakarrack.set(rkr->PrefNom("Help X"),visor->x());
rakarrack.set(rkr->PrefNom("Help Y"),visor->y());
rakarrack.set(rkr->PrefNom("Help W"),visor->w());
rakarrack.set(rkr->PrefNom("Help H"),visor->h());
rakarrack.set(rkr->PrefNom("Help TextSize"),visor->textsize());
}

//Tuner

rakarrack.set(rkr->PrefNom("Tuner On/Off"),(int) rkr->Tuner_Bypass);


//MIDIConverter

rakarrack.set(rkr->PrefNom("MIDI Converter On/Off"),(int) rkr->MIDIConverter_Bypass);
rakarrack.set(rkr->PrefNom("Midi Out Channel"),(int)Midi_out_Counter->value()); 
rakarrack.set(rkr->PrefNom("Trigger Adjust"),(int)Trig_Adj->value());
rakarrack.set(rkr->PrefNom("Velocity Adjust"),(int)Vel_Adj->value());
rakarrack.set(rkr->PrefNom("Converter Octave"),(int)MIDIOctave->value());

//Metronome
rakarrack.set(rkr->PrefNom("Internal Metronome On/Off"),(int)rkr->Metro_Bypass); 
rakarrack.set(rkr->PrefNom("Internal Metronome Time"),(int)MetroBar->value()); 
rakarrack.set(rkr->PrefNom("Internal Metronome Volume"),(int)Metro_Volume->value());
rakarrack.set(rkr->PrefNom("Internal Metronome Tempo"),(int)Metro_Tempo->value());
rakarrack.set(rkr->PrefNom("Internal Metronome Show"),(int)rkr->sw_stat);
rakarrack.set(rkr->PrefNom("Internal Metronome Sound"),(int)MetroSound->value());

//Booster
rakarrack.set(rkr->PrefNom("Booster"),rkr->booster);


//Tap Tempo
rakarrack.set(rkr->PrefNom("TapTempo On/Off"),(int)rkr->Tap_Bypass); 
rakarrack.set(rkr->PrefNom("TapTempo Input"),(int)rkr->Tap_Selection); 
rakarrack.set(rkr->PrefNom("TapTempo Set"),(int)rkr->Tap_SetValue); 



}


if (whati==1)
{
rakarrack.set(rkr->PrefNom("BankWindow X"),BankWindow->x());
rakarrack.set(rkr->PrefNom("BankWindow Y"),BankWindow->y());
rakarrack.set(rkr->PrefNom("BankWindow W"),BankWindow->w());
rakarrack.set(rkr->PrefNom("BankWindow H"),BankWindow->h());


}

if (whati==5)
{
rakarrack.set(rkr->PrefNom("MIDI Learn X"),MIDILearn->x());
rakarrack.set(rkr->PrefNom("MIDI Learn Y"),MIDILearn->y());
rakarrack.set(rkr->PrefNom("MIDI Learn W"),MIDILearn->w());
rakarrack.set(rkr->PrefNom("MIDI Learn H"),MIDILearn->h());
}


if (whati==6)
{
rakarrack.set(rkr->PrefNom("Trigger X"),Trigger->x());
rakarrack.set(rkr->PrefNom("Trigger Y"),Trigger->y());
rakarrack.set(rkr->PrefNom("Trigger W"),Trigger->w());
rakarrack.set(rkr->PrefNom("Trigger H"),Trigger->h());

rakarrack.set(rkr->PrefNom("Aux Source"),rkr->Aux_Source);
rakarrack.set(rkr->PrefNom("Aux Gain"),rkr->Aux_Gain);
rakarrack.set(rkr->PrefNom("Aux Threshold"),rkr->Aux_Threshold);
rakarrack.set(rkr->PrefNom("Aux MIDI"),rkr->Aux_MIDI);
rakarrack.set(rkr->PrefNom("Aux Minimum"),rkr->Aux_Minimum);
rakarrack.set(rkr->PrefNom("Aux Maximum"),rkr->Aux_Maximum);

}




if (whati==2)
{
rakarrack.set(rkr->PrefNom("Order X"),Order->x());
rakarrack.set(rkr->PrefNom("Order Y"),Order->y());
rakarrack.set(rkr->PrefNom("Order W"),Order->w());
rakarrack.set(rkr->PrefNom("Order H"),Order->h());
}

if (whati==3)
{
rakarrack.set(rkr->PrefNom("Settings X"),Settings->x());
rakarrack.set(rkr->PrefNom("Settings Y"),Settings->y());
rakarrack.set(rkr->PrefNom("Settings W"),Settings->w());
rakarrack.set(rkr->PrefNom("Settings H"),Settings->h());
}

if((whati==3) || (whati==0))
{
rakarrack.set(rkr->PrefNom("UserName"),rkr->UserRealName);
rakarrack.set(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol);
rakarrack.set(rkr->PrefNom("Metronome Volume"),rkr->Metro_Vol);


rakarrack.set(rkr->PrefNom("Filter DC Offset"),rkr->DC_Offset);

rakarrack.set(rkr->PrefNom("Update Tap"),rkr->Tap_Updated);
rakarrack.set(rkr->PrefNom("Limiter Position"),rkr->flpos);
rakarrack.set(rkr->PrefNom("Limiter +6dB"),rkr->db6booster);

rakarrack.set(rkr->PrefNom("Recognize Optimization"),rkr->RCOpti);
rakarrack.set(rkr->PrefNom("Harmonizer Downsample"),rkr->Har_Down);
rakarrack.set(rkr->PrefNom("Harmonizer Up Quality"),rkr->Har_U_Q);
rakarrack.set(rkr->PrefNom("Harmonizer Down Quality"),rkr->Har_D_Q);
rakarrack.set(rkr->PrefNom("Reverbtron Downsample"),rkr->Rev_Down);
rakarrack.set(rkr->PrefNom("Reverbtron Up Quality"),rkr->Rev_U_Q);
rakarrack.set(rkr->PrefNom("Reverbtron Down Quality"),rkr->Rev_D_Q);
rakarrack.set(rkr->PrefNom("Convolotron Downsample"),rkr->Con_Down);
rakarrack.set(rkr->PrefNom("Convolotron Up Quality"),rkr->Con_U_Q);
rakarrack.set(rkr->PrefNom("Convolotron Down Quality"),rkr->Con_D_Q);
rakarrack.set(rkr->PrefNom("Sequence Downsample"),rkr->Seq_Down);
rakarrack.set(rkr->PrefNom("Sequence Up Quality"),rkr->Seq_U_Q);
rakarrack.set(rkr->PrefNom("Sequence Down Quality"),rkr->Seq_D_Q);
rakarrack.set(rkr->PrefNom("Shifter Downsample"),rkr->Shi_Down);
rakarrack.set(rkr->PrefNom("Shifter Up Quality"),rkr->Shi_U_Q);
rakarrack.set(rkr->PrefNom("Shifter Down Quality"),rkr->Shi_D_Q);
rakarrack.set(rkr->PrefNom("Vocoder Downsample"),rkr->Voc_Down);
rakarrack.set(rkr->PrefNom("Vocoder Up Quality"),rkr->Voc_U_Q);
rakarrack.set(rkr->PrefNom("Vocoder Down Quality"),rkr->Voc_D_Q);
rakarrack.set(rkr->PrefNom("StereoHarm Downsample"),rkr->Ste_Down);
rakarrack.set(rkr->PrefNom("StereoHarm Up Quality"),rkr->Ste_U_Q);
rakarrack.set(rkr->PrefNom("StereoHarm Down Quality"),rkr->Ste_D_Q);

rakarrack.set(rkr->PrefNom("Waveshape Resampling"),(int)Wave_Amo->value());
rakarrack.set(rkr->PrefNom("Waveshape Up Quality"),rkr->Wave_up_q);
rakarrack.set(rkr->PrefNom("Waveshape Down Quality"),rkr->Wave_down_q);
rakarrack.set(rkr->PrefNom("Calibration"),rkr->aFreq);
rakarrack.set(rkr->PrefNom("Recognize Trigger"),rkr->rtrig);

rakarrack.set(rkr->PrefNom("Vocoder Bands"),rkr->VocBands);



rakarrack.set(rkr->PrefNom("FX_init_state"),rkr->init_state);
rakarrack.set(rkr->PrefNom("Auto Assign"),rkr->autoassign);

rakarrack.set(rkr->PrefNom("UpSampling"),(int)UPSAMPLE_C->value());
rakarrack.set(rkr->PrefNom("UpQuality"),(int)Upr_Qual->value());
rakarrack.set(rkr->PrefNom("DownQuality"),(int)Downr_Qual->value());

rakarrack.set(rkr->PrefNom("UpAmount"),(int)Upr_Amo->value());
rakarrack.set(rkr->PrefNom("Looper Size"),L_SIZE->value());



rakarrack.set(rkr->PrefNom("FontSize"),rkr->relfontsize);
rakarrack.set(rkr->PrefNom("Bank Filename"),rkr->BankFilename);
rakarrack.set(rkr->PrefNom("User Directory"),rkr->UDirFilename);

rakarrack.set(rkr->PrefNom("Enable Background Image"),rkr->EnableBackgroundImage);
rakarrack.set(rkr->PrefNom("Background Image"),rkr->BackgroundImage);
rakarrack.set(rkr->PrefNom("Auto Connect MIDI IN"),rkr->aconnect_MI);
rakarrack.set(rkr->PrefNom("Auto Connect Jack"),rkr->aconnect_JA);
rakarrack.set(rkr->PrefNom("Auto Connect Jack In"),rkr->aconnect_JIA);


rakarrack.set(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway);
rakarrack.set(rkr->PrefNom("MIDI Table"),rkr->midi_table);



i = BMidiIn->value();
char *temp;
temp = (char*) BMidiIn->text(i);
if (temp!=NULL)
rakarrack.set(rkr->PrefNom("MIDI IN Device"),temp);
rakarrack.set(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh+1);
rakarrack.set(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh+1);
rakarrack.set(rkr->PrefNom("Harmonizer Quality"),rkr->HarQual);
rakarrack.set(rkr->PrefNom("StereoHarm Quality"),rkr->SteQual);
rakarrack.set(rkr->PrefNom("Tap Tempo Timeout"),rkr->t_timeout);
rakarrack.set(rkr->PrefNom("Disable Warnings"),rkr->mess_dis);
rakarrack.set(rkr->PrefNom("Enable Tooltips"),rkr->ena_tool);



k=1;


for(i=0; i<128;i++)
{
      memset(temp1,0, sizeof(temp1));
      sprintf(temp1, "Midi Table Program %d",i);
      rakarrack.set(rkr->PrefNom(temp1),rkr->M_table[i].bank*1000+rkr->M_table[i].preset);
}


}




if(whati==3)
{


for(i=1; i<=JackCo->size();i++)
{ 
 
  if (JackCo->selected(i))
    {
      memset(temp1,0, sizeof(temp1));
      sprintf(temp1,"Jack Port %d",k);
      rakarrack.set(rkr->PrefNom(temp1),JackCo->text(i));
      k++;
    }
      
}   
      
 rakarrack.set(rkr->PrefNom("Auto Connect Num"),k-1); 
  
k=1;
for(i=1; i<=JackIn->size();i++)
{ 
 
  if (JackIn->selected(i))
    {
      memset(temp1,0, sizeof(temp1));
      sprintf(temp1,"Jack Port In %d",k);
      rakarrack.set(rkr->PrefNom(temp1),JackIn->text(i));
      k++;
    }
      
}   
      
 rakarrack.set(rkr->PrefNom("Auto Connect In Num"),k-1); 
    



}} {}
  }
  Function {Put_Loaded()} {open
  } {
    code {//General
int i;


WPreset_Name->value(rkr->Preset_Name);
DAuthor->copy_label(rkr->Author);

Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
rkr->calculavol(1);
Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
rkr->calculavol(2);
Balance->value((int)(rkr->Fraction_Bypass*100.0));


ActivarGeneral->value(rkr->Bypass);

if (rkr->Bypass==0)
\{

rkr->val_il_sum=-50;
rkr->val_ir_sum=-50;

rkr->val_vl_sum=-50;
rkr->val_vr_sum=-50;

input_vul->value(-50);
input_vur->value(-50);

output_vul->value(-50);
output_vur->value(-50);


\}


/*  Original set and cleared for only the ten current from efx_order[] which did not
    clear other efx from leftover settings. The new behavior will reset all efx to default
    if not used. The reset will occur when the New button is pressed or a new bank is selected.
    If an existing bank repositions an effect, by replacement and then moving it to a new location
    then the settings are kept from previous.
    
    Legacy:
    for(i=0;i<10;i++) \{
    switch(rkr->efx_order[i])\{
*/

for(i=0;i<rkr->NumEffects;i++)
\{
     switch(i)
     \{     

     case 0: //EQ1
     eq_activar->value(rkr->EQ1_Bypass);
     eq_preset->do_callback(eq_preset,1);
     break;

     case 1://Compressor
     compress_activar->value(rkr->Compressor_Bypass);
     compress_preset->do_callback(compress_preset,1);
     break;

     case 2://Distorsion
     dist_activar->value(rkr->Distorsion_Bypass);
     dist_preset->do_callback(dist_preset, 1);
     break;

     case 3://Overdrive
     ovrd_activar->value(rkr->Overdrive_Bypass);
     ovrd_preset->do_callback(ovrd_preset,1);
     break; 

     case 4://Echo
     echo_activar->value(rkr->Echo_Bypass);
     echo_preset->do_callback(echo_preset,1);
     break;
     
     case 5://Chorus
     chorus_activar->value(rkr->Chorus_Bypass);
     chorus_preset->do_callback(chorus_preset,1); 
     break;
     
     case 6://Phaser
     phaser_activar->value(rkr->Phaser_Bypass);
     phaser_preset->do_callback(phaser_preset,1);
     break;  

     case 7://Flanger
     flanger_activar->value(rkr->Flanger_Bypass);
     flanger_preset->do_callback(flanger_preset,1); 
     break;
 
     case 8://Reverb
     reverb_activar->value(rkr->Reverb_Bypass);
     reverb_preset->do_callback(reverb_preset,1);
     break;  

     case 9://EQ2
     eqp_activar->value(rkr->EQ2_Bypass);
     eqp_preset->do_callback(eqp_preset,1);
     break; 
     
     case 10://WahWah
     WhaWha_activar->value(rkr->WhaWha_Bypass);
     WhaWha_preset->do_callback(WhaWha_preset,1);
     break;

     case 11://AlienWah
     Alienwah_activar->value(rkr->Alienwah_Bypass);
     Alienwah_preset->do_callback(Alienwah_preset,1); 
     break;
     
     case 12://Cabinet
     Cabinet_output->value(rkr->lv[13][1]-64);
     Cabinet_preset->value(rkr->lv[13][0]);
     Cabinet_activar->value(rkr->Cabinet_Bypass);
     break;
 
     case 13://Pan
     pan_activar->value(rkr->Pan_Bypass);
     pan_preset->do_callback(pan_preset,1);
     break;
     
     case 14://Har
     har_activar->value(rkr->Harmonizer_Bypass);
     har_preset->do_callback(har_preset,1);
     break;

     case 15://MsicalDelay
     musdelay_activar->value(rkr->MusDelay_Bypass);
     musdelay_preset->do_callback(musdelay_preset,1);
     break; 

     case 16://NoiseGate
     gate_activar->value(rkr->Gate_Bypass);
     gate_preset->do_callback(gate_preset,1);
     break; 

     case 17://NewDist
     newdist_activar->value(rkr->NewDist_Bypass);
     newdist_preset->do_callback(newdist_preset,1);
     break;
     
     case 18://APhaser
     aphaser_activar->value(rkr->APhaser_Bypass);
     aphaser_preset->do_callback(aphaser_preset,1);
     break;

     case 19://Valve
     valve_activar->value(rkr->Valve_Bypass);
     valve_preset->do_callback(valve_preset,1);
     break;

     case 20://Dual_Flange
     dflange_activar->value(rkr->DFlange_Bypass);
     dflange_preset->do_callback(dflange_preset,1);
     break;

     case 21:// Ring
     ring_activar->value(rkr->Ring_Bypass);
     ring_preset->do_callback(ring_preset,1);
     break;  

     case 22:// Exciter
     exciter_activar->value(rkr->Exciter_Bypass);
     exciter_preset->do_callback(exciter_preset,1);
     break; 

     case 23://MBDist
     mbdist_activar->value(rkr->MBDist_Bypass);
     mbdist_preset->do_callback(mbdist_preset,1);
     break;

     case 24://Arpie
     arpie_activar->value(rkr->Arpie_Bypass);
     arpie_preset->do_callback(arpie_preset,1);
     break;

     case 25://Expander
     expander_activar->value(rkr->Expander_Bypass);
     expander_preset->do_callback(expander_preset,1);
     break;

     case 26://Shuffle
     shuffle_activar->value(rkr->Shuffle_Bypass);
     shuffle_preset->do_callback(shuffle_preset,1);
     break;

     case 27://Synthfilter
     synthfilter_activar->value(rkr->Synthfilter_Bypass);
     synthfilter_preset->do_callback(synthfilter_preset,1);
     break; 

     case 28://VaryBand
     mbvvol_activar->value(rkr->MBVvol_Bypass);
     mbvvol_preset->do_callback(mbvvol_preset,1);
     break;

     case 29://Convolotron
     convo_activar->value(rkr->Convol_Bypass);
     convo_preset->do_callback(convo_preset,1);
     break; 

     case 30://Looper
     looper_activar->value(rkr->Looper_Bypass);
     looper_preset->do_callback(looper_preset,1);
     update_looper();
     break;

     case 31://RyanWah
     ryanwah_activar->value(rkr->RyanWah_Bypass);
     ryanwah_preset->do_callback(ryanwah_preset,1);
     break;  
     
     case 32:// RBEcho
     rbecho_activar->value(rkr->RBEcho_Bypass);
     rbecho_preset->do_callback(rbecho_preset,1);
     break;
     
     case 33:// CoilCrafter
     coil_activar->value(rkr->CoilCrafter_Bypass);
     coil_preset->do_callback(coil_preset,1);
     break;

     case 34://ShelfBoost
     shelf_activar->value(rkr->ShelfBoost_Bypass);
     shelf_preset->do_callback(shelf_preset,1);
     break;
     
     case 35://Vocoder
     vo_activar->value(rkr->Vocoder_Bypass);
     vo_preset->do_callback(vo_preset,1);
     break;

     case 36://Sustainer
     sus_activar->value(rkr->Sustainer_Bypass);
     sus_preset->do_callback(sus_preset,1);
     break;
     
    case 37://Sequence
    seq_activar->value(rkr->Sequence_Bypass);
    seq_preset->do_callback(seq_preset,1);
    break;

    case 38://Shifter
    shifter_activar->value(rkr->Shifter_Bypass);
    shifter_preset->do_callback(shifter_preset,1);
    break;

    case 39://StompBox
    stomp_activar->value(rkr->StompBox_Bypass);
    stomp_preset->do_callback(stomp_preset,1);
    break;

    case 40://Reverbtron
    revtron_activar->value(rkr->Reverbtron_Bypass);
    revtron_preset->do_callback(revtron_preset,1);
    break;

    case 41://Echotron
    echotron_activar->value(rkr->Echotron_Bypass);
    echotron_preset->do_callback(echotron_preset,1);
    break;

    case 42://StereoHarm
    shar_activar->value(rkr->StereoHarm_Bypass);
    shar_preset->do_callback(shar_preset,1);
    break; 

    case 43://CompBand
    cband_activar->value(rkr->CompBand_Bypass);
    cband_preset->do_callback(cband_preset,1);
    break;

    case 44://Opticaltrem
    otrem_activar->value(rkr->Opticaltrem_Bypass);
    otrem_preset->do_callback(otrem_preset,1);
    break;

    case 45://Vibe
    vibe_activar->value(rkr->Vibe_Bypass);
    vibe_preset->do_callback(vibe_preset,1);
    break;
    
    case 46://Infinity
    infinity_activar->value(rkr->Infinity_Bypass);
    infinity_preset->do_callback(infinity_preset,1);
    break;

  \}

\}

reordena();} {}
  }
  Function {tick(void* v)} {return_type {static void}
  } {
    code {Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(.04,tick,v);} {}
  }
  Function {preset_click(Fl_Button* o, void* v)} {return_type {static void}
  } {
    code {((RKRGUI*)(o->parent()->parent()->user_data()))->preset_click_i(o,v);} {}
  }
  Function {preset_click_i(Fl_Button* o, void*)} {C return_type {inline void}
  } {
    code {int ok;
int num; 
int tecla = Fl::event_key();
long long kk = (long long) o->user_data();
char temp2[128];


num = (int) kk;


if(drag!=1000)
{
 int en = search_but(Fl::event_x(),Fl::event_y());
 if(en != 1000)
 { 
 rkr->Bank[0]=rkr->Bank[en];
 rkr->Bank[en]=rkr->Bank[num];
 rkr->Bank[num]=rkr->Bank[0];
 Put_Loaded_Bank();
 rkr->modified=1;
 num=en;
 drag = 1000;
 }
}

if((Fl::event_is_click()==0)&&(Fl::event()==5)) 
{
drag = num; 
return;
}
else drag = 1000;

  
if ((Fl::event_button()==3) && (Fl::event()==FL_RELEASE))
{

Fl_Widget *w = ob->child(num-1);


if (strlen(rkr->Bank[num].Preset_Name) >0)
{ 
  Fl_Widget *m = fl_message_icon();
  m->parent()->copy_label(rkr->jackcliname);
  sprintf(temp2,"Overwrite \\"%s\\"?",w->label());
  ok=fl_choice(temp2, "No","Yes", NULL);
 if (!ok)
 { 
 o->value(0);
 o->redraw();
  return;
 }


}
 o->value(0);
 o->redraw();
 rkr->Preset_to_Bank(num);
 w->copy_label(rkr->Preset_Name);
 rkr->modified=1;
}



if ((Fl::event_button()==1) || tecla == 32)
{

if((num != rkr->Selected_Preset) || (rkr->new_bank_loaded))
{
Fl_Widget *w = ob->child(num-1);
unlight_preset(rkr->Selected_Preset);
rkr->Selected_Preset=num;
w->color(fl_darker(leds_color));
Preset_Counter->value(num);
Preset_Counter->do_callback();
}
}} {}
  }
  Function {make_window_banks()} {} {
    code {int i,j,x,y,num;
int elw,elh;

elw=176*BankWindow->w()/800;
elh=32*BankWindow->h()/600;



ob->begin();

x=40;y=40;
num=1;

for (i=1;i<16;i++)
{
y +=elh+2;

for (j=1; j<5; j++)
{
   
     Fl_Button* butX = new Fl_Button(x+1, y+1, elw,elh,rkr->Bank[num].Preset_Name);
      butX->type(0);
      butX->color(fore_color);
      butX->box(FL_UP_BOX);
      butX->selection_color(leds_color);
      butX->labelcolor(label_color);
      butX->labelsize(14);
      butX->align(68|FL_ALIGN_INSIDE);
      butX->user_data((void*) (num));
      butX->value(0);
      butX->when(FL_WHEN_CHANGED |FL_WHEN_RELEASE_ALWAYS);
      butX->callback((Fl_Callback *)preset_click);
      ob->add(butX);

x +=elw+4;
num++;

}
 x=40;

}


ob->end();
made=1;

B_B1->color(fore_color);
B_B2->color(fore_color);
B_B3->color(fore_color);
B_B4->color(fore_color);
CH_UB->color(fore_color);

light_preset(rkr->Selected_Preset);} {}
  }
  Function {reordena()} {} {
    code {int i;
unsigned int x[10],y[10];
ulong s[10];

s[0]=49;
s[1]=50;
s[2]=51;
s[3]=52;
s[4]=53;
s[5]=54;
s[6]=55;
s[7]=56;
s[8]=57;
s[9]=48;


x[0]=E1->x();
x[1]=E2->x();
x[2]=E3->x();
x[3]=E4->x();
x[4]=E5->x();
x[5]=E6->x();
x[6]=E7->x();
x[7]=E8->x();
x[8]=E9->x();
x[9]=E10->x();

y[0]=E1->y();
y[1]=E2->y();
y[2]=E3->y();
y[3]=E4->y();
y[4]=E5->y();
y[5]=E6->y();
y[6]=E7->y();
y[7]=E8->y();
y[8]=E9->y();
y[9]=E10->y();






//Hide All
	EQ->hide();
	COMPRESS->hide();
	DIST->hide();
        OVRD->hide(); 
	ECHO->hide();
        CHORUS->hide();
        PHASER->hide();
        FLANGER->hide();        
	REVERB->hide();
	PEQ->hide();
	WHAWHA->hide();
	ALIENWAH->hide();
	CABINET->hide();
	PAN->hide();
	HAR->hide();
	MUSDELAY->hide();
	GATE->hide();
	NEWDIST->hide();
	APHASER->hide();
	VALVE->hide();
	DFLANGE->hide();
	RING->hide();
	EXCITER->hide();
	MBDIST->hide();
	ARPIE->hide();
	EXPANDER->hide();
	SHUFFLE->hide();
	SYNTHFILTER->hide();
	MBVVOL->hide();
	CONVOLOTRON->hide();
	LOOPER->hide();
	RYANWAH->hide();
	RBECHO->hide();
	COILCRAFTER->hide();
	SHELFBOOST->hide();
	VOCODER->hide();
	SUSTAINER->hide();
	SEQUENCE->hide();
	SHIFTER->hide();
	STOMPBOX->hide();
	REVERBTRON->hide();
	ECHOTRON->hide();
	SHAR->hide();
	COMPBAND->hide();
	OTREM->hide();
	VIBE->hide();
	INFINIT->hide();
	
	
	
   
 // Show   
    
    
for (i=0; i<10; i++)
{

switch (rkr->efx_order[i])
  {
  
    case 0:
       
       EQ->position(x[i],y[i]);
       eq_activar->shortcut(s[i]);
       if(!rkr->deachide) EQ->show();
       if(rkr->EQ1_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide) EQ->show();
       }
       else rkr->active[i]=0;
       break;   
       
       
    case 1:
       
       COMPRESS->position(x[i],y[i]);
       compress_activar->shortcut(s[i]);
       if(!rkr->deachide)COMPRESS->show();
       if(rkr->Compressor_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)COMPRESS->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 2:
    
       DIST->position(x[i],y[i]);
       dist_activar->shortcut(s[i]);
       if(!rkr->deachide)DIST->show();
       if(rkr->Distorsion_Bypass)
       {
       rkr->active[i]=1;
       if(rkr->deachide)DIST->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 3:
    
       OVRD->position(x[i],y[i]);
       ovrd_activar->shortcut(s[i]);
       if(!rkr->deachide)OVRD->show();
       if(rkr->Overdrive_Bypass)
       {
       rkr->active[i]=1;
       if(rkr->deachide)OVRD->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 4:
    
       ECHO->position(x[i],y[i]);
       echo_activar->shortcut(s[i]);
       if(!rkr->deachide)ECHO->show();
       if(rkr->Echo_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)ECHO->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 5:
    
       CHORUS->position(x[i],y[i]);
       chorus_activar->shortcut(s[i]);
       if(!rkr->deachide)CHORUS->show();
       if(rkr->Chorus_Bypass)
       {
       rkr->active[i]=1;
       if(rkr->deachide)CHORUS->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 6:
    
       PHASER->position(x[i],y[i]);
       phaser_activar->shortcut(s[i]);
       if(!rkr->deachide)PHASER->show();
       if(rkr->Phaser_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)PHASER->show();
       }
       else rkr->active[i]=0;
       break;   
       
     case 7:
    
       FLANGER->position(x[i],y[i]);
       flanger_activar->shortcut(s[i]);
       if(!rkr->deachide)FLANGER->show();
       if(rkr->Flanger_Bypass)
       {
       rkr->active[i]=1;
       if(rkr->deachide)FLANGER->show();
       }
       else rkr->active[i]=0;
       break;    
                    
     case 8:
    
       REVERB->position(x[i],y[i]);
       reverb_activar->shortcut(s[i]);
       if(!rkr->deachide)REVERB->show();
       if(rkr->Reverb_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)REVERB->show();
       }
       else rkr->active[i]=0;
       break;     
       
     case 9:
    
       PEQ->position(x[i],y[i]);
       eqp_activar->shortcut(s[i]);
       if(!rkr->deachide)PEQ->show();
       if(rkr->EQ2_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)PEQ->show();
       }
       else rkr->active[i]=0;
       break;     
     
     case 10:
    
       WHAWHA->position(x[i],y[i]);
       WhaWha_activar->shortcut(s[i]);
       if(!rkr->deachide)WHAWHA->show();
       if(rkr->WhaWha_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)WHAWHA->show();
       }
       else rkr->active[i]=0;
       break;  
       
     case 11:
    
       ALIENWAH->position(x[i],y[i]);
       Alienwah_activar->shortcut(s[i]);
       if(!rkr->deachide)ALIENWAH->show();
       if(rkr->Alienwah_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)ALIENWAH->show();
       }
       else rkr->active[i]=0;
       break;      
     
     case 12:
     
       CABINET->position(x[i],y[i]);   
       Cabinet_activar->shortcut(s[i]);
       if(!rkr->deachide)CABINET->show();
       if(rkr->Cabinet_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)CABINET->show();
       }
       else rkr->active[i]=0;
       break;
    
     case 13:
     
       PAN->position(x[i],y[i]);   
       pan_activar->shortcut(s[i]);
       if(!rkr->deachide)PAN->show();
       if(rkr->Pan_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)PAN->show();
       }
       else rkr->active[i]=0;
       break;
     
     case 14:
       HAR->position(x[i],y[i]);
       har_activar->shortcut(s[i]);
       if(!rkr->deachide)HAR->show();
       if(rkr->Harmonizer_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)HAR->show();
       }
       else rkr->active[i]=0;
       break;
     
     case 15:
       MUSDELAY->position(x[i],y[i]);
       musdelay_activar->shortcut(s[i]);
       if(!rkr->deachide)MUSDELAY->show();
       if(rkr->MusDelay_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)MUSDELAY->show();
       }
       else rkr->active[i]=0;
       break; 
       
     case 16:
       GATE->position(x[i],y[i]);
       gate_activar->shortcut(s[i]);
       if(!rkr->deachide)GATE->show();
       if(rkr->Gate_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)GATE->show();
       }
       else rkr->active[i]=0;
       break;  
     
     case 17:
       NEWDIST->position(x[i],y[i]);
       newdist_activar->shortcut(s[i]);
       if(!rkr->deachide)NEWDIST->show();
       if(rkr->NewDist_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)NEWDIST->show();
       }
       else rkr->active[i]=0;
       break;
      
     case 18:
       APHASER->position(x[i],y[i]);
       aphaser_activar->shortcut(s[i]);
       if(!rkr->deachide)APHASER->show();
       if(rkr->APhaser_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)APHASER->show();
       }
       else rkr->active[i]=0;
       break;
 
     case 19:
       VALVE->position(x[i],y[i]);
       valve_activar->shortcut(s[i]);
       if(!rkr->deachide)VALVE->show();
       if(rkr->Valve_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)VALVE->show();
       }       
       else rkr->active[i]=0;
       break;

     case 20:
       DFLANGE->position(x[i],y[i]);
       dflange_activar->shortcut(s[i]);
       if(!rkr->deachide)DFLANGE->show();
       if(rkr->DFlange_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)DFLANGE->show();
       }       
       else rkr->active[i]=0;
       break;

     case 21:
       RING->position(x[i],y[i]);
       ring_activar->shortcut(s[i]);
       if(!rkr->deachide)RING->show();
       if(rkr->Ring_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)RING->show();
       }
       else rkr->active[i]=0;
       break;

     case 22:
       EXCITER->position(x[i],y[i]);
       exciter_activar->shortcut(s[i]);
       if(!rkr->deachide)EXCITER->show();
       if(rkr->Exciter_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)EXCITER->show();
       }
       else rkr->active[i]=0;
       break;

     case 23:
       MBDIST->position(x[i],y[i]);
       mbdist_activar->shortcut(s[i]);
       if(!rkr->deachide)MBDIST->show();
       if(rkr->MBDist_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)MBDIST->show();
       }
       else rkr->active[i]=0;
       break;
     
     case 24:
       ARPIE->position(x[i],y[i]);
       arpie_activar->shortcut(s[i]);
       if(!rkr->deachide)ARPIE->show();
       if(rkr->Arpie_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)ARPIE->show();
       }
       else rkr->active[i]=0;
       break;   

     case 25:
       EXPANDER->position(x[i],y[i]);
       expander_activar->shortcut(s[i]);
       if(!rkr->deachide)EXPANDER->show();
       if(rkr->Expander_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)EXPANDER->show();
       }
       else rkr->active[i]=0;
       break;   

     case 26:
       SHUFFLE->position(x[i],y[i]);
       shuffle_activar->shortcut(s[i]);
       if(!rkr->deachide)SHUFFLE->show();
       if(rkr->Shuffle_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SHUFFLE->show();
       }
       else rkr->active[i]=0;
       break;   

     case 27:
       SYNTHFILTER->position(x[i],y[i]);
       synthfilter_activar->shortcut(s[i]);
       if(!rkr->deachide)SYNTHFILTER->show();
       if(rkr->Synthfilter_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SYNTHFILTER->show();
       }       
       else rkr->active[i]=0;
       
       break;   

     case 28:
       MBVVOL->position(x[i],y[i]);
       mbvvol_activar->shortcut(s[i]);
       if(!rkr->deachide)MBVVOL->show();
       if(rkr->MBVvol_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)MBVVOL->show();
       }
       else rkr->active[i]=0;
       break;   

     case 29:
       CONVOLOTRON->position(x[i],y[i]);
       convo_activar->shortcut(s[i]);
       if(!rkr->deachide)CONVOLOTRON->show();
       if(rkr->Convol_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)CONVOLOTRON->show();
       }
       else rkr->active[i]=0;
       break; 

     case 30:
       LOOPER->position(x[i],y[i]);
       looper_activar->shortcut(s[i]);
       if(!rkr->deachide)LOOPER->show();
       if(rkr->Looper_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)LOOPER->show();
       }       
       else rkr->active[i]=0;
       break; 

     case 31:
       RYANWAH->position(x[i],y[i]);
       ryanwah_activar->shortcut(s[i]);
       if(!rkr->deachide)RYANWAH->show();
       if(rkr->RyanWah_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)RYANWAH->show();
       }
       else rkr->active[i]=0;
       break; 

     case 32:
       RBECHO->position(x[i],y[i]);
       rbecho_activar->shortcut(s[i]);
       if(!rkr->deachide)RBECHO->show();
       if(rkr->RBEcho_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)RBECHO->show();
       }
       else rkr->active[i]=0;
       break; 

     case 33:
       COILCRAFTER->position(x[i],y[i]);
       coil_activar->shortcut(s[i]);
       if(!rkr->deachide)COILCRAFTER->show();
       if(rkr->CoilCrafter_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)COILCRAFTER->show();
       }
       else rkr->active[i]=0;
       break; 

     case 34:
       SHELFBOOST->position(x[i],y[i]);
       shelf_activar->shortcut(s[i]);
       if(!rkr->deachide)SHELFBOOST->show();
       if(rkr->ShelfBoost_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SHELFBOOST->show();
       }
       else rkr->active[i]=0;
       break; 

   case 35:
       VOCODER->position(x[i],y[i]);
       vo_activar->shortcut(s[i]);
       if(!rkr->deachide)VOCODER->show();
       if(rkr->Vocoder_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)VOCODER->show();
       }
       else rkr->active[i]=0;
       break; 

   case 36:
       SUSTAINER->position(x[i],y[i]);
       sus_activar->shortcut(s[i]);
       if(!rkr->deachide)SUSTAINER->show();
       if(rkr->Sustainer_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SUSTAINER->show();
       }
       else rkr->active[i]=0;
       break; 

   case 37:
       SEQUENCE->position(x[i],y[i]);
       seq_activar->shortcut(s[i]);
       if(!rkr->deachide)SEQUENCE->show();
       if(rkr->Sequence_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SEQUENCE->show();
       }
       else rkr->active[i]=0;
       break; 

   case 38:
       SHIFTER->position(x[i],y[i]);
       shifter_activar->shortcut(s[i]);
       if(!rkr->deachide)SHIFTER->show();
       if(rkr->Shifter_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SHIFTER->show();
       }
       else rkr->active[i]=0;
       break; 

   case 39:
       STOMPBOX->position(x[i],y[i]);
       stomp_activar->shortcut(s[i]);
       if(!rkr->deachide)STOMPBOX->show();
       if(rkr->StompBox_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)STOMPBOX->show();
       }
       else rkr->active[i]=0;
       break; 

   case 40:
       REVERBTRON->position(x[i],y[i]);
       revtron_activar->shortcut(s[i]);
       if(!rkr->deachide)REVERBTRON->show();
       if(rkr->Reverbtron_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)REVERBTRON->show();
       }
       else rkr->active[i]=0;
       break; 

   case 41:
       ECHOTRON->position(x[i],y[i]);
       echotron_activar->shortcut(s[i]);
       if(!rkr->deachide)ECHOTRON->show();
       if(rkr->Echotron_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)ECHOTRON->show();
       }
       else rkr->active[i]=0;
       break; 

   case 42:
       SHAR->position(x[i],y[i]);
       shar_activar->shortcut(s[i]);
       if(!rkr->deachide)SHAR->show();
       if(rkr->StereoHarm_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)SHAR->show();
       }
       else rkr->active[i]=0;
       break; 

   case 43:
       COMPBAND->position(x[i],y[i]);
       cband_activar->shortcut(s[i]);
       if(!rkr->deachide)COMPBAND->show();
       if(rkr->CompBand_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)COMPBAND->show();
       }
       else rkr->active[i]=0;
       break; 

   case 44:
       OTREM->position(x[i],y[i]);
       otrem_activar->shortcut(s[i]);
       if(!rkr->deachide)OTREM->show();
       if(rkr->Opticaltrem_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)OTREM->show();
       }
       else rkr->active[i]=0;
       break; 

   case 45:
       VIBE->position(x[i],y[i]);
       vibe_activar->shortcut(s[i]);
       if(!rkr->deachide)VIBE->show();
       if(rkr->Vibe_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)VIBE->show();
       }
       else rkr->active[i]=0;
       break; 

   case 46:
       INFINIT->position(x[i],y[i]);
       infinity_activar->shortcut(s[i]);
       if(!rkr->deachide)INFINIT->show();
       if(rkr->Infinity_Bypass)
       {
       rkr->active[i]=1; 
       if(rkr->deachide)INFINIT->show();
       }
       else rkr->active[i]=0;
       break; 

 }
 
 
 switch(i)
 {
    case 0:
       L1->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L1->hide(); else L1->show();
       break;
    case 1:
       L2->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L2->hide(); else L2->show();
       break;
    case 2:
       L3->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L3->hide(); else L3->show();
       break;
    case 3:
       L4->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L4->hide(); else L4->show();
       break;
    case 4:
       L5->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L5->hide(); else L5->show();
       break;
    case 5:
       L6->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L6->hide(); else L6->show();
       break;
    case 6:
       L7->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L7->hide(); else L7->show();
       break;
    case 7:
       L8->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L8->hide(); else L8->show();
       break;
    case 8:
       L9->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L9->hide(); else L9->show();
       break;
    case 9:
       L10->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
       if((rkr->deachide) && (!rkr->active[i])) L10->hide(); else L10->show();
       break;
}
 
 
 }
 
  Principal->init_sizes();
 
  ChangeActives();
  
  
 
  Fl::redraw();} {}
  }
  Function {show_help()} {} {
    code {int x,y,w,h,k;

char temp[128];


Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (rkr->help_displayed==0)
{
 visor = new Fl_Help_Dialog;

rakarrack.get(rkr->PrefNom("Help X"),x,1);
rakarrack.get(rkr->PrefNom("Help Y"),y,1);
rakarrack.get(rkr->PrefNom("Help W"),w,640);
rakarrack.get(rkr->PrefNom("Help H"),h,480);
rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
visor->resize(x,y,w,h);
visor->textsize((unsigned char)k);
}


memset(temp,0, sizeof(temp));
sprintf(temp,"%s/html/help.html",HELPDIR);


 if (FILE * file = fopen(temp, "r"))
        {
                fclose(file);
                visor->load(temp);
		rkr->help_displayed=1;
		visor->show();
	}} {}
  }
  Function {show_lic()} {} {
    code {int x,y,w,h,k;
char temp[128];


Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);



if (rkr->help_displayed==0)
{
 visor = new Fl_Help_Dialog;

rakarrack.get(rkr->PrefNom("Help X"),x,1);
rakarrack.get(rkr->PrefNom("Help Y"),y,1);
rakarrack.get(rkr->PrefNom("Help W"),w,640);
rakarrack.get(rkr->PrefNom("Help H"),h,480);
rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
visor->resize(x,y,w,h);
visor->textsize((unsigned char)k);
}


memset(temp,0, sizeof(temp));
sprintf(temp,"%s/html/license.html",HELPDIR);
visor->load(temp);


rkr->help_displayed=1;

visor->show();} {}
  }
  Function {MiraClientes()} {} {
    code {int i;
char temp[128];
char temp1[128];
char *masque;
char *name;
FILE *fp;

BMidiIn->clear();


if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
  {
    memset (temp, 0, sizeof (temp));

      while (fgets (temp, sizeof temp, fp) != NULL)
           {
             
            if (strstr(temp,"Port") != NULL)
             
           {  
             
             strcpy(temp1,temp);
             strtok(temp1,"\\"");
             name=strtok(NULL,"\\"");
             masque=strtok(NULL,")");
             
             if ((masque[2]=='R') && (strstr(name,"rakarrack MC OUT")==0)) BMidiIn->add(name);
             
            } 
           } 
   }
   
   fclose(fp);
 
 
   
 JackCo->clear();
 
 const char **ports;
  
  
   if ((ports = jack_get_ports (rkr->jackclient, NULL, JACK_DEFAULT_AUDIO_TYPE, 
                               JackPortIsInput)) == NULL) {
                fprintf(stderr, "Cannot find any Input port\\n");
    
                
        }
  
  else
  {
  i=0;
  
  while (ports[i] != NULL)
     {
      if((strstr(ports[i],"rakarrack:in_1")==0) && (strstr(ports[i],"rakarrack:in_2")==0))
      JackCo->add(ports[i]);
      i++; 
     }
     
    
         
   }  
   
   free(ports);
   
JackIn->clear();
 
 const char **iports;  
  
   if ((iports = jack_get_ports (rkr->jackclient, NULL, JACK_DEFAULT_AUDIO_TYPE, 
                               JackPortIsOutput)) == NULL) {
                fprintf(stderr, "Cannot find any Output port\\n");
    
                
        }
  
  else
  {
  i=0;
  
  while (iports[i] != NULL)
     {
      if((strstr(iports[i],"rakarrack:out_1")==0) && (strstr(iports[i],"rakarrack:out_2")==0))
      JackIn->add(iports[i]);
      i++; 
     }
     
    
         
   }  
   
   free(iports);} {}
  }
  Function {MiraConfig()} {open
  } {
    code {int i = 1;
int k;
while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),rkr->MID)==0 ) BMidiIn->select(i,1);
i++; 
}

i=1;

while (JackCo->text(i) != NULL)
{

for (k=0; k < rkr->cuan_jack; k++)
if (strcmp(JackCo->text(i),rkr->jack_po[k].name)==0 ) JackCo->select(i,1);

i++; 
}


i=1;

while (JackIn->text(i) != NULL)
{

for (k=0; k < rkr->cuan_ijack; k++)
if (strcmp(JackIn->text(i),rkr->jack_poi[k].name)==0 ) JackIn->select(i,1);

i++; 
}




if (rkr->MIDIway) Mw1->setonly(); else Mw0->setonly();

rkr->m_displayed = 0;
Enable_Back->value(rkr->EnableBackgroundImage);
Enable_DeacHide->value(rkr->deachide);

BFiname->value(rkr->BankFilename);
BackFiname->value(rkr->BackgroundImage);
Udir->value(rkr->UDirFilename);
Username->value(rkr->UserRealName);
Pre_Serve->value(rkr->actuvol);
LM_Volume->value(rkr->Metro_Vol);
Filter_DC->value(rkr->DC_Offset);
FLPosition->value(rkr->flpos);
DB6B->value(rkr->db6booster);
Har_Downsample->value(rkr->Har_Down);
Har_Down_Qua->value(rkr->Har_D_Q);
Har_Up_Qua->value(rkr->Har_U_Q);
Rev_Downsample->value(rkr->Rev_Down);
Rev_Down_Qua->value(rkr->Rev_D_Q);
Rev_Up_Qua->value(rkr->Rev_U_Q);
Con_Downsample->value(rkr->Con_Down);
Con_Down_Qua->value(rkr->Con_D_Q);
Con_Up_Qua->value(rkr->Con_U_Q);
Seq_Downsample->value(rkr->Seq_Down);
Seq_Down_Qua->value(rkr->Seq_D_Q);
Seq_Up_Qua->value(rkr->Seq_U_Q);
Shi_Downsample->value(rkr->Shi_Down);
Shi_Down_Qua->value(rkr->Shi_D_Q);
Shi_Up_Qua->value(rkr->Shi_U_Q);
Voc_Downsample->value(rkr->Voc_Down);
Voc_Down_Qua->value(rkr->Voc_D_Q);
Voc_Up_Qua->value(rkr->Voc_U_Q);
Ste_Downsample->value(rkr->Ste_Down);
Ste_Down_Qua->value(rkr->Ste_D_Q);
Ste_Up_Qua->value(rkr->Ste_U_Q);
Wave_Amo->value(rkr->Wave_res_amount);
Wave_Up_Qua->value(rkr->Wave_up_q);
Wave_Down_Qua->value(rkr->Wave_down_q);
Calibration->value(rkr->aFreq);
RTrigger->value(rkr->RecNote->trigfact);
//  RTrigger->value(rkr->RingRecNote->trigfact); // not needed since is the same
RC_Opti->value(rkr->RCOpti);


switch(rkr->VocBands)
{
  case 16:
  Voc_Bands->value(0);
  break;
  case 32:
  Voc_Bands->value(1);
  break;
  case 64:
  Voc_Bands->value(2);
  break;
  case 128:
  Voc_Bands->value(3);
  break;
  case 256:
  Voc_Bands->value(4);
  break;
  
}
  


MTable->value(rkr->midi_table);

AAssign->value(rkr->autoassign);
Update_TAP->value(rkr->Tap_Updated);
INSTATE->value(rkr->init_state);
UPSAMPLE_C->value(rkr->upsample);
Upr_Qual->value(rkr->UpQual);
Downr_Qual->value(rkr->DownQual);
MES_DIS->value(rkr->mess_dis);
ENA_TOOL->value(rkr->ena_tool);
T_TIMEOUT->value(rkr->t_timeout);

Upr_Amo->value(rkr->UpAmo);
L_SIZE->value(rkr->looper_size);
D_A_Connect->value(rkr->aconnect_MI);
D_J_Connect->value(rkr->aconnect_JA);
D_IJ_Connect->value(rkr->aconnect_JIA);

Midi_In_Counter->value(rkr->MidiCh+1);
Har_In_Counter->value(rkr->HarCh+1);

switch(rkr->HarQual)
{
  case 4:
  Har_Qual->value(0);
  break;
  
  case 8:
  Har_Qual->value(1);
  break;
  
  case 16:
  Har_Qual->value(2);
  break;

  case 32:
  Har_Qual->value(3);
  break;


}  

switch(rkr->SteQual)
{
  case 4:
  Ste_Qual->value(0);
  break;
  
  case 8:
  Ste_Qual->value(1);
  break;
  
  case 16:
  Ste_Qual->value(2);
  break;

  case 32:
  Ste_Qual->value(3);
  break;


}  



if (rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();

if (rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();

if (rkr->aconnect_JIA) JackIn->activate();
else JackIn->deactivate();

Fl_Menu_Item *p;  
unsigned int SR_value=rkr->sample_rate;

for(int j=0; j<menu_Har_Downsample->size(); j++)
 {
      p=menu_Har_Downsample->next(j);
      
      switch(j)
       {
            case 0:
             SR_value = rkr->sample_rate;
             break;
            case 1:  
             SR_value = 96000;
             break;
            case 2:  
             SR_value = 48000;
             break;
            case 3:  
             SR_value = 44100;
             break;
            case 4:  
             SR_value = 32000;
             break;
            case 5:  
             SR_value = 22050;
             break;
            case 6:  
             SR_value = 16000;
             break;
            case 7:  
             SR_value = 12000;
             break;
            case 8:  
             SR_value = 8000;
             break;
            case 9:  
             SR_value = 4000;
             break;
       
       
       }     

        if((j>0) && ((unsigned int)rkr->sample_rate<=SR_value)) p->deactivate(); else p->activate();


 }
 
 
 Font_Bro->clear(); 
 Font_Bro->textcolor(label_color);
 k=0;
 k = Fl::set_fonts(0);
  for (i = 0; i < k; i++) {
    int t; const char *name = Fl::get_font_name((Fl_Font)i,&t);
    char buffer[128];
\#if 1
    if (t) {
      char *p = buffer;
      if (t & FL_BOLD) {*p++ = '@'; *p++ = 'b';}
      if (t & FL_ITALIC) {*p++ = '@'; *p++ = 'i';}
      strcpy(p,name);
      name = buffer;
    }
\#else // this is neat, but really slow on some X servers:
    sprintf(buffer, "@F%d@.%s", i, name);
    name = buffer;
\#endif
    Font_Bro->add(name);

}

Font_Bro->value(rkr->font+1);} {selected
    }
  }
  Function {BankWin_Label(char *filename)} {} {
    code {char tmp[256];


memset(tmp,0, sizeof(tmp));
sprintf(tmp,"%s   v%s - Bank Manager - %s",rkr->jackcliname,VERSION,fl_filename_name(filename));
BankWindow->copy_label(tmp);} {}
  }
  Function {is_modified()} {open
  } {
    code {int ok;


if (rkr->modified)
{

 Fl_Widget *w = fl_message_icon();
 w->parent()->copy_label(rkr->jackcliname);
 

 ok=fl_choice("Bank was modified, but not saved", "Discard","Save",NULL);



 switch(ok)
  
    {
        case 0:
          break;

        case 1: 
          MIDI_LABEL->do_callback();
          break;  

    }

}} {}
  }
  Function {Put_Loaded_Bank()} {} {
    code {int k=1;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp > 0)
    {
     w->copy_label(rkr->Bank[k].Preset_Name);
     k++;
    }
  
  }
  
FillML(2);} {}
  }
  Function {Chord(int eff)} {} {
    code {int tipo,undi;
tipo=0;
undi=0;

switch(eff)
{
case 0:
tipo=rkr->efx_Har->getpar(7);
undi=rkr->efx_Har->getpar(6);
break;
case 1:
tipo=rkr->efx_StereoHarm->getpar(9);
undi=rkr->efx_StereoHarm->getpar(8);
break;
}



sprintf(rkr->RC->NombreAcorde,"%s%s", rkr->RC->NCE[undi].Nom,rkr->RC->ChN[tipo].Nom);

rkr->RC->ctipo=tipo;
rkr->RC->fundi=undi;
rkr->RC->cc=1;} {}
  }
  Function {ActMIDI()} {} {
    code {if (rkr->Mvalue==0) return;

int i;

for (i=1; i<(rkr->NumParams+26); i++)

{

  
 if (rkr->Mcontrol[i]==0) continue;
 
 rkr->Mcontrol[i]=0;


switch (i)
{
     case 12:
     Balance->value(rkr->Fraction_Bypass*100.0);
     Balance->redraw();
     break;
     case 14:
     Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
     Nivel_Entrada->redraw();
     break;
     case 7:
     Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
     Nivel_Salida->redraw();
     break;  
     case 1:
     WhaWha_dpth->value(rkr->efx_WhaWha->getpar(6));
     WhaWha_dpth->redraw();
     break;
     case 20:
     Alienwah_dpth->value(rkr->efx_Alienwah->getpar(6));
     Alienwah_dpth->redraw();
     break;
     case 21:
     phaser_dpth->value(rkr->efx_Phaser->getpar(6));
     phaser_dpth->redraw();
     break;
     case 22:
     flanger_dpth->value(rkr->efx_Flanger->getpar(6));
     flanger_dpth->redraw();
     break;
     case 23:
     chorus_dpth->value(rkr->efx_Chorus->getpar(6));
     chorus_dpth->redraw();
     break;
     case 24:
     musdelay_gain1->value(rkr->efx_MusDelay->getpar(11)-64);
     musdelay_gain1->redraw();
     break;
     case 25:
     musdelay_gain2->value(rkr->efx_MusDelay->getpar(12)-64);
     musdelay_gain2->redraw();
     break;
     case 26:
     har_freq1->value(rkr->efx_Har->getpar(4));
     har_freq1->redraw();
     break;
     case 27:
     har_int->value(rkr->efx_Har->getpar(3)-12);
     har_int->redraw();
     break;
     case 28:
     WhaWha_WD->value(rkr->efx_WhaWha->getpar(0)-64);
     WhaWha_WD->redraw();
     break;
     case 29:
     ovrd_WD->value(rkr->efx_Overdrive->getpar(0)-64);
     ovrd_WD->redraw();
     break;
     case 30:
     dist_WD->value(rkr->efx_Distorsion->getpar(0)-64);
     dist_WD->redraw();
     break;
     case 31:
     har_WD->value(rkr->efx_Har->getpar(0)-64);
     har_WD->redraw();
     break;
     case 52:
     chorus_WD->value(rkr->efx_Chorus->getpar(0)-64);
     chorus_WD->redraw();
     break;
     case 53:
     flanger_WD->value(rkr->efx_Flanger->getpar(0)-64);
     flanger_WD->redraw();
     break;
     case 54:
     phaser_WD->value(rkr->efx_Phaser->getpar(0)-64);
     phaser_WD->redraw();
     break;
     case 55:
     Alienwah_WD->value(rkr->efx_Alienwah->getpar(0)-64);
     Alienwah_WD->redraw();
     break;
     case 56:
     musdelay_WD->value(rkr->efx_MusDelay->getpar(0)-64);
     musdelay_WD->redraw();
     break;
     case 57:
     reverb_WD->value(rkr->efx_Rev->getpar(0)-64);
     reverb_WD->redraw();
     break;
     case 58:
     pan_WD->value(rkr->efx_Pan->getpar(0)-64);
     pan_WD->redraw();
     break;
     case 59:
     echo_WD->value(rkr->efx_Echo->getpar(0)-64);
     echo_WD->redraw();
     break;
     case 46:
     echo_pan->value(rkr->efx_Echo->getpar(1)-64);
     echo_pan->redraw();
     break;
     case 47:
     ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
     ovrd_pan->redraw();
     break;
     case 48:
     dist_pan->value(rkr->efx_Distorsion->getpar(1)-64);
     dist_pan->redraw();
     break;
     case 49:
     har_pan->value(rkr->efx_Har->getpar(1)-64);
     har_pan->redraw();
     break;
     case 50:
     chorus_pan->value(rkr->efx_Chorus->getpar(1)-64);
     chorus_pan->redraw();
     break;
     case 51:
     flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
     flanger_pan->redraw();
     break;
     case 60:
     phaser_pan->value(rkr->efx_Phaser->getpar(1)-64);
     phaser_pan->redraw();
     break;
     case 61:
     Alienwah_pan->value(rkr->efx_Alienwah->getpar(1)-64);
     Alienwah_pan->redraw();
     break;
     case 62:
     musdelay_pan1->value(rkr->efx_MusDelay->getpar(1)-64);
     musdelay_pan1->redraw();
     break;
     case 63:
     reverb_pan->value(rkr->efx_Rev->getpar(1)-64);
     reverb_pan->redraw();
     break;
     case 65:
     musdelay_pan2->value(rkr->efx_MusDelay->getpar(7)-64);
     musdelay_pan2->redraw();
     break;
     case 66:
     WhaWha_pan->value(rkr->efx_WhaWha->getpar(1)-64);
     WhaWha_pan->redraw();
     break;
     case 67:
     pan_pan->value(rkr->efx_Pan->getpar(1)-64);
     pan_pan->redraw();
     break;
     case 68:
     ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
     ovrd_drive->redraw();
     break;
     case 69:
     dist_drive->value(rkr->efx_Distorsion->getpar(3));
     dist_drive->redraw();
     break;
     case 70:
     ovrd_level->value(rkr->efx_Overdrive->getpar(4));
     ovrd_level->redraw();
     break;
     case 71:
     dist_level->value(rkr->efx_Distorsion->getpar(4));
     dist_level->redraw();
     break;
     case 72:
     chorus_freq->value(rkr->efx_Chorus->getpar(2));
     chorus_freq->redraw();
     break;
     case 73:
     flanger_freq->value(rkr->efx_Flanger->getpar(2));
     flanger_freq->redraw();
     break;
     case 74:
     phaser_freq->value(rkr->efx_Phaser->getpar(2));
     phaser_freq->redraw();
     break;
     case 75:
     WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
     WhaWha_freq->redraw();
     break;
     case 76:
     Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
     Alienwah_freq->redraw();
     break;
     case 77:
     pan_freq->value(rkr->efx_Pan->getpar(2));
     pan_freq->redraw();
     break;
     case 78:
     echo_fb->value(rkr->efx_Echo->getpar(5));
     echo_fb->redraw();
     break;
     case 79:
     chorus_fb->value(rkr->efx_Chorus->getpar(8));
     chorus_fb->redraw();
     break;
     case 80:
     flanger_fb->value(rkr->efx_Flanger->getpar(8));
     flanger_fb->redraw();
     break;
     case 81:
     phaser_fb->value(rkr->efx_Phaser->getpar(7));
     phaser_fb->redraw();
     break;
     case 82:
     Alienwah_fb->value(rkr->efx_Alienwah->getpar(7));
     Alienwah_fb->redraw();
     break;
     case 83:
     musdelay_fb1->value(rkr->efx_MusDelay->getpar(5));
     musdelay_fb1->redraw();
     break;
     case 84:
     musdelay_fb2->value(rkr->efx_MusDelay->getpar(9));
     musdelay_fb2->redraw();
     break;
     case 85:
     ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
     ovrd_lpf->redraw();
     break;
     case 86:
     dist_lpf->value(rkr->efx_Distorsion->getpar(7));
     dist_lpf->redraw();
     break;
     case 87:
     reverb_LPF->value(rkr->efx_Rev->getpar(7));
     reverb_LPF->redraw();
     break;
     case 88:
     ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
     ovrd_hpf->redraw();
     break;
     case 89:
     dist_hpf->value(rkr->efx_Distorsion->getpar(8));
     dist_hpf->redraw();
     break;
     case 90:
     reverb_HPF->value(rkr->efx_Rev->getpar(8));
     reverb_HPF->redraw();
     break;
     case 91:
     chorus_LR->value(rkr->efx_Chorus->getpar(9)-64);
     chorus_LR->redraw();
     break;
     case 92:
     flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
     flanger_LR->redraw();
     break;
     case 93:
     phaser_LR->value(rkr->efx_Phaser->getpar(9)-64);
     phaser_LR->redraw();
     break;
     case 94:
     ovrd_LRc->value(rkr->efx_Overdrive->getpar(2)-64);
     ovrd_LRc->redraw();
     break;
     case 95:
     dist_LRc->value(rkr->efx_Distorsion->getpar(2)-64);
     dist_LRc->redraw();
     break;
     case 96:
     Alienwah_LR->value(rkr->efx_Alienwah->getpar(9)-64);
     Alienwah_LR->redraw();
     break;
     case 97:
     echo_LRc->value(rkr->efx_Echo->getpar(4)-64);
     echo_LRc->redraw();
     break;
     case 98:
     musdelay_LRc->value(rkr->efx_MusDelay->getpar(4)-64);
     musdelay_LRc->redraw();
     break;
     case 99:
     chorus_stdf->value(rkr->efx_Chorus->getpar(5));
     chorus_stdf->redraw();
     break;
     case 100:
     flanger_stdf->value(rkr->efx_Flanger->getpar(5));
     flanger_stdf->redraw();
     break;
     case 101:
     phaser_stdf->value(rkr->efx_Phaser->getpar(5));
     phaser_stdf->redraw();
     break;
     case 102:
     WhaWha_stdf->value(rkr->efx_WhaWha->getpar(5));
     WhaWha_stdf->redraw();
     break;
     case 103:
     Alienwah_stdf->value(rkr->efx_Alienwah->getpar(5));
     Alienwah_stdf->redraw();
     break;
     case 104:
     pan_stdf->value(rkr->efx_Pan->getpar(5));
     pan_stdf->redraw();
     break;
     case 105:
     chorus_rnd->value(rkr->efx_Chorus->getpar(3));
     chorus_rnd->redraw();
     break;
     case 106:
     flanger_rnd->value(rkr->efx_Flanger->getpar(3));
     flanger_rnd->redraw();
     break;
     case 107:
     phaser_rnd->value(rkr->efx_Phaser->getpar(3));
     phaser_rnd->redraw();
     break;
     case 108:
     WhaWha_rnd->value(rkr->efx_WhaWha->getpar(3));
     WhaWha_rnd->redraw();
     break;
     case 109:
     Alienwah_rnd->value(rkr->efx_Alienwah->getpar(3));
     Alienwah_rnd->redraw();
     break;
     case 110:
     pan_rnd->value(rkr->efx_Pan->getpar(3));
     pan_rnd->redraw();
     break;
     case 111:
     WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(7));
     WhaWha_ampsns->redraw();
     break;
     case 112:
     WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(8));
     WhaWha_ampsnsinv->redraw();
     break;
     case 113:
     WhaWha_smooth->value(rkr->efx_WhaWha->getpar(9));
     WhaWha_smooth->redraw();
     break;
     case 114:
     phaser_phase->value(rkr->efx_Phaser->getpar(11));
     phaser_phase->redraw();
     break;
     case 115:
     Alienwah_phase->value(rkr->efx_Alienwah->getpar(10));
     Alienwah_phase->redraw();
     break;
     case 116:
     ActOnOff();
     break;
     case 117:
     aphaser_WD->value(rkr->efx_APhaser->getpar(0)-64);
     aphaser_WD->redraw();
     break;
     case 118:
     aphaser_pan->value(rkr->efx_APhaser->getpar(1));
     aphaser_pan->redraw();
     break;
     case 119:
     aphaser_freq->value(rkr->efx_APhaser->getpar(2));
     aphaser_freq->redraw();
     break;
     case 120:
     aphaser_phase->value(rkr->efx_APhaser->getpar(11));
     aphaser_phase->redraw();
     break;
     case 121:
     aphaser_dpth->value(rkr->efx_APhaser->getpar(6));
     aphaser_dpth->redraw();
     break;
     case 122:
     aphaser_fb->value(rkr->efx_APhaser->getpar(7)-64);
     aphaser_fb->redraw();
     break;
     case 123:
     aphaser_LR->value(rkr->efx_APhaser->getpar(9));
     aphaser_LR->redraw();
     break;
     case 124:
     aphaser_stdf->value(rkr->efx_APhaser->getpar(5));
     aphaser_stdf->redraw();
     break;
     case 125:
     newdist_WD->value(rkr->efx_NewDist->getpar(0)-64);
     newdist_WD->redraw();
     break;
     case 126:
     newdist_pan->value(rkr->efx_NewDist->getpar(1)-64);
     newdist_pan->redraw();
     break;
     case 127:
     newdist_LRc->value(rkr->efx_NewDist->getpar(2)-64);
     newdist_LRc->redraw();
     break;
     case 2:
     newdist_drive->value(rkr->efx_NewDist->getpar(3));
     newdist_drive->redraw();
     break;
     case 3:
     newdist_level->value(rkr->efx_NewDist->getpar(4));
     newdist_level->redraw();
     break;
     case 4:
     newdist_lpf->value(rkr->efx_NewDist->getpar(7));
     newdist_lpf->redraw();
     break;
     case 5:
     newdist_hpf->value(rkr->efx_NewDist->getpar(8));
     newdist_hpf->redraw();
     break;
     case 6:
     newdist_st->value(rkr->efx_NewDist->getpar(9));
     newdist_st->redraw();
     break;
     case 8:
     newdist_oct->value(rkr->efx_NewDist->getpar(11));
     newdist_oct->redraw();
     break;
     case 9:
     dist_oct->value(rkr->efx_NewDist->getpar(12));
     dist_oct->redraw();
     break;
     case 130:
     eq_Gain->value(rkr->efx_EQ1->getpar(0)-64);
     eq_Gain->redraw();
     break;
     case 131:
     eq_Q->value(rkr->efx_EQ1->getpar(13)-64);
     eq_Q->redraw();
     break;
     case 132:
     eq_1->value(rkr->efx_EQ1->getpar(12)-64);
     eq_1->redraw();
     break;
     case 133:
     eq_2->value(rkr->efx_EQ1->getpar(17)-64);
     eq_2->redraw();
     break;
     case 134:
     eq_3->value(rkr->efx_EQ1->getpar(22)-64);
     eq_3->redraw();
     break;
     case 135:
     eq_4->value(rkr->efx_EQ1->getpar(27)-64);
     eq_4->redraw();
     break;
     case 136:
     eq_5->value(rkr->efx_EQ1->getpar(32)-64);
     eq_5->redraw();
     break;
     case 137:
     eq_6->value(rkr->efx_EQ1->getpar(37)-64);
     eq_6->redraw();
     break;
     case 138:
     eq_7->value(rkr->efx_EQ1->getpar(42)-64);
     eq_7->redraw();
     break;
     case 139:
     eq_8->value(rkr->efx_EQ1->getpar(47)-64);
     eq_8->redraw();
     break;
     case 140:
     eq_9->value(rkr->efx_EQ1->getpar(52)-64);
     eq_9->redraw();
     break;
     case 141:
     eq_10->value(rkr->efx_EQ1->getpar(57)-64);
     eq_10->redraw();
     break;
     case 142:
     compress_ATime->value(rkr->efx_Compressor->getpar(4));
     compress_ATime->redraw();
     break;
     case 143:
     compress_RTime->value(rkr->efx_Compressor->getpar(5));
     compress_RTime->redraw();
     break;
     case 144:
     compress_Ratio->value(rkr->efx_Compressor->getpar(2));
     compress_Ratio->redraw();
     break;
     case 145:
     compress_Knee->value(rkr->efx_Compressor->getpar(7));
     compress_Knee->redraw();
     break;
     case 146:
     compress_threshold->value(rkr->efx_Compressor->getpar(1));
     compress_threshold->redraw();
     break;
     case 147:
     compress_output->value(rkr->efx_Compressor->getpar(3));
     compress_output->redraw();
     break;
     case 148:
     eqp_Gain->value(rkr->efx_EQ2->getpar(0)-64);
     eqp_Gain->redraw();
     break;
     case 149:
     eqp_LF->value(rkr->efx_EQ2->getpar(11));
     eqp_LF->redraw();
     break;
     case 150:
     eqp_LFg->value(rkr->efx_EQ2->getpar(12)-64);
     eqp_LFg->redraw();
     break;
     case 151:
     eqp_LQ->value(rkr->efx_EQ2->getpar(13)-64);
     eqp_LQ->redraw();
     break;	
     case 152:
     eqp_MF->value(rkr->efx_EQ2->getpar(16));
     eqp_MF->redraw();
     break;
     case 153:
     eqp_MFg->value(rkr->efx_EQ2->getpar(17)-64);
     eqp_MFg->redraw();
     break;
     case 154:
     eqp_MQ->value(rkr->efx_EQ2->getpar(18)-64);
     eqp_MQ->redraw();
     break;
     case 155:
     eqp_HF->value(rkr->efx_EQ2->getpar(21));
     eqp_HF->redraw();
     break;
     case 156:
     eqp_HFg->value(rkr->efx_EQ2->getpar(22)-64);
     eqp_HFg->redraw();
     break;
     case 157:
     eqp_HQ->value(rkr->efx_EQ2->getpar(23)-64);
     eqp_HQ->redraw();
     break;
     case 158:
     dflange_WD->value(rkr->efx_DFlange->getpar(0));
     dflange_WD->redraw();
     break;
     case 159:
     dflange_pan->value(rkr->efx_DFlange->getpar(1));
     dflange_pan->redraw();
     break;
     case 160:
     dflange_LR->value(rkr->efx_DFlange->getpar(2));
     dflange_LR->redraw();
     break;
     case 161:
     dflange_depth->value(rkr->efx_DFlange->getpar(3));
     dflange_depth->redraw();
     break;
     case 162:
     dflange_width->value(rkr->efx_DFlange->getpar(4));
     dflange_width->redraw();
     break;
     case 163:
     dflange_offset->value(rkr->efx_DFlange->getpar(5));
     dflange_offset->redraw();
     break;
     case 164:
     dflange_fb->value(rkr->efx_DFlange->getpar(6));
     dflange_fb->redraw();
     break;
     case 165:
     dflange_lpf->value(rkr->efx_DFlange->getpar(7));
     dflange_lpf->redraw();
     break;
     case 166:
     dflange_freq->value(rkr->efx_DFlange->getpar(10));
     dflange_freq->redraw();
     break;
     case 167:
     dflange_stdf->value(rkr->efx_DFlange->getpar(11));
     dflange_stdf->redraw();
     break;
     case 168:
     dflange_rnd->value(rkr->efx_DFlange->getpar(13));
     dflange_rnd->redraw();
     break;
     case 169:
     valve_WD->value(rkr->efx_Valve->getpar(0)-64);
     valve_WD->redraw();
     break;
     case 170:
     valve_LRc->value(rkr->efx_Valve->getpar(2)-64);
     valve_LRc->redraw();
     break;
     case 171:
     valve_pan->value(rkr->efx_Valve->getpar(1)-64);
     valve_pan->redraw();
     break;
     case 172:
     valve_level->value(rkr->efx_Valve->getpar(4));
     valve_level->redraw();
     break;
     case 173:
     valve_drive->value(rkr->efx_Valve->getpar(3));
     valve_drive->redraw();
     break;
     case 174:
     valve_Q->value(rkr->efx_Valve->getpar(10));
     valve_Q->redraw();
     break;
     case 175:
     valve_Pre->value(rkr->efx_Valve->getpar(12));
     valve_Pre->redraw();
     break;
     case 176:
     valve_lpf->value(rkr->efx_Valve->getpar(6));
     valve_lpf->redraw();
     break;
     case 177:
     valve_hpf->value(rkr->efx_Valve->getpar(7));
     valve_hpf->redraw();
     break;
     case 178:
     ring_WD->value(rkr->efx_Ring->getpar(0));
     ring_WD->redraw();
     break;  
     case 179:
     ring_LRc->value(rkr->efx_Ring->getpar(2));
     ring_LRc->redraw();
     break;  
     case 180:
     ring_input->value(rkr->efx_Ring->getpar(11));
     ring_input->redraw();
     break;  
     case 181:
     ring_level->value(rkr->efx_Ring->getpar(3));
     ring_level->redraw();
     break;  
     case 182:
     ring_pan->value(rkr->efx_Ring->getpar(1));
     ring_pan->redraw();
     break;  
     case 183:
     ring_depth->value(rkr->efx_Ring->getpar(4));
     ring_depth->redraw();
     break;  
     case 184:
     ring_freq->value(rkr->efx_Ring->getpar(5));
     ring_freq->redraw();
     break;  
     case 185:
     ring_sin->value(rkr->efx_Ring->getpar(7));
     ring_sin->redraw();
     break;  
     case 186:
     ring_tri->value(rkr->efx_Ring->getpar(8));
     ring_tri->redraw();
     break;  
     case 187:
     ring_saw->value(rkr->efx_Ring->getpar(9));
     ring_saw->redraw();
     break;  
     case 188:
     ring_squ->value(rkr->efx_Ring->getpar(10));
     ring_squ->redraw();
     break;  
     case 189:
     ex_Gain->value(rkr->efx_Exciter->getpar(0));
     ex_Gain->redraw();
     break;
     case 190:
     ex_hfreq->value(rkr->efx_Exciter->getpar(11));
     ex_hfreq->redraw();
     break;
     case 191:
     ex_lfreq->value(rkr->efx_Exciter->getpar(12));
     ex_lfreq->redraw();
     break;
     case 192:
     ex_1->value(rkr->efx_Exciter->getpar(1));
     ex_1->redraw();
     break;
     case 193:
     ex_2->value(rkr->efx_Exciter->getpar(2));
     ex_2->redraw();
     break;
     case 194:
     ex_3->value(rkr->efx_Exciter->getpar(3));
     ex_3->redraw();
     break;
     case 195:
     ex_4->value(rkr->efx_Exciter->getpar(4));
     ex_4->redraw();
     break;
     case 196:
     ex_5->value(rkr->efx_Exciter->getpar(5));
     ex_5->redraw();
     break;
     case 197:
     ex_6->value(rkr->efx_Exciter->getpar(6));
     ex_6->redraw();
     break;
     case 198:
     ex_7->value(rkr->efx_Exciter->getpar(7));
     ex_7->redraw();
     break;
     case 199:
     ex_8->value(rkr->efx_Exciter->getpar(8));
     ex_8->redraw();
     break;
     case 200:
     ex_9->value(rkr->efx_Exciter->getpar(9));
     ex_9->redraw();
     break;
     case 201:
     ex_10->value(rkr->efx_Exciter->getpar(10));
     ex_10->redraw();
     break;
     case 202:
     mbdist_WD->value(rkr->efx_MBDist->getpar(0)-64);
     mbdist_WD->redraw();
     break;
     case 203:
     mbdist_LRc->value(rkr->efx_MBDist->getpar(2)-64);
     mbdist_LRc->redraw();
     break;
     case 204:
     mbdist_drive->value(rkr->efx_MBDist->getpar(3));
     mbdist_drive->redraw();
     break;
     case 205:
     mbdist_level->value(rkr->efx_MBDist->getpar(4));
     mbdist_level->redraw();
     break;
     case 206:
     mbdist_volL->value(rkr->efx_MBDist->getpar(8));
     mbdist_volL->redraw();
     break;
     case 207:
     mbdist_volM->value(rkr->efx_MBDist->getpar(9));
     mbdist_volM->redraw();
     break;
     case 208:
     mbdist_volH->value(rkr->efx_MBDist->getpar(10));
     mbdist_volH->redraw();
     break;
     case 209:
     mbdist_cross1->value(rkr->efx_MBDist->getpar(12));
     mbdist_cross1->redraw();
     break;
     case 210:
     mbdist_cross2->value(rkr->efx_MBDist->getpar(13));
     mbdist_cross2->redraw();
     break;
     case 211:
     mbdist_pan->value(rkr->efx_MBDist->getpar(1)-64);
     mbdist_pan->redraw();
     break;
     case 212:
     arpie_WD->value(rkr->efx_Arpie->getpar(0));
     arpie_WD->redraw();
     break; 	
     case 213:
     arpie_arpe->value(rkr->efx_Arpie->getpar(7));
     arpie_arpe->redraw();
     break; 	
     case 214:
     arpie_pan->value(rkr->efx_Arpie->getpar(1));
     arpie_pan->redraw();
     break; 	
     case 215:
     arpie_delay->value(rkr->efx_Arpie->getpar(2));
     arpie_delay->redraw();
     break; 	
     case 216:
     arpie_LRdl->value(rkr->efx_Arpie->getpar(3));
     arpie_LRdl->redraw();
     break; 	
     case 217:
     arpie_LRc->value(rkr->efx_Arpie->getpar(4));
     arpie_LRc->redraw();
     break; 	
     case 218:
     arpie_fb->value(rkr->efx_Arpie->getpar(5));
     arpie_fb->redraw();
     break; 	
     case 219:
     arpie_damp->value(rkr->efx_Arpie->getpar(6));
     arpie_damp->redraw();
     break; 	
     case 220:
     expander_ATime->value(rkr->efx_Expander->getpar(3));
     expander_ATime->redraw();
     break;
     case 221:
     expander_RTime->value(rkr->efx_Expander->getpar(4));
     expander_RTime->redraw();
     break;
     case 222:
     expander_shape->value(rkr->efx_Expander->getpar(2));
     expander_shape->redraw();
     break;
     case 223:
     expander_threshold->value(rkr->efx_Expander->getpar(1));
     expander_threshold->redraw();
     break;
     case 224:
     expander_level->value(rkr->efx_Expander->getpar(7));
     expander_level->redraw();
     break;
     case 225:
     expander_LPF->value(rkr->efx_Expander->getpar(5));
     expander_LPF->redraw();
     break;
     case 226:
     expander_HPF->value(rkr->efx_Expander->getpar(6));
     expander_HPF->redraw();
     break;
     case 227:
     shuffle_WD->value(rkr->efx_Shuffle->getpar(0)-64);
     shuffle_WD->redraw();
     break;
     case 228:
     shuffle_cross1->value(rkr->efx_Shuffle->getpar(5));
     shuffle_cross1->redraw();
     break; 
     case 229:
     shuffle_volL->value(rkr->efx_Shuffle->getpar(1));
     shuffle_volL->redraw();
     break; 
     case 230:
     shuffle_cross2->value(rkr->efx_Shuffle->getpar(6));
     shuffle_cross2->redraw();
     break; 
     case 231:
     shuffle_volML->value(rkr->efx_Shuffle->getpar(2));
     shuffle_volML->redraw();
     break; 
     case 232:
     shuffle_cross3->value(rkr->efx_Shuffle->getpar(7));
     shuffle_cross3->redraw();
     break; 
     case 233:
     shuffle_volMH->value(rkr->efx_Shuffle->getpar(3));
     shuffle_volMH->redraw();
     break; 
     case 234:
     shuffle_cross4->value(rkr->efx_Shuffle->getpar(8));
     shuffle_cross4->redraw();
     break; 
     case 235:
     shuffle_volH->value(rkr->efx_Shuffle->getpar(4));
     shuffle_volH->redraw();
     break; 
     case 236:
     shuffle_Q->value(rkr->efx_Shuffle->getpar(9));
     shuffle_Q->redraw();
     break; 
     case 237:
     synthfilter_WD->value(rkr->efx_Synthfilter->getpar(0)-64);
     synthfilter_WD->redraw();
     break;
     case 238:
     synthfilter_Distort->value(rkr->efx_Synthfilter->getpar(1));
     synthfilter_Distort->redraw();
     break;
     case 239:
     synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
     synthfilter_freq->redraw();
     break;
     case 240:
     synthfilter_stdf->value(rkr->efx_Synthfilter->getpar(5));
     synthfilter_stdf->redraw();
     break;
     case 241:
     synthfilter_width->value(rkr->efx_Synthfilter->getpar(6));
     synthfilter_width->redraw();
     break;
     case 242:
     synthfilter_fb->value(rkr->efx_Synthfilter->getpar(7));
     synthfilter_fb->redraw();
     break;
     case 243:
     synthfilter_dpth->value(rkr->efx_Synthfilter->getpar(11));
     synthfilter_dpth->redraw();
     break;
     case 244:
     synthfilter_EnvSens->value(rkr->efx_Synthfilter->getpar(12));
     synthfilter_EnvSens->redraw();
     break;
     case 245:
     synthfilter_ATime->value(rkr->efx_Synthfilter->getpar(13));
     synthfilter_ATime->redraw();
     break;
     case 246:
     synthfilter_RTime->value(rkr->efx_Synthfilter->getpar(14));
     synthfilter_RTime->redraw();
     break;
     case 247:
     synthfilter_Offset->value(rkr->efx_Synthfilter->getpar(15));
     synthfilter_Offset->redraw();
     break;
     case 248:
     mbvvol_WD->value(rkr->efx_MBVvol->getpar(0)-64);
     mbvvol_WD->redraw();
     break;
     case 249:
     mbvvol_freq1->value(rkr->efx_MBVvol->getpar(1));
     mbvvol_freq1->redraw();
     break;
     case 250:
     mbvvol_stdf1->value(rkr->efx_MBVvol->getpar(3));
     mbvvol_stdf1->redraw();
     break;
     case 251:
     mbvvol_freq2->value(rkr->efx_MBVvol->getpar(4));
     mbvvol_freq2->redraw();
     break;
     case 252:
     mbvvol_stdf2->value(rkr->efx_MBVvol->getpar(6));
     mbvvol_stdf2->redraw();
     break;
     case 253:
     mbvvol_cross1->value(rkr->efx_MBVvol->getpar(7));
     mbvvol_cross1->redraw();
     break;
     case 254:
     mbvvol_cross2->value(rkr->efx_MBVvol->getpar(8));
     mbvvol_cross2->redraw();
     break;
     case 255:
     mbvvol_cross3->value(rkr->efx_MBVvol->getpar(9));
     mbvvol_cross3->redraw();
     break;
     case 256:
     ryanwah_WD->value(rkr->efx_RyanWah->getpar(0)-64);
     ryanwah_WD->redraw();
     break;
     case 257:
     ryanwah_lp->value(rkr->efx_RyanWah->getpar(10));
     ryanwah_lp->redraw();
     break;
     case 258:
     ryanwah_bp->value(rkr->efx_RyanWah->getpar(11));
     ryanwah_bp->redraw();
     break;
     case 259:
     ryanwah_hp->value(rkr->efx_RyanWah->getpar(12));
     ryanwah_hp->redraw();
     break;
     case 260:
     ryanwah_dpth->value(rkr->efx_RyanWah->getpar(6));
     ryanwah_dpth->redraw();
     break;
     case 261:
     ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
     ryanwah_freq->redraw();
     break;
     case 262:
     ryanwah_q->value(rkr->efx_RyanWah->getpar(1));
     ryanwah_q->redraw();
     break;
     case 263:
     ryanwah_rng->value(rkr->efx_RyanWah->getpar(14));
     ryanwah_rng->redraw();
     break;
     case 264:
     ryanwah_ampsnsinv->value(rkr->efx_RyanWah->getpar(8));
     ryanwah_ampsnsinv->redraw();
     break;
     case 265:
     ryanwah_ampsns->value(rkr->efx_RyanWah->getpar(7));
     ryanwah_ampsns->redraw();
     break;
     case 266:
     ryanwah_smooth->value(rkr->efx_RyanWah->getpar(9));
     ryanwah_smooth->redraw();
     break;
     case 267:
     looper_WD->value(rkr->efx_Looper->getpar(0)-64);
     looper_WD->redraw();
     break;
     case 268:
     looper_level1->value(rkr->efx_Looper->getpar(6));
     looper_level1->redraw();
     break; 
     case 269:
     looper_level2->value(rkr->efx_Looper->getpar(10));
     looper_level2->redraw();
     break; 
     case 270:
     looper_rv->value(rkr->efx_Looper->getpar(5));
     looper_rv->redraw();
     break;
     case 271:
     looper_ap->value(rkr->efx_Looper->getpar(9));
     looper_ap->redraw();
     break;
     case 272:
     looper_play->value(rkr->efx_Looper->getpar(1));
     update_looper();
     break;
     case 273:
     looper_stop->value(rkr->efx_Looper->getpar(2));
     update_looper();
     break;
     case 274:
     looper_record->value(rkr->efx_Looper->getpar(3));
     update_looper();
     break;
     case 275:
     looper_r1->value(rkr->efx_Looper->getpar(11));
     looper_r1->redraw();
     break;
     case 276:
     looper_r2->value(rkr->efx_Looper->getpar(12));
     looper_r2->redraw();
     break;
     case 277:
     looper_t1->value(rkr->efx_Looper->getpar(7));
     update_looper();
     break;
     case 278:
     looper_t2->value(rkr->efx_Looper->getpar(8));
     update_looper();
     break;
     case 279:
     looper_clear->value(rkr->efx_Looper->getpar(4));
     update_looper();
     break;
     case 280:
     convo_WD->value(rkr->efx_Convol->getpar(0)-64);
     convo_WD->redraw();
     break;
     case 281:
     convo_pan->value(rkr->efx_Convol->getpar(1)-64);
     convo_pan->redraw();
     break;
     case 282:
     convo_level->value(rkr->efx_Convol->getpar(7));
     convo_level->redraw();
     break;
     case 283:
     convo_damp->value(rkr->efx_Convol->getpar(6));
     convo_damp->redraw();
     break;
     case 284:
     convo_fb->value(rkr->efx_Convol->getpar(10));
     convo_fb->redraw();
     break;
     case 285:
     convo_length->value(rkr->efx_Convol->getpar(3));
     convo_length->redraw();
     break;
     case 286:
     coil_WD->value(rkr->efx_CoilCrafter->getpar(0));
     coil_WD->redraw();
     break;
     case 287:
     coil_tone->value(rkr->efx_CoilCrafter->getpar(7));
     coil_tone->redraw();
     break;
     case 288:
     coil_freq1->value(rkr->efx_CoilCrafter->getpar(3));
     coil_freq1->redraw();
     break;
     case 289:
     coil_q1->value(rkr->efx_CoilCrafter->getpar(4));
     coil_q1->redraw();
     break;
     case 290:
     coil_freq2->value(rkr->efx_CoilCrafter->getpar(5));
     coil_freq2->redraw();
     break;
     case 291:
     coil_q2->value(rkr->efx_CoilCrafter->getpar(6));
     coil_q2->redraw();
     break;
     case 292:
     shelf_gain->value(rkr->efx_ShelfBoost->getpar(0));
     shelf_gain->redraw();     
     break;
     case 293:
     shelf_level->value(rkr->efx_ShelfBoost->getpar(4));
     shelf_level->redraw();     
     break;
     case 294:
     shelf_freq1->value(rkr->efx_ShelfBoost->getpar(2));
     shelf_freq1->redraw();     
     break;
     case 295:
     shelf_q1->value(rkr->efx_ShelfBoost->getpar(1));
     shelf_q1->redraw();     
     break;
     case 296:
     vo_WD->value(rkr->efx_Vocoder->getpar(0)-64); 
     vo_WD->redraw();
     break;
     case 297:
     vo_pan->value(rkr->efx_Vocoder->getpar(1)-64); 
     vo_pan->redraw();
     break;
     case 298:
     vo_input->value(rkr->efx_Vocoder->getpar(4)); 
     vo_input->redraw();
     break;
     case 299:
     vo_mu->value(rkr->efx_Vocoder->getpar(2)); 
     vo_mu->redraw();
     break;
     case 300:
     vo_q->value(rkr->efx_Vocoder->getpar(3)); 
     vo_q->redraw();
     break;
     case 301:
     vo_ring->value(rkr->efx_Vocoder->getpar(6)); 
     vo_ring->redraw();
     break;
     case 302:
     vo_level->value(rkr->efx_Vocoder->getpar(5)); 
     vo_level->redraw();
     break;
     case 303:
     rbecho_WD->value(rkr->efx_RBEcho->getpar(0)-64);
     rbecho_WD->redraw();
     break;
     case 304:
     rbecho_RV->value(rkr->efx_RBEcho->getpar(7));
     rbecho_RV->redraw();
     break;
     case 305:
     rbecho_pan->value(rkr->efx_RBEcho->getpar(1)-64);
     rbecho_pan->redraw();
     break;
     case 306:
     rbecho_delay->value(rkr->efx_RBEcho->getpar(2));
     rbecho_delay->redraw();
     break;
     case 307:
     rbecho_LRdl->value(rkr->efx_RBEcho->getpar(3));
     rbecho_LRdl->redraw();
     break;
     case 308:
     rbecho_fb->value(rkr->efx_RBEcho->getpar(5));
     rbecho_fb->redraw();
     break;
     case 309:
     rbecho_damp->value(rkr->efx_RBEcho->getpar(6));
     rbecho_damp->redraw();
     break;
     case 310:
     rbecho_es->value(rkr->efx_RBEcho->getpar(9));
     rbecho_es->redraw();
     break;
     case 311:
     rbecho_angle->value(rkr->efx_RBEcho->getpar(4)-64);
     rbecho_angle->redraw();
     break;
     case 312:
     sus_gain->value(rkr->efx_Sustainer->getpar(0));
     sus_gain->redraw();
     break;
     case 313:
     sus_sus->value(rkr->efx_Sustainer->getpar(1));
     sus_sus->redraw();
     break;
     case 314:
     seq_WD->value(rkr->efx_Sequence->getpar(8)-64);
     seq_WD->redraw();
     break;
     case 315:
     seq_1->value(rkr->efx_Sequence->getpar(0));
     seq_1->redraw();
     break;
     case 316:
     seq_2->value(rkr->efx_Sequence->getpar(1));
     seq_2->redraw();
     break;
     case 317:
     seq_3->value(rkr->efx_Sequence->getpar(2));
     seq_3->redraw();
     break;
     case 318:
     seq_4->value(rkr->efx_Sequence->getpar(3));
     seq_4->redraw();
     break;
     case 319:
     seq_5->value(rkr->efx_Sequence->getpar(4));
     seq_5->redraw();
     break;
     case 320:
     seq_6->value(rkr->efx_Sequence->getpar(5));
     seq_6->redraw();
     break;
     case 321:
     seq_7->value(rkr->efx_Sequence->getpar(6));
     seq_7->redraw();
     break;
     case 322:
     seq_8->value(rkr->efx_Sequence->getpar(7));
     seq_8->redraw();
     break;
     case 323:
     seq_tempo->value(rkr->efx_Sequence->getpar(9));
     seq_tempo->redraw();
     break;
     case 324:
     seq_q->value(rkr->efx_Sequence->getpar(10)-64);
     seq_q->redraw();
     break;
     case 325:
     seq_stdf->value(rkr->efx_Sequence->getpar(12));
     seq_stdf->redraw();
     break;
     case 326:
     shifter_WD->value(rkr->efx_Shifter->getpar(0)-64);
     shifter_WD->redraw();
     break;
     case 327:
     shifter_int->value(rkr->efx_Shifter->getpar(6));
     shifter_int->redraw();
     break;
     case 328:
     shifter_gain->value(rkr->efx_Shifter->getpar(2)-64);
     shifter_gain->redraw();
     break;
     case 329:
     shifter_pan->value(rkr->efx_Shifter->getpar(1)-64);
     shifter_pan->redraw();
     break;
     case 330:
     shifter_attack->value(rkr->efx_Shifter->getpar(3));
     shifter_attack->redraw();
     break;
     case 331:
     shifter_decay->value(rkr->efx_Shifter->getpar(4));
     shifter_decay->redraw();
     break;
     case 332:
     shifter_thre->value(rkr->efx_Shifter->getpar(5));
     shifter_thre->redraw();
     break;
     case 333:
     shifter_whammy->value(rkr->efx_Shifter->getpar(9));
     shifter_whammy->redraw();
     break;
     case 334:
     stomp_WD->value(rkr->efx_StompBox->getpar(0));
     stomp_WD->redraw();
     break;
     case 335:
     stomp_gain->value(rkr->efx_StompBox->getpar(4));
     stomp_gain->redraw();
     break;
     case 336:
     stomp_low->value(rkr->efx_StompBox->getpar(3)-64);
     stomp_low->redraw();
     break;
     case 337:
     stomp_mid->value(rkr->efx_StompBox->getpar(2)-64);
     stomp_mid->redraw();
     break;
     case 338:
     stomp_high->value(rkr->efx_StompBox->getpar(1)-64);
     stomp_high->redraw();
     break;
     case 339:
     revtron_WD->value(rkr->efx_Reverbtron->getpar(0)-64);
     revtron_WD->redraw();
     break;
     case 340:
     revtron_pan->value(rkr->efx_Reverbtron->getpar(11)-64);
     revtron_pan->redraw();
     break;
     case 341:
     revtron_level->value(rkr->efx_Reverbtron->getpar(7));
     revtron_level->redraw();
     break;
     case 342:
     revtron_damp->value(rkr->efx_Reverbtron->getpar(6));
     revtron_damp->redraw();
     break;
     case 343:
     revtron_fb->value(rkr->efx_Reverbtron->getpar(10)-64);
     revtron_fb->redraw();
     break;
     case 344:
     revtron_length->value(rkr->efx_Reverbtron->getpar(3));
     revtron_length->redraw();
     break;
     case 345:
     revtron_strech->value(rkr->efx_Reverbtron->getpar(9)-64);
     revtron_strech->redraw();
     break;
     case 346:
     revtron_idelay->value(rkr->efx_Reverbtron->getpar(5));
     revtron_idelay->redraw();
     break;
     case 347:
     revtron_fade->value(rkr->efx_Reverbtron->getpar(1));
     revtron_fade->redraw();
     break;
     case 348:
     echotron_WD->value(rkr->efx_Echotron->getpar(0)-64);
     echotron_WD->redraw();
     break;
     case 349:
     echotron_pan->value(rkr->efx_Echotron->getpar(11)-64);
     echotron_pan->redraw();
     break;
     case 350:
     echotron_tempo->value(rkr->efx_Echotron->getpar(5));
     echotron_tempo->redraw();
     break;
     case 351:
     echotron_damp->value(rkr->efx_Echotron->getpar(6));
     echotron_damp->redraw();
     break;
     case 352:
     echotron_fb->value(rkr->efx_Echotron->getpar(10)-64);
     echotron_fb->redraw();
     break;
     case 353:
     echotron_lrcross->value(rkr->efx_Echotron->getpar(7)-64);
     echotron_lrcross->redraw();
     break;
     case 354:
     echotron_width->value(rkr->efx_Echotron->getpar(2));
     echotron_width->redraw();
     break;
     case 355:
     echotron_deep->value(rkr->efx_Echotron->getpar(1)-64);
     echotron_deep->redraw();
     break;
     case 356:
     echotron_stdf->value(rkr->efx_Echotron->getpar(9));
     echotron_stdf->redraw();
     break;
     case 357:
     echotron_length->value(rkr->efx_Echotron->getpar(3));
     echotron_length->redraw();
     break;
     case 358:
     shar_WD->value(rkr->efx_StereoHarm->getpar(0)-64);
     shar_WD->redraw();
     break;
     case 359:
     shar_intl->value(rkr->efx_StereoHarm->getpar(2));
     shar_intl->redraw();
     break;
     case 360:
     shar_chl->value(rkr->efx_StereoHarm->getpar(3));
     shar_chl->redraw();
     break;
     case 361:
     shar_ganl->value(rkr->efx_StereoHarm->getpar(1)-64);
     shar_ganl->redraw();
     break;
     case 362:
     shar_intr->value(rkr->efx_StereoHarm->getpar(5));
     shar_intr->redraw();
     break;
     case 363:
     shar_chr->value(rkr->efx_StereoHarm->getpar(6));
     shar_chr->redraw();
     break;
     case 364:
     shar_ganr->value(rkr->efx_StereoHarm->getpar(4)-64);
     shar_ganr->redraw();
     break;
     case 365:
     shar_lrc->value(rkr->efx_StereoHarm->getpar(11)-64);
     shar_lrc->redraw();
     break;
     case 366:
     shar_note->value(rkr->efx_StereoHarm->getpar(8));
     shar_note->redraw();
     Chord(1);
     break;
     case 367:
     shar_type->value(rkr->efx_StereoHarm->getpar(9));
     shar_type->redraw();
     Chord(1);
     break;
     case 368:
     cband_WD->value(rkr->efx_CompBand->getpar(0)-64);
     cband_WD->redraw();
     break;
     case 369:
     cband_gain->value(rkr->efx_CompBand->getpar(12));
     cband_gain->redraw();
     break;
     case 370:
     cband_Lratio->value(rkr->efx_CompBand->getpar(1));
     cband_Lratio->redraw();
     break;
     case 371:
     cband_MLratio->value(rkr->efx_CompBand->getpar(2));
     cband_MLratio->redraw();
     break;
     case 372:
     cband_MHratio->value(rkr->efx_CompBand->getpar(3));
     cband_MHratio->redraw();
     break;
     case 373:
     cband_Hratio->value(rkr->efx_CompBand->getpar(4));
     cband_Hratio->redraw();
     break;
     case 374:
     cband_Lthres->value(rkr->efx_CompBand->getpar(5));
     cband_Lthres->redraw();
     break;
     case 375:
     cband_MLthres->value(rkr->efx_CompBand->getpar(6));
     cband_MLthres->redraw();
     break;
     case 376:
     cband_MHthres->value(rkr->efx_CompBand->getpar(7));
     cband_MHthres->redraw();
     break;
     case 377:
     cband_Hthres->value(rkr->efx_CompBand->getpar(8));
     cband_Hthres->redraw();
     break;
     case 378:
     cband_cross1->value(rkr->efx_CompBand->getpar(9));
     cband_cross1->redraw();
     break;
     case 379:
     cband_cross2->value(rkr->efx_CompBand->getpar(10));
     cband_cross2->redraw();
     break;
     case 380:
     cband_cross3->value(rkr->efx_CompBand->getpar(11));
     cband_cross3->redraw();
     break;
     case 381:
     otrem_dpth->value(rkr->efx_Opticaltrem->getpar(0));
     otrem_dpth->redraw();
     break;
     case 382:
     otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
     otrem_freq->redraw();
     break;
     case 383:
     otrem_rnd->value(rkr->efx_Opticaltrem->getpar(2));
     otrem_rnd->redraw();
     break;
     case 384:
     otrem_stdf->value(rkr->efx_Opticaltrem->getpar(4));
     otrem_stdf->redraw();
     break;
     case 385:
     otrem_pan->value(rkr->efx_Opticaltrem->getpar(5)-64);
     otrem_pan->redraw();
     break;
     case 386:
     vibe_WD->value(rkr->efx_Vibe->getpar(6)-64);
     vibe_WD->redraw();
     break;
     case 387:
     vibe_width->value(rkr->efx_Vibe->getpar(0));
     vibe_width->redraw();
     break;
     case 388:
     vibe_dpth->value(rkr->efx_Vibe->getpar(8));
     vibe_dpth->redraw();
     break;
     case 389:
     vibe_freq->value(rkr->efx_Vibe->getpar(1));
     vibe_freq->redraw();
     break;
     case 390:
     vibe_rnd->value(rkr->efx_Vibe->getpar(2));
     vibe_rnd->redraw();
     break;
     case 391:
     vibe_stdf->value(rkr->efx_Vibe->getpar(4));
     vibe_stdf->redraw();
     break;
     case 392:
     vibe_fb->value(rkr->efx_Vibe->getpar(7)-64);
     vibe_fb->redraw();
     break;
     case 393:
     vibe_LR->value(rkr->efx_Vibe->getpar(9)-64);
     vibe_LR->redraw();
     break;
     case 394:
     vibe_pan->value(rkr->efx_Vibe->getpar(6)-64);
     vibe_pan->redraw();
     break;
     case 395:
     infinity_WD->value(rkr->efx_Infinity->getpar(0)-64);
     infinity_WD->redraw();
     break;  	
     case 396:
     infinity_Q->value(rkr->efx_Infinity->getpar(9));
     infinity_Q->redraw();
     break;  	
     case 397:
     infinity_pan->value(rkr->efx_Infinity->getpar(15));
     infinity_pan->redraw();
     break;  	
     case 398:
     infinity_stdf->value(rkr->efx_Infinity->getpar(13)-64);
     infinity_stdf->redraw();
     break;  	
     case 399:
     infinity_start->value(rkr->efx_Infinity->getpar(10));
     infinity_start->redraw();
     break;  	
     case 400:
     infinity_end->value(rkr->efx_Infinity->getpar(11));
     infinity_end->redraw();
     break;  	
     case 401:
     infinity_rate->value(rkr->efx_Infinity->getpar(12));
     infinity_rate->redraw();
     break;  	
     case 402:
     infinity_subdiv->value(rkr->efx_Infinity->getpar(14));
     infinity_subdiv->redraw();
     break;  	


     
      
}


}


rkr->Mvalue=0;} {}
  }
  Function {ActOnOff()} {open
  } {
    code {int miralo;


while(rkr->OnOffC>0)
{


if(rkr->Mnumeff[rkr->OnOffC] >2000) miralo = rkr->Mnumeff[rkr->OnOffC]-2000;
else
if(rkr->Mnumeff[rkr->OnOffC] >=1000) miralo=rkr->Mnumeff[rkr->OnOffC]-1000;
else
miralo = rkr->efx_order[rkr->Mnumeff[rkr->OnOffC]];

switch(miralo)
{
  case 0:
  eq_activar->value(rkr->EQ1_Bypass);
  eq_activar->do_callback();
  break;
  case 1:
  compress_activar->value(rkr->Compressor_Bypass);
  compress_activar->do_callback();
  break;
  case 2:
  dist_activar->value(rkr->Distorsion_Bypass);
  dist_activar->do_callback();
  break;
  case 3:
  ovrd_activar->value(rkr->Overdrive_Bypass);
  ovrd_activar->do_callback();
  break;
  case 4:
  echo_activar->value(rkr->Echo_Bypass);
  echo_activar->do_callback();
  break;
  case 5:
  chorus_activar->value(rkr->Chorus_Bypass);
  chorus_activar->do_callback();
  break;
  case 6:
  phaser_activar->value(rkr->Phaser_Bypass);
  phaser_activar->do_callback();
  break;
  case 7:
  flanger_activar->value(rkr->Flanger_Bypass);
  flanger_activar->do_callback();
  break;
  case 8:
  reverb_activar->value(rkr->Reverb_Bypass);
  reverb_activar->do_callback();
  break;
  case 9:
  eqp_activar->value(rkr->EQ2_Bypass);
  eqp_activar->do_callback();
  break;
  case 10:
  WhaWha_activar->value(rkr->WhaWha_Bypass);
  WhaWha_activar->do_callback();
  break;
  case 11:
  Alienwah_activar->value(rkr->Alienwah_Bypass);
  Alienwah_activar->do_callback();
  break;
  case 12:
  Cabinet_activar->value(rkr->Cabinet_Bypass);
  Cabinet_activar->do_callback();
  break;
  case 13:
  pan_activar->value(rkr->Pan_Bypass);
  pan_activar->do_callback();
  break;
  case 14:
  har_activar->value(rkr->Harmonizer_Bypass);
  har_activar->do_callback();
  break;
  case 15:
  musdelay_activar->value(rkr->MusDelay_Bypass);
  musdelay_activar->do_callback();
  break;
  case 16:
  gate_activar->value(rkr->Gate_Bypass);
  gate_activar->do_callback();
  break;
  case 17:
  newdist_activar->value(rkr->NewDist_Bypass);
  newdist_activar->do_callback();
  break;
  case 18:
  aphaser_activar->value(rkr->APhaser_Bypass);
  aphaser_activar->do_callback();
  break;
  case 19:
  valve_activar->value(rkr->Valve_Bypass);
  valve_activar->do_callback();
  break;
  case 20:
  dflange_activar->value(rkr->DFlange_Bypass);
  dflange_activar->do_callback();
  break;
  case 21:
  ring_activar->value(rkr->Ring_Bypass);
  ring_activar->do_callback();
  break;
  case 22:
  exciter_activar->value(rkr->Exciter_Bypass);
  exciter_activar->do_callback();
  break;
  case 23:
  mbdist_activar->value(rkr->MBDist_Bypass);
  mbdist_activar->do_callback();
  break;
  case 24:
  arpie_activar->value(rkr->Arpie_Bypass);
  arpie_activar->do_callback();
  break;
  case 25:
  expander_activar->value(rkr->Expander_Bypass);
  expander_activar->do_callback();
  break;
  case 26:
  shuffle_activar->value(rkr->Shuffle_Bypass);
  shuffle_activar->do_callback();
  break;
  case 27:
  synthfilter_activar->value(rkr->Synthfilter_Bypass);
  synthfilter_activar->do_callback();
  break;
  case 28:
  mbvvol_activar->value(rkr->MBVvol_Bypass);
  mbvvol_activar->do_callback();
  break;
  case 29:
  convo_activar->value(rkr->Convol_Bypass);
  convo_activar->do_callback();
  break;
  case 30:
  looper_activar->value(rkr->Looper_Bypass);
  looper_activar->do_callback();
  break;
  case 31:
  ryanwah_activar->value(rkr->RyanWah_Bypass);
  ryanwah_activar->do_callback();
  break;  
  case 32:
  rbecho_activar->value(rkr->RBEcho_Bypass);
  rbecho_activar->do_callback();
  break;
  case 33:
  coil_activar->value(rkr->CoilCrafter_Bypass);
  coil_activar->do_callback();
  break;
  case 34:
  shelf_activar->value(rkr->ShelfBoost_Bypass);
  shelf_activar->do_callback();
  break;
  case 35:
  vo_activar->value(rkr->Vocoder_Bypass);
  vo_activar->do_callback();
  break;
  case 36:
  sus_activar->value(rkr->Sustainer_Bypass);
  sus_activar->do_callback();
  break;
  case 37:
  seq_activar->value(rkr->Sequence_Bypass);
  seq_activar->do_callback();
  break;
 case 38:
  shifter_activar->value(rkr->Shifter_Bypass);
  shifter_activar->do_callback();
  break;
 case 39:
  stomp_activar->value(rkr->StompBox_Bypass);
  stomp_activar->do_callback();
  break;
 case 40:
  revtron_activar->value(rkr->Reverbtron_Bypass);
  revtron_activar->do_callback();
  break;
 case 41:
  echotron_activar->value(rkr->Echotron_Bypass);
  echotron_activar->do_callback();
  break;
 case 42:
  shar_activar->value(rkr->StereoHarm_Bypass);
  shar_activar->do_callback();
  break;
 case 43:
  cband_activar->value(rkr->CompBand_Bypass);
  cband_activar->do_callback();
  break;
 case 44:
  otrem_activar->value(rkr->Opticaltrem_Bypass);
  otrem_activar->do_callback();
  break;
case 45:
  vibe_activar->value(rkr->Vibe_Bypass);
  vibe_activar->do_callback();
  break;
case 46:
  infinity_activar->value(rkr->Infinity_Bypass);
  infinity_activar->do_callback();
  break;
  
  case 121:
  Tap_activar->value(rkr->Tap_Bypass);
  Tap_activar->do_callback();
  break;
  case 122:
  midi_activar->value(rkr->MIDIConverter_Bypass);
  midi_activar->do_callback();
  break;
  case 123:
  tuner_activar->value(rkr->Tuner_Bypass);
  tuner_activar->do_callback();
  break;
  case 124:
  ActivarGeneral->value(rkr->Bypass);
  ActivarGeneral->do_callback();
  break;
     

}

rkr->OnOffC--;


}} {}
  }
  Function {light_preset(int npreset)} {} {
    code {if(!made) return;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp == npreset)
    {
     w->color(fl_darker(leds_color));
     break;
     }
  
  }} {}
  }
  Function {unlight_preset(int npreset)} {} {
    code {if(!made) return;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp == npreset)
    {
     w->color(fore_color);
     break;
     }
  
  }} {}
  }
  Function {PutBackground()} {} {
    code {delete back;
back = new Fl_Tiled_Image(new Fl_PNG_Image(rkr->BackgroundImage),1600,1200);
if(!rkr->EnableBackgroundImage)
back->color_average(back_color,0.0);

InOut->image(back);
EQ->image(InOut->image());
COMPRESS->image(InOut->image());
DIST->image(InOut->image());
OVRD->image(InOut->image());
ECHO->image(InOut->image());
CHORUS->image(InOut->image());
FLANGER->image(InOut->image());
WHAWHA->image(InOut->image());
ALIENWAH->image(InOut->image());
PHASER->image(InOut->image());
REVERB->image(InOut->image());
PEQ->image(InOut->image());
CABINET->image(InOut->image());
PAN->image(InOut->image());
HAR->image(InOut->image());
MUSDELAY->image(InOut->image());
GATE->image(InOut->image());
NEWDIST->image(InOut->image());
APHASER->image(InOut->image());
VALVE->image(InOut->image());
DFLANGE->image(InOut->image());
RING->image(InOut->image());
EXCITER->image(InOut->image());
MBDIST->image(InOut->image());
ARPIE->image(InOut->image());
EXPANDER->image(InOut->image());
SHUFFLE->image(InOut->image());
SYNTHFILTER->image(InOut->image());
MBVVOL->image(InOut->image());
CONVOLOTRON->image(InOut->image());
LOOPER->image(InOut->image());
RYANWAH->image(InOut->image());
RBECHO->image(InOut->image());
COILCRAFTER->image(InOut->image());
SHELFBOOST->image(InOut->image());
VOCODER->image(InOut->image());
SUSTAINER->image(InOut->image());
SEQUENCE->image(InOut->image());
SHIFTER->image(InOut->image());
STOMPBOX->image(InOut->image());
REVERBTRON->image(InOut->image());
ECHOTRON->image(InOut->image());
SHAR->image(InOut->image());
COMPBAND->image(InOut->image());
OTREM->image(InOut->image());
VIBE->image(InOut->image());
INFINIT->image(InOut->image());

Tap->image(InOut->image());
Presets->image(InOut->image());
Tuner->image(InOut->image());
Midi->image(InOut->image());
Metro->image(InOut->image());
fondo->image(InOut->image());
TITTLE_L->image(InOut->image());
Fondo1->image(InOut->image());
Fondo2->image(InOut->image());
Fondo3->image(InOut->image());
Fondo4->image(InOut->image());
Fondo5->image(InOut->image());
Fondo6->image(InOut->image());
Fondo7->image(InOut->image());
Fondo8->image(InOut->image());
Fondo9->image(InOut->image());
Fondo10->image(InOut->image());
Fondo11->image(InOut->image());










Etit->image(InOut->image());
Ares->image(InOut->image());

MenuP->image(InOut->image());
MenuB->image(InOut->image());


Fl::redraw();} {}
  }
  Function {chfsize(int value)} {} {
    code {unsigned char k;



for (int t=0; t<Principal->children();t++)
  {
    Fl_Widget *w = Principal->child(t);
    long long ud = (long long) w->user_data();
  
     k= w->labelsize();
     k+=value;
     if((ud<770) || (ud>779))
     {
     if((k>2)&&(k<16)) w->labelsize(k);
     }
     else
     if((k>6)&&(k<20)) w->labelsize(k);
     
     if(ud != 5) w->labelcolor(label_color); else w->labelcolor(leds_color); 
     if (ud !=2) w->selection_color(back_color); else w->selection_color(leds_color);
     
   
    
    if (ud==1)
    {
          
     Fl_Group *g = (Fl_Group *)w;     
      
     for(int i=0;i<g->children();i++)
       {

         Fl_Widget *c = g->child(i);
         long long uh = (long long) c->user_data();
         

          k= c->labelsize();
          k+=value;
          if((uh==7) || (uh == 77))
          {
          if((k>6)&&(k<20))c->labelsize(k);
          }
          else
          if((k>2)&&(k<16))c->labelsize(k);
          if(uh != 5) c->labelcolor(label_color); else c->labelcolor(leds_color);
          if (uh !=7) c->selection_color(back_color); 
          if ((uh==2)||(uh==7)||(uh==77) || (uh == 78)) c->selection_color(leds_color);
          c->color(fore_color);
          c->labelfont(rkr->font);
       
          if(((uh >=12000) && (uh <=12100)) || (uh ==12))
           {
  
             Fl_Menu_*n = (Fl_Menu_*)c;
             
             Fl_Menu_Item *m = (Fl_Menu_Item*) n->menu(); 
             Fl_Menu_Item *p;  
             for(int s=0; s<m->size(); s++)
                  {
                    p=m->next(s);
                    k=p->labelsize();
                    k+=value;
                    if((k>2) &&(k<16))p->labelsize(k);
                    
                   }
             
       
  
            } 
       
  
  
          
       } 
    } 
 
  }



          k= WPreset_Name->textsize();
          k+=value;
          if((k>10)&&(k<32))WPreset_Name->textsize(k);


          CLIP_LED->selection_color(FL_RED);





ChangeActives();

 
Fl::redraw();} {}
  }
  Function {adjustfont()} {} {
    code {int change,value;

change = Principal->w() - rkr->resolution;
value=change/100;
rkr->resolution=Principal->w();
rkr->relfontsize +=value;
chfsize(value);} {}
  }
  Function {ChangeActives()} {} {
    code {Fl_Color on =  fl_lighter(fl_lighter(label_color));
Fl_Color off = fl_darker(label_color);


if(rkr->active[0]) L1->labelcolor(on); else L1->labelcolor(off);
if(rkr->active[1]) L2->labelcolor(on); else L2->labelcolor(off);
if(rkr->active[2]) L3->labelcolor(on); else L3->labelcolor(off);
if(rkr->active[3]) L4->labelcolor(on); else L4->labelcolor(off);
if(rkr->active[4]) L5->labelcolor(on); else L5->labelcolor(off);
if(rkr->active[5]) L6->labelcolor(on); else L6->labelcolor(off);
if(rkr->active[6]) L7->labelcolor(on); else L7->labelcolor(off);
if(rkr->active[7]) L8->labelcolor(on); else L8->labelcolor(off);
if(rkr->active[8]) L9->labelcolor(on); else L9->labelcolor(off);
if(rkr->active[9]) L10->labelcolor(on); else L10->labelcolor(off);



if(rkr->MIDIConverter_Bypass) MIDI_LABEL->labelcolor(on); else MIDI_LABEL->labelcolor(off);
if(rkr->Metro_Bypass) Metro_Label->labelcolor(on); else Metro_Label->labelcolor(off);
if(rkr->Tap_Bypass) TAP_LABEL->labelcolor(on); else TAP_LABEL->labelcolor(off);
if(rkr->Tuner_Bypass) TUNER_LABEL->labelcolor(on); else TUNER_LABEL->labelcolor(off);
if(rkr->Bypass) LABEL_IO->labelcolor(on); else LABEL_IO->labelcolor(off);
if((rkr->upsample) && (rkr->Bypass)) 
{
UPS_LED->color(leds_color);
UPS_LED->redraw();
}
 else
{ 
 UPS_LED->color(fl_darker(leds_color));
 UPS_LED->redraw();
}
CLIP_LED->color(fl_darker(FL_RED));
LMT_LED->color(fl_darker(leds_color));} {}
  }
  Function {findpos(int num, int value, Fl_Widget *w)} {} {
    code {int i;
Fl_Color on = fl_lighter(fl_lighter(label_color));
Fl_Color off= fl_darker(label_color);

for(i=0; i<10; i++)
 {
    if (rkr->efx_order[i]== num)
      {
        rkr->active[i]=value;
        break;
       }
  }
  
  
  
  
  switch(i)
  
  {
  
     case 0:
     if(value) L1->labelcolor(on); else L1->labelcolor(off);
     L1->redraw_label();
     break;  
     
     case 1:
     if(value) L2->labelcolor(on); else L2->labelcolor(off);
     L2->redraw_label();
     break;  
       
     case 2:
     if(value) L3->labelcolor(on); else L3->labelcolor(off);
     L3->redraw_label();
     break;  
       
     case 3:
     if(value) L4->labelcolor(on); else L4->labelcolor(off);
     L4->redraw_label();
     break;  
       
     case 4:
     if(value) L5->labelcolor(on); else L5->labelcolor(off);
     L5->redraw_label();
     break;  
       
     case 5:
     if(value) L6->labelcolor(on); else L6->labelcolor(off);
     L6->redraw_label();
     break;  
       
     case 6:
     if(value) L7->labelcolor(on); else L7->labelcolor(off);
     L7->redraw_label();
     break;  
       
     case 7:
     if(value) L8->labelcolor(on); else L8->labelcolor(off);
     L8->redraw_label();
     break;  
       
     case 8:
     if(value) L9->labelcolor(on); else L9->labelcolor(off);
     L9->redraw_label();
     break;  
       
     case 9:
     if(value) L10->labelcolor(on); else L10->labelcolor(off);
     L10->redraw_label();
     break;  
       
 }} {}
  }
  Function {Put_Skin(int last)} {} {
    code {Principal->resize(Principal->x(),Principal->y(),rkr->resolution,rkr->sh);

back_color=(Fl_Color)rkr->sback_color;
fore_color=(Fl_Color)rkr->sfore_color;
leds_color=(Fl_Color)rkr->sleds_color;
label_color=(Fl_Color)rkr->slabel_color;

scheme_ch->value(rkr->sschema);
scheme_ch->do_callback();
PutBackground();
chfsize(rkr->relfontsize - last);
Leds_Color_Change(leds_color);
Buttons_Color_Change(fore_color);


save_stat(3);
Fl::redraw();} {}
  }
  Function {FillML(int type)} {} {
    code {int i,j,k;
char tmp[256];
memset(tmp,0, sizeof(tmp));


sprintf(tmp,"%s   v%s - MIDI Learn - Preset : %s",rkr->jackcliname,VERSION,rkr->Bank[rkr->Selected_Preset].Preset_Name);
MIDILearn->copy_label(tmp);

memset(rkr->ML_clist,0,sizeof(rkr->ML_clist));
Epar->clear();
k=0;

switch(rkr->ML_filter) 
{
  
 case 0:
 for(i=0; i<rkr->NumParams; i++) Epar->add(rkr->efx_params[i].Nom);  
 break;

 case 1:
 for(i=0;i<rkr->NumParams;i++)
      {
        if(rkr->efx_params[i].Effect==50)
         { 
         Epar->add(rkr->efx_params[i].Nom); 
         rkr->ML_clist[k]=rkr->efx_params[i].Ato;
         k++;
         }
      
      } 
 for(j=0;j<10;j++)
  {
    for(i=0;i<rkr->NumParams;i++)
      {
        if(rkr->efx_params[i].Effect==rkr->efx_order[j])
         { 
         Epar->add(rkr->efx_params[i].Nom); 
         rkr->ML_clist[k]=rkr->efx_params[i].Ato;
         k++;
         }
      
      } 
      
  }
  
  
  break;
}

Epar->redraw();




TPresets->clear();
for(i=1; i<=60; i++)  TPresets->add(rkr->Bank[i].Preset_Name);
TPresets->select(rkr->Selected_Preset,1);
TPresets->redraw();

DisAssigns();} {}
  }
  Function {DisAssigns()} {} {
    code {int i,j,k;
char tmp[8];

int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


k=0;

for(i=0;i<128;i++)
  {
    for(j=0;j<20;j++)
      { 
        
       if(rkr->XUserMIDI[i][j] == the_one)
         {
           k++;     
           memset(tmp,0, sizeof(tmp));
           sprintf(tmp, "%d", i);
           
           switch (k)
           {
           case 1:
              Ar1->copy_label(tmp);
              Ar1->redraw();
              break;     
                            
           case 2:
              Ar2->copy_label(tmp);
              Ar2->redraw();
              break;     
        
           case 3:
              Ar3->copy_label(tmp);
              Ar3->redraw();
              break;     
        
           case 4:
              Ar4->copy_label(tmp);
              Ar4->redraw();
              break;     
        
           case 5:
              Ar5->copy_label(tmp);
              Ar5->redraw();
              break;     
        
           case 6:
              Ar6->copy_label(tmp);
              Ar6->redraw();
              break;     
    
           case 7:
              Ar7->copy_label(tmp);
              Ar7->redraw();
              break;     
    
           case 8:
              Ar8->copy_label(tmp);
              Ar8->redraw();
              break;     
    
           case 9:
              Ar9->copy_label(tmp);
              Ar9->redraw();
              break;     
    
           case 10:
              Ar10->copy_label(tmp);
              Ar10->redraw();
              break;     
        
           case 11:
              Ar11->copy_label(tmp);
              Ar11->redraw();
              break;     
        
           case 12:
              Ar12->copy_label(tmp);
              Ar12->redraw();
              break;     
        
           case 13:
              Ar13->copy_label(tmp);
              Ar13->redraw();
              break;     
    
           case 14:
              Ar14->copy_label(tmp);
              Ar14->redraw();
              break;     

           case 15:
              Ar15->copy_label(tmp);
              Ar15->redraw();
              break;     

           case 16:
              Ar16->copy_label(tmp);
              Ar16->redraw();
              break;     
        
           case 17:
              Ar17->copy_label(tmp);
              Ar17->redraw();
              break;     
        
           case 18:
              Ar18->copy_label(tmp);
              Ar18->redraw();
              break;     
    
           case 19:
              Ar19->copy_label(tmp);
              Ar19->redraw();
              break;     

           case 20:
              Ar20->copy_label(tmp);
              Ar20->redraw();
              break;     


           }



       } 

 }         

}


           k++;     
           
           for(i=k;i<=20;i++)
           {
 
           memset(tmp,0,sizeof(tmp));
           
           switch (i)
           {
           case 1:
              Ar1->copy_label(tmp);
              Ar1->redraw();
              break;     
                            
           case 2:
              Ar2->copy_label(tmp);
              Ar2->redraw();
              break;     
        
           case 3:
              Ar3->copy_label(tmp);
              Ar3->redraw();
              break;     
        
           case 4:
              Ar4->copy_label(tmp);
              Ar4->redraw();
              break;     
        
           case 5:
              Ar5->copy_label(tmp);
              Ar5->redraw();
              break;     
        
           case 6:
              Ar6->copy_label(tmp);
              Ar6->redraw();
              break;     
    
           case 7:
              Ar7->copy_label(tmp);
              Ar7->redraw();
              break;     
    
           case 8:
              Ar8->copy_label(tmp);
              Ar8->redraw();
              break;     
    
           case 9:
              Ar9->copy_label(tmp);
              Ar9->redraw();
              break;     
    
           case 10:
              Ar10->copy_label(tmp);
              Ar10->redraw();
              break;     
        
           case 11:
              Ar11->copy_label(tmp);
              Ar11->redraw();
              break;     
        
           case 12:
              Ar12->copy_label(tmp);
              Ar12->redraw();
              break;     
        
           case 13:
              Ar13->copy_label(tmp);
              Ar13->redraw();
              break;     
    
           case 14:
              Ar14->copy_label(tmp);
              Ar14->redraw();
              break;     

           case 15:
              Ar15->copy_label(tmp);
              Ar15->redraw();
              break;     

           case 16:
              Ar16->copy_label(tmp);
              Ar16->redraw();
              break;     
        
           case 17:
              Ar17->copy_label(tmp);
              Ar17->redraw();
              break;     
        
           case 18:
              Ar18->copy_label(tmp);
              Ar18->redraw();
              break;     
    
           case 19:
              Ar19->copy_label(tmp);
              Ar19->redraw();
              break;     

           case 20:
              Ar20->copy_label(tmp);
              Ar20->redraw();
              break;     


}          

}} {}
  }
  Function {Prepare_Order()} {} {
    code {int i;
Order_Bro->clear();


for (i=0; i<10;i++) 
{
rkr->new_order[i]=rkr->efx_order[i];
rkr->saved_order[i]=rkr->efx_order[i];
Order_Bro->add(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
}

Fill_Avail(rkr->eff_filter);

Order_Bro->select(1);} {}
  }
  Function {Show_Next_Time()} {} {
    code {if(rkr->mess_dis) return;
Fl_Widget *w = fl_message_icon();
w->parent()->copy_label(rkr->jackcliname);         
fl_message("This setting will be changed the next time you run rakarrack");} {}
  }
  Function {update_looper()} {open
  } {
    code {rkr->efx_Looper->getstate();

looper_play->value(rkr->efx_Looper->progstate[0]);
looper_play->redraw();
looper_record->value(rkr->efx_Looper->progstate[2]);
looper_record->redraw();
looper_stop->value(rkr->efx_Looper->progstate[1]);
looper_stop->redraw();
if(rkr->efx_Looper->progstate[2])
{
  Box_P->copy_label("Stop");
  looper_stop->copy_label("@square");  
}
else
{
  Box_P->copy_label("Pause");
  looper_stop->copy_label("@||");
}
  
looper_t1->value(rkr->efx_Looper->progstate[4]);
looper_t1->redraw();
looper_t2->value(rkr->efx_Looper->progstate[5]);
looper_t2->redraw();} {}
  }
  Function {UpdateTGUI()} {open
  } {
    code {if(rkr->Looper_Bypass)
   {
   looper_Tempo->value(rkr->efx_Looper->getpar(14));
   looper_Tempo->redraw();
   }  

if(rkr->Chorus_Bypass)
  {
  chorus_freq->value(rkr->efx_Chorus->getpar(2));
  chorus_freq->redraw();
  }
  
  if(rkr->Flanger_Bypass)
  {
  flanger_freq->value(rkr->efx_Flanger->getpar(2));
  flanger_freq->redraw();
  }
  
  if(rkr->Phaser_Bypass)
  {
  phaser_freq->value(rkr->efx_Phaser->getpar(2));
  phaser_freq->redraw();
  }
  
  if(rkr->Pan_Bypass)
  {
  pan_freq->value(rkr->efx_Pan->getpar(2));
  pan_freq->redraw();
  }
  
  if(rkr->WhaWha_Bypass)
  {
  WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
  WhaWha_freq->redraw();
  }
  
  if(rkr->Alienwah_Bypass)
  {
  Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
  Alienwah_freq->redraw();
  }
  
  if(rkr->MusDelay_Bypass)
  {
  musdelay_tempo->value(rkr->efx_MusDelay->getpar(10));
  musdelay_tempo->redraw();
  }
  
  if(rkr->APhaser_Bypass)
  {
  aphaser_freq->value(rkr->efx_APhaser->getpar(2));
  aphaser_freq->redraw();
  }
  
  if(rkr->DFlange_Bypass)
  {
  dflange_freq->value(rkr->efx_DFlange->getpar(10));
  dflange_freq->redraw();
  }
  
  if(rkr->Synthfilter_Bypass)
  {
  synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
  synthfilter_freq->redraw();
  }
  
  if(rkr->RyanWah_Bypass)
  {
  ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
  ryanwah_freq->redraw();
  }
    
  if(rkr->MBVvol_Bypass)
  {
  mbvvol_freq1->value(rkr->efx_MBVvol->getpar(1));
  mbvvol_freq1->redraw();
  }
  
  if(rkr->MBVvol_Bypass)
  {
  mbvvol_freq2->value(rkr->efx_MBVvol->getpar(4));
  mbvvol_freq2->redraw();
  }
  
  if(rkr->Arpie_Bypass)
  {
  arpie_delay->value(rkr->efx_Arpie->getpar(2));
  arpie_delay->redraw();
  }
 
  if(rkr->RBEcho_Bypass)
  {
   rbecho_delay->value(rkr->efx_RBEcho->getpar(2));
   rbecho_delay->redraw();
  }
  if(rkr->Sequence_Bypass)
  {
   seq_tempo->value(rkr->efx_Sequence->getpar(9));
   seq_tempo->redraw();
  }
  if(rkr->Echo_Bypass)
  { 
   echo_delay->value(rkr->efx_Echo->getpar(2));
   echo_delay->redraw();
  }
  if(rkr->Echotron_Bypass)
  { 
   echotron_tempo->value(rkr->efx_Echotron->getpar(5));
   echotron_tempo->redraw();
  }
  if(rkr->Opticaltrem_Bypass)
  {
    otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
    otrem_freq->redraw();  
  }
  if(rkr->Vibe_Bypass)
  {
    vibe_freq->value(rkr->efx_Vibe->getpar(1));
    vibe_freq->redraw();  
  }
  if(rkr->Infinity_Bypass)
  {
    infinity_rate->value(rkr->efx_Infinity->getpar(12));
    infinity_rate->redraw();  
  }} {}
  }
  Function {ActACI()} {open
  } {
    code {int value;
int i,amax,amin;
float gain =  0.0;
float tmp = 0.0;

switch(rkr->Aux_Source)
{
   case 0:
      gain =  dB2rap (75.0f * (float)rkr->Aux_Gain / 127.0f);
      tmp = rkr->val_a_sum * gain;
      break;
   case 1:
      gain =  (float)rkr->Aux_Gain / 127.0f;
      tmp = dB2rap(rkr->val_il_sum) * 12.0f * gain ;
      break;
   case 2:
      gain =  (float)rkr->Aux_Gain / 127.0f;
      tmp = dB2rap(rkr->val_ir_sum) * 12.0f * gain;
      break;
}

float aux_vulevel =  (float)CLAMP(rap2dB(tmp), -48.0, 15.0);

float threshold = (float) rkr->Aux_Threshold;
aux_vu->value(aux_vulevel);

if (aux_vulevel < threshold) tmp=0.0;

if(tmp>1.0) tmp= 1.0f;

 amax = rkr->Aux_Maximum;
 amin = rkr->Aux_Minimum;

value = amin + lrintf((float)(amax - amin)* tmp);

if(value != rkr->last_auxvalue)
{

if(rkr->MIDIway)
{

for(i=0; i<20;i++)
    {
      if (rkr->XUserMIDI[rkr->Aux_MIDI][i])
          rkr->process_midi_controller_events(rkr->XUserMIDI[rkr->Aux_MIDI][i],value);
          else break;
   }        

}
else rkr->process_midi_controller_events(rkr->Aux_MIDI,value);   

rkr->last_auxvalue = value;

}} {}
  }
  Function {Busca_Eff(int num)} {open return_type int
  } {
    code {int i;
for(i=0; i<rkr->NumEffects;i++)
 {
   if(rkr->efx_names[i].Pos==num) 
   break;
 }  
 return(i);} {}
  }
  Function {Fill_Avail(int filter)} {open
  } {
    code {int i,j,t,k;

Avail_Bro->clear();

t=1;
for (i=0; i<rkr->NumEffects;i++)
{
  
    k=0;
 for (j=0;j<10;j++)
   { 
     if (rkr->new_order[j]==rkr->efx_names[i].Pos) k=1;
   }     
 
 if(!k)
 
 { 
 
  if((rkr->efx_names[i].Type&rkr->eff_filter)==rkr->eff_filter) 
 { 
  Avail_Bro->add(rkr->efx_names[i].Nom);
  rkr->availables[t]=rkr->efx_names[i].Pos;
  t++;
 }
 
 }

}

Avail_Bro->select(1);} {}
  }
  Function {highlight()} {} {
    code {int tipo=0;
long long k=0;

Fl_Widget *w;

if (Fl::focus() == TITTLE_L) Fl::focus(Open_Order);
if (Fl::focus() == Etit) Fl::focus(Open_Order);
w = Fl::belowmouse();

if(w != NULL)
{
tipo=(int)w->type();
k = (long long) w->user_data();
}
else
{
if(old != NULL)
{
old->color(fore_color);
old->redraw();
}
}


if((tipo==1) || (k == 77)) 
{
if(old != NULL)
{
old->color(fore_color);
old->redraw();
}
   w->color(fl_color_average(fore_color,fl_lighter(fore_color),.8));
   w->redraw();
   old = w;
}

else
{
if(old != NULL)
{
old->color(fore_color);
old->redraw();
old->redraw_label();
}
}

if(k==99)
{
Fl_Browser *b;
b = (Fl_Browser *) w;
int tecla=Fl::event_key();
if(tecla != last_tecla)
{
 last_tecla = tecla; 
 for(int i=1; i<=b->size(); i++)
  {
    if (b->text(i)[0]>=tecla-32) 
     {
       b->select(i,1);
       break;
     }  

  }

}



}} {}
  }
  Function {search_but(int x, int y)} {return_type int
  } {
    code {for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);

    if( (x>=w->x() ) && (x<=(w->x()+w->w())) && (y>=w->y() ) && (y<=(w->y()+w->h())))   
    
    { 
      long long kn = (long long) w->user_data();
      return((int)kn);
    }



  }
  
  
return(1000);} {}
  }
  Function {ScanDir()} {} {
    code {char nombre[64];
  char *nombank;
  DIR *dir;
  struct dirent *fs;

  ClearBankNames();     /* This will free all memory allocated for names */
  CH_UB->clear();

  dir=opendir(DATADIR);
  if (dir==NULL) return;

  while ((fs=readdir(dir)))
  {
  if (strstr(fs->d_name,".rkrb")!=NULL)
    {
      nombank = (char *)calloc(1, 256);
      sprintf(nombank,"%s/%s",DATADIR, fs->d_name);
      AddBankName(nombank);
      if(rkr->CheckOldBank(nombank)==0)
      {
       memset(nombre,0,sizeof(nombre));
       strncpy(nombre,fs->d_name,strlen(fs->d_name)-5);
       if(nombre != NULL)
       {
          CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)nombank, 0);
       }
      }

     }
  }
  closedir(dir);

  dir=opendir(rkr->UDirFilename);
  if (dir==NULL) return;

  while ((fs=readdir(dir)))
  {
  if (strstr(fs->d_name,".rkrb")!=NULL)
    {
      nombank = (char *)calloc(1, 256);
      sprintf(nombank,"%s/%s",rkr->UDirFilename,fs->d_name);
      AddBankName(nombank);
      if(rkr->CheckOldBank(nombank)==0)
      {
       memset(nombre,0,sizeof(nombre));
       strncpy(nombre,fs->d_name,strlen(fs->d_name)-5);
       if(nombre != NULL)
       {
          CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)nombank, 0);
       }
      }

     }
  }
  closedir(dir);

  CH_UB->value(0);} {}
  }
  Function {prevnext(int e)} {open return_type {static int}
  } {
    code {if(e==5)
{
 Fl_Widget *w = Fl::belowmouse();
 long long k = (long long) w->user_data();
 if((k<770)||( k>779)) return 0;
 drag=k-770;
 return 1;
} 


if(e != 12) return 0;
else
{

if((Fl::event_key(43)) || (Fl::event_key(FL_KP + 43)))     // +(plus) key
{
stecla=1;
return 1;
}

if((Fl::event_key(45)) || (Fl::event_key(FL_KP + 45)))     // -(minus) key
{
stecla=2;
return 1;
}

if(Fl::event_key(65471))      // F2 key - decrease output volume
{
stecla=3;
return 1;
}

if(Fl::event_key(65472))      // F3 key - increase output volume
{
stecla=4;
return 1;
}

if(Fl::event_key(65379))      // Insert key - add user preset
{
 Fl_Widget *w = Fl::belowmouse();
 if(w == NULL)
   return 0;
 long long k = (long long) w->user_data();
 if((k>11999) && (k<12100)) 
 ((RKRGUI*)(w->parent()->parent()->user_data()))->addpreset(w,k-12000);
return 1;

}


if(Fl::event_key(65535))      // Delete key - delete user preset
{
 Fl_Widget *w = Fl::belowmouse();
 if(w == NULL)
    return 0;
 long long k = (long long) w->user_data();
 if((k>11999) && (k<12100)) 
 ((RKRGUI*)(w->parent()->parent()->user_data()))->delpreset(w,k-12000);
return 1;

}









}

return 0;} {}
  }
  Function {install_signal_handlers()} {open return_type bool
  } {
    code {/*install signal handlers*/
    struct sigaction action;
    memset(&action, 0, sizeof(action));
    action.sa_handler = sigterm_handler;

    if (sigaction(SIGUSR1, &action, NULL) == -1)
    {
        printf("sigaction() failed: \\n");
        return false;
    }

    if (sigaction(SIGINT, &action, NULL) == -1)
    {
        printf("sigaction() failed: \\n");
        return false;
    }

    return true;} {}
  }
  Function {sigterm_handler(int sig)} {open return_type {static void}
  } {
    code {if(sig == SIGUSR1)
    {
        got_sigusr1 = sig;
    }

    if(sig == SIGINT)
    {
        got_sigint = sig;
    }} {}
  }
  Function {check_signals(void *usrPtr)} {open return_type {static void}
  } {
    code {RKRGUI  *gui = NULL;
    gui = (RKRGUI*)usrPtr;
    
    if(!gui)
        return;
    
    if(got_sigusr1 == SIGUSR1)
    {
        if(filetoload != NULL)      // individual preset
        {
            printf("Saving file: %s\\n", filetoload);
            got_sigusr1 = 0;
            gui->rkr->savefile(filetoload);
        }
        return;
    }
    
    if(got_sigint == SIGINT)
    {
        printf( "Got SIGTERM, quitting...\\n" );
        got_sigint = 0;
        Pexitprogram = 1;
    }} {}
  }
  Function {getMIDIControl(int num)} {} {
    code {int i = 0;
rkr->comemouse=1;
PrepareML();
while (i<Epar->size())
{

 if ((rkr->ML_filter==0) && (rkr->efx_params[i].Ato == num))
 
  {
    Epar->select(i+1);
    break;
   }

 if ((rkr->ML_filter==1) && (rkr->ML_clist[i] == num))
  {
    Epar->select(i+1);
    break;
   }


i++;

}

DisAssigns();
GMM->do_callback();} {}
  }
  Function {PrepareML()} {} {
    code {FillML(0);
if(rkr->comemouse==0)
{
 MIDILearn->show();
 put_icon(MIDILearn);
 return;
} 

if(rkr->comemouse) 
{
 if(rkr->autoassign==0)
   {
       MIDILearn->show();
       put_icon(MIDILearn);
       return;
   } 
}} {}
  }
  Function {addpreset(Fl_Widget *w, int num)} {return_type {inline void}
  } {
    code {if(num==12) return;
const char *name = fl_input("Preset Name?","");
if(name==NULL) return;
char NewName[64];
memset(NewName,0,sizeof(NewName));
sprintf(NewName,"*%s",name);
add_name(w,NewName);
rkr->SaveIntPreset(num,NewName);} {}
  }
  Function {add_name(Fl_Widget *w, char *name)} {} {
    code {Fl_Choice *s = (Fl_Choice * ) w;
s->add(name);


Fl_Menu_*n = (Fl_Menu_*)s->menu();
Fl_Menu_Item *m = (Fl_Menu_Item*) n; 
Fl_Menu_Item *p;  
int k=10;

for(int i=0; i<m->size(); i++)
    {
     p=m->next(i);
     if(i==0)k=p->labelsize();
     p->labelsize(k);
     }} {}
  }
  Function {FindWidget(int num)} {return_type {Fl_Widget *}
  } {
    code {for (int t=0; t<Principal->children();t++)
  {
    Fl_Widget *w = Principal->child(t);
    long long ud = (long long) w->user_data();
     
    if (ud==1)
    {
          
     Fl_Group *g = (Fl_Group *)w;     
      
     for(int i=0;i<g->children();i++)
       {

         Fl_Widget *c = g->child(i);
         long long uh = (long long) c->user_data();
         if(uh==(num+12000)) return c;
        }
     }          
   }
   
return NULL;} {}
  }
  Function {ReadIntPresets()} {} {
    code {FILE *fn;
char tempfile[256];
char buf[256];
char *name;
char *sbuf;
int num=0;
memset(tempfile,0,sizeof(tempfile));

sprintf (tempfile, "%s%s", getenv ("HOME"), "/.rkrintpreset");

if (( fn = fopen (tempfile, "r")) != NULL)
{
   while (fgets (buf, sizeof buf, fn) != NULL)
    
     {
        
       sbuf = buf;
       sscanf(buf,"%d",&num);
       name = strsep(&sbuf,",");
       name = strsep(&sbuf,",");
       add_name(FindWidget(num), name);
     }
 fclose(fn);
}} {}
  }
  Function {delpreset(Fl_Widget *w, int num)} {open return_type {inline void}
  } {
    code {if(num==12) return;
int ok = 0;
char temp2[128];
char Rname[128];
Fl_Choice *s = (Fl_Choice * ) w;
if(strncmp(s->text(),"*",1)!=0) 
{
 fl_message("Internal Presets can not be deleted ");
 return;
} 

sprintf(temp2,"Delete? \\"%s\\"",s->text());
ok=fl_choice(temp2,"No","Yes",NULL);
if (!ok) return;
memset(Rname,0,sizeof(Rname));
sprintf(Rname,"%s",s->text());
s->remove(s->value());
s->value(0);
s->redraw();
rkr->DelIntPreset(num,Rname);} {}
  }
  Function {Prep_Reorden(int source, int dest)} {} {
    code {int x = rkr->efx_order[source];
int y = rkr->efx_order[dest];

rkr->efx_order[source]=y;
rkr->efx_order[dest]=x;

reordena();

if (Order->visible())Prepare_Order();} {}
  }
  Function {make_table_window()} {} {
    code {scroll->begin();

  for (int y=0; y<128; y++)
   {
    char buf[20]; sprintf(buf,"%d",y);
  
    Fl_Box* b = new Fl_Box(6,y*25+22,60,25);
    b->box(FL_DOWN_BOX);
    b->copy_label(buf);
    b->labelcolor(FL_WHITE);
    b->user_data((void *) 8000);
    
    Fl_Choice* cb = new Fl_Choice(120,y*25+25,60,20);
    cb->copy_label("Bank");
    cb->labelcolor(FL_WHITE);
    cb->add("1");
    cb->add("2");
    cb->add("3");
    cb->add("U");
    cb->user_data((void *) (1000+y));
    cb->callback((Fl_Callback *)bank_click); 
    scroll->add(cb);
    
    Fl_Choice* cp = new Fl_Choice(260,y*25+25,220,20);
    cp->copy_label("Preset");
    cp->labelcolor(FL_WHITE);
    cp->user_data((void *) (2000+y));
    cp->callback((Fl_Callback *)p_click); 
    scroll->add(cp);
  
  
  }
  scroll->end();
  
Put_MidiTable();
 

 scroll->position(0,-339);} {}
  }
  Function {bank_click(Fl_Choice* o, void* v)} {return_type {static void}
  } {
    code {((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->bank_click_i(o,v);} {}
  }
  Function {bank_click_i(Fl_Choice* o, void*)} {C return_type {inline void}
  } {
    code {long long kk = (long long) o->user_data();
int num = (int) kk;

rkr->M_table[num-1000].bank=(int) o->value();
fill_mptable(num+1000,rkr->M_table[num-1000].bank);} {}
  }
  Function {p_click(Fl_Choice* o, void* v)} {return_type {static void}
  } {
    code {((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->p_click_i(o,v);} {}
  }
  Function {p_click_i(Fl_Choice* o, void*)} {C return_type {inline void}
  } {
    code {long long kk = (long long) o->user_data();
int num = (int) kk;

rkr->M_table[num-2000].preset=o->value();} {}
  }
  Function {fill_mptable(int num,int value)} {} {
    code {for (int t=0; t<scroll->children();t++)
  {
    Fl_Widget *w = scroll->child(t);
    long long temp = (long long) w->user_data();
    if ((int)temp == num)
    {
     Fl_Choice *p = (Fl_Choice * ) w; 
     p->clear(); 
     for(int i=1; i<=60;i++)
     p->add(rkr->B_Names[value][i].Preset_Name);
     break;
    }
  }} {}
  }
  Function {mtfillvalue(int num,int value)} {} {
    code {for (int t=0; t<scroll->children();t++)
  {
    Fl_Widget *w = scroll->child(t);
    long long temp = (long long) w->user_data();
    if ((int)temp == num)
    {
     Fl_Choice *p = (Fl_Choice * ) w; 
     p->value(value); 
     break;
    }
  }} {}
  }
  Function {Put_MidiTable()} {} {
    code {for(int i=0;i<128;i++)
{
 mtfillvalue(i+1000, rkr->M_table[i].bank);
 fill_mptable(i+2000, rkr->M_table[i].bank);
 mtfillvalue(i+2000, rkr->M_table[i].preset);
}} {}
  }
  Function {RandomPreset()} {} {
    code {int i,j,l;
int SelEff[10];
int numEff = (int) (RND*6) + 1;
long long k;


S_new->do_callback();

SelEff[0]=(int)(RND*rkr->NumEffects);

for(i=1;i<10;i++) 
{
 l=0;
 while (l==0)
 {
   SelEff[i]=(int)(RND* rkr->NumEffects);
   for(j=0;j<i;j++)
    {
      if(SelEff[j]==SelEff[i])
       {
         l=0; 
         break;
       }    
      else
      l=1;
    }
 }


}





 for(i=0; i<10; i++)
{
  rkr->efx_order[i]=SelEff[i];
  
}


  


for(i=0;i<10;i++)
 {

   switch(rkr->efx_order[i])
    {
      

     case 0: //EQ1
     if (i<numEff)rkr->EQ1_Bypass=1; else rkr->EQ1_Bypass=0;
     eq_activar->value(rkr->EQ1_Bypass);
     break;

     case 1://Compressor
     if (i<numEff)rkr->Compressor_Bypass=1; else rkr->Compressor_Bypass=0;
     compress_activar->value(rkr->Compressor_Bypass);
     break;

     case 2://Distorsion
     if (i<numEff) rkr->Distorsion_Bypass=1; else rkr->Distorsion_Bypass=0; 
     dist_activar->value(rkr->Distorsion_Bypass);
     break;

     case 3://Overdrive
     if (i<numEff)rkr->Overdrive_Bypass=1; else rkr->Overdrive_Bypass=0;
     ovrd_activar->value(rkr->Overdrive_Bypass);
     break; 

     case 4://Echo
     if (i<numEff)rkr->Echo_Bypass=1; else rkr->Echo_Bypass=0;
     echo_activar->value(rkr->Echo_Bypass);
     break;
     
     case 5://Chorus
     if (i<numEff)rkr->Chorus_Bypass=1; else rkr->Chorus_Bypass=0;
     chorus_activar->value(rkr->Chorus_Bypass);
     break;
     
     case 6://Phaser
     if (i<numEff)rkr->Phaser_Bypass=1; else rkr->Phaser_Bypass=0;
     phaser_activar->value(rkr->Phaser_Bypass);
     break;  

     case 7://Flanger
     if (i<numEff)rkr->Flanger_Bypass=1; else rkr->Flanger_Bypass=0;
     flanger_activar->value(rkr->Flanger_Bypass);
     break;
 
     case 8://Reverb
     if (i<numEff)rkr->Reverb_Bypass=1; else rkr->Reverb_Bypass=0;
     reverb_activar->value(rkr->Reverb_Bypass);
     break;  

     case 9://EQ2
     if (i<numEff)rkr->EQ2_Bypass=1; else rkr->EQ2_Bypass=0; 
     eqp_activar->value(rkr->EQ2_Bypass);
     break; 
     
     case 10://WahWah
     if (i<numEff)rkr->WhaWha_Bypass=1; else rkr->WhaWha_Bypass=0;
     WhaWha_activar->value(rkr->WhaWha_Bypass);
     break;

     case 11://AlienWah
     if (i<numEff)rkr->Alienwah_Bypass=1; else rkr->Alienwah_Bypass=0;
     Alienwah_activar->value(rkr->Alienwah_Bypass);
     break;
     
     case 12://Cabinet
     if (i<numEff)rkr->Cabinet_Bypass=1; else rkr->Cabinet_Bypass=0;
     Cabinet_activar->value(rkr->Cabinet_Bypass);
     break;
 
     case 13://Pan
     if (i<numEff)rkr->Pan_Bypass=1; else rkr->Pan_Bypass=0;
     pan_activar->value(rkr->Pan_Bypass);
     break;
     
     case 14://Har
     if (i<numEff)rkr->Harmonizer_Bypass=1; else rkr->Harmonizer_Bypass=0;
     har_activar->value(rkr->Harmonizer_Bypass);
     break;

     case 15://MsicalDelay
     if (i<numEff)rkr->MusDelay_Bypass=1; else rkr->MusDelay_Bypass=0;
     musdelay_activar->value(rkr->MusDelay_Bypass);
     break; 

     case 16://NoiseGate
     if (i<numEff)rkr->Gate_Bypass=1; else rkr->Gate_Bypass=0;
     gate_activar->value(rkr->Gate_Bypass);
     break; 

     case 17://NewDist
     if (i<numEff)rkr->NewDist_Bypass=1; else rkr->NewDist_Bypass=0;
     newdist_activar->value(rkr->NewDist_Bypass);
     break;
     
     case 18://APhaser
     if (i<numEff)rkr->APhaser_Bypass=1; else rkr->APhaser_Bypass=0;
     aphaser_activar->value(rkr->APhaser_Bypass);
     break;

     case 19://Valve
     if (i<numEff)rkr->Valve_Bypass=1; else rkr->Valve_Bypass=0;
     valve_activar->value(rkr->Valve_Bypass);
     break;

     case 20://Dual_Flange
     if (i<numEff)rkr->DFlange_Bypass=1; else rkr->DFlange_Bypass=0;
     dflange_activar->value(rkr->DFlange_Bypass);
     break;

     case 21:// Ring
     if (i<numEff)rkr->Ring_Bypass=1; else rkr->Ring_Bypass=0;
     ring_activar->value(rkr->Ring_Bypass);
     break;  

     case 22:// Exciter
     if (i<numEff)rkr->Exciter_Bypass=1; else rkr->Exciter_Bypass=0;
     exciter_activar->value(rkr->Exciter_Bypass);
     break; 

     case 23://MBDist
     if (i<numEff)rkr->MBDist_Bypass=1; else rkr->MBDist_Bypass=0;
     mbdist_activar->value(rkr->MBDist_Bypass);
     break;

     case 24://Arpie
     if (i<numEff)rkr->Arpie_Bypass=1;else rkr->Arpie_Bypass=0;
     arpie_activar->value(rkr->Arpie_Bypass);
     break;

     case 25://Expander
     if (i<numEff)rkr->Expander_Bypass=1; else rkr->Expander_Bypass=0;
     expander_activar->value(rkr->Expander_Bypass);
     break;

     case 26://Shuffle
     if (i<numEff)rkr->Shuffle_Bypass=1; else rkr->Shuffle_Bypass=0;
     shuffle_activar->value(rkr->Shuffle_Bypass);
     break;

     case 27://Synthfilter
     if (i<numEff)rkr->Synthfilter_Bypass=1; else rkr->Synthfilter_Bypass=0;
     synthfilter_activar->value(rkr->Synthfilter_Bypass);
     break; 

     case 28://VaryBand
     if (i<numEff)rkr->MBVvol_Bypass=1; else rkr->MBVvol_Bypass=0;
     mbvvol_activar->value(rkr->MBVvol_Bypass);
     break;

     case 29://Convolotron
     if (i<numEff)rkr->Convol_Bypass=1; else rkr->Convol_Bypass=0;
     convo_activar->value(rkr->Convol_Bypass);
     break; 

     case 30://Looper
     if (i<numEff)rkr->Looper_Bypass=1; else rkr->Looper_Bypass=0;
     looper_activar->value(rkr->Looper_Bypass);
     update_looper();
     break;

     case 31://RyanWah
     if (i<numEff)rkr->RyanWah_Bypass=1; else rkr->RyanWah_Bypass=0;
     ryanwah_activar->value(rkr->RyanWah_Bypass);
     break;  
     
     case 32:// RBEcho
     if (i<numEff)rkr->RBEcho_Bypass=1; else rkr->RBEcho_Bypass=0;
     rbecho_activar->value(rkr->RBEcho_Bypass);
     break;
     
     case 33:// CoilCrafter
     if (i<numEff)rkr->CoilCrafter_Bypass=1; else rkr->CoilCrafter_Bypass=0;
     coil_activar->value(rkr->CoilCrafter_Bypass);
     break;

     case 34://ShelfBoost
     if (i<numEff)rkr->ShelfBoost_Bypass=1; else rkr->ShelfBoost_Bypass=0;
     shelf_activar->value(rkr->ShelfBoost_Bypass);
     break;
     
     case 35://Vocoder
     if (i<numEff)rkr->Vocoder_Bypass=1; else rkr->Vocoder_Bypass=0;
     vo_activar->value(rkr->Vocoder_Bypass);
     break;

     case 36://Sustainer
     if (i<numEff)rkr->Sustainer_Bypass=1; else rkr->Sustainer_Bypass=0;
     sus_activar->value(rkr->Sustainer_Bypass);
     break;
     
    case 37://Sequence
    if (i<numEff)rkr->Sequence_Bypass=1; else rkr->Sequence_Bypass=0;
    seq_activar->value(rkr->Sequence_Bypass);
    break;

    case 38://Shifter
    if (i<numEff)rkr->Shifter_Bypass=1; else rkr->Shifter_Bypass=0;
    shifter_activar->value(rkr->Shifter_Bypass);
    break;

    case 39://StompBox
    if (i<numEff)rkr->StompBox_Bypass=1; else rkr->StompBox_Bypass=0;
    stomp_activar->value(rkr->StompBox_Bypass);
    break;

    case 40://Reverbtron
    if (i<numEff)rkr->Reverbtron_Bypass=1; else rkr->Reverbtron_Bypass=0;
    revtron_activar->value(rkr->Reverbtron_Bypass);
    break;

    case 41://Echotron
    if (i<numEff)rkr->Echotron_Bypass=1; else rkr->Echotron_Bypass=0;
    echotron_activar->value(rkr->Echotron_Bypass);
    break;

    case 42://StereoHarm
    if (i<numEff)rkr->StereoHarm_Bypass=1; else rkr->StereoHarm_Bypass=0;
    shar_activar->value(rkr->StereoHarm_Bypass);
    break; 

    case 43://CompBand
    if (i<numEff)rkr->CompBand_Bypass=1; else rkr->CompBand_Bypass=0;
    cband_activar->value(rkr->CompBand_Bypass);
    break;

    case 44://Opticaltrem
    if (i<numEff)rkr->Opticaltrem_Bypass=1; else rkr->Opticaltrem_Bypass=0;
    otrem_activar->value(rkr->Opticaltrem_Bypass);
    break;

    case 45://Vibe
    if (i<numEff)rkr->Vibe_Bypass=1; else rkr->Vibe_Bypass=0;
    vibe_activar->value(rkr->Vibe_Bypass);
    break;
  }




 Fl_Widget *w = FindWidget(SelEff[i]);
 Fl_Choice *s = (Fl_Choice *) w;
 k = (long long) s->user_data();
 int Esel = (int)(RND * s->size());
 s->value(Esel);
 s->do_callback(w,k);
}

FillML(0);
Prepare_Order();
Put_Loaded();

ActivarGeneral->value(1);
ActivarGeneral->do_callback();} {}
  }
  Function {drag_effect()} {} {
    code {if((drag!=1000) && (Fl::event_button1()==0))
{
Fl_Widget *w = Fl::belowmouse();
if (w !=NULL)
{
long long k = (long long) w->user_data();
if((k<770)||( k>779)) return;
if(drag != (int)k-770) Prep_Reorden(drag,(int)k-770);
}
drag=1000;
}} {}
  }
  Function {AddBankName(const char *name)} {return_type int
  } {
    code {struct list_element *elem;

        elem = (struct list_element *)calloc(1,sizeof(struct list_element));
        if (elem == NULL) {
                return 0;
        }
        elem->name = (char *)calloc(1,256);
        if (elem->name == NULL) {
                free(elem);
                return 0;
        }
        strncpy(elem->name, name, 255);
        if (mBankNameList == NULL) {
                mBankNameList = elem;
                insque(elem, NULL);
        } else {
                insque(elem, mBankNameListTail);
        }
        mBankNameListTail = elem;
        return 1;} {}
  }
  Function {ClearBankNames()} {} {
    code {struct list_element *elem;
        while (mBankNameList != NULL) {
                elem = mBankNameList;
                mBankNameList = elem->forward;
                free(elem->name);
                remque(elem);
                free(elem);
        }} {}
  }
}
